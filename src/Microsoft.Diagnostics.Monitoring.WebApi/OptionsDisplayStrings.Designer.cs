//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Diagnostics.Monitoring.WebApi {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class OptionsDisplayStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal OptionsDisplayStrings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.Diagnostics.Monitoring.WebApi.OptionsDisplayStrings", typeof(OptionsDisplayStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to API key in hashed form. Each byte should be two hexadecimal-based digits..
        /// </summary>
        public static string DisplayAttributeDescription_ApiAuthenticationOptions_ApiKeyHash {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ApiAuthenticationOptions_ApiKeyHash", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hash algorithm used to compute ApiKeyHash, typically &apos;SHA256&apos;. &apos;SHA1&apos; and &apos;MD5&apos; are not allowed..
        /// </summary>
        public static string DisplayAttributeDescription_ApiAuthenticationOptions_ApiKeyHashType {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ApiAuthenticationOptions_ApiKeyHashType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List of allowed CORS origins, separated by semicolons..
        /// </summary>
        public static string DisplayAttributeDescription_CorsConfiguration_AllowedOrigins {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CorsConfiguration_AllowedOrigins", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Launches in mode where dotnet-monitor will connect to a separate running dotnet process..
        /// </summary>
        public static string DisplayAttributeDescription_DiagnosticPortConnectionMode_Connect {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_DiagnosticPortConnectionMode_Connect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Launches in mode where dotnet-monitor will listen for connections from a separate running dotnet process. This configuration options requires environment variables be set on the target process..
        /// </summary>
        public static string DisplayAttributeDescription_DiagnosticPortConnectionMode_Listen {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_DiagnosticPortConnectionMode_Listen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In &apos;Connect&apos; mode, dotnet-monitor connects to the application for diagnostics. In &apos;Listen&apos; mode, the application connects to dotnet-monitor via EndpointName..
        /// </summary>
        public static string DisplayAttributeDescription_DiagnosticPortOptions_ConnectionMode {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_DiagnosticPortOptions_ConnectionMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In &apos;Listen&apos; mode, specifies the name of the named pipe or unix domain socket to use for connecting to the diagnostic server..
        /// </summary>
        public static string DisplayAttributeDescription_DiagnosticPortOptions_EndpointName {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_DiagnosticPortOptions_EndpointName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In &apos;Listen&apos; mode, the maximum amount of connections to accept..
        /// </summary>
        public static string DisplayAttributeDescription_DiagnosticPortOptions_MaxConnections {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_DiagnosticPortOptions_MaxConnections", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Additional properties, such as secrets, that can be referenced by the provider definitions..
        /// </summary>
        public static string DisplayAttributeDescription_EgressOptions_Properties {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_EgressOptions_Properties", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Named providers for egress. The names can be referenced when requesting artifacts, such as dumps or traces..
        /// </summary>
        public static string DisplayAttributeDescription_EgressOptions_Providers {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_EgressOptions_Providers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of provider. Currently this supports &apos;fileSystem&apos; and &apos;azureBlobStorage&apos;..
        /// </summary>
        public static string DisplayAttributeDescription_EgressProvider_EgressType {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_EgressProvider_EgressType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name of custom metrics counters..
        /// </summary>
        public static string DisplayAttributeDescription_MetricProvider_CounterNames {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_MetricProvider_CounterNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the custom metrics provider..
        /// </summary>
        public static string DisplayAttributeDescription_MetricProvider_ProviderName {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_MetricProvider_ProviderName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable or disable metrics collection..
        /// </summary>
        public static string DisplayAttributeDescription_MetricsOptions_Enabled {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_MetricsOptions_Enabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Endpoints that expose prometheus metrics. Defaults to http://localhost:52325..
        /// </summary>
        public static string DisplayAttributeDescription_MetricsOptions_Endpoints {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_MetricsOptions_Endpoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Include default providers: System.Runtime, Microsoft.AspNetCore.Hosting, and Grpc.AspNetCore.Server..
        /// </summary>
        public static string DisplayAttributeDescription_MetricsOptions_IncludeDefaultProviders {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_MetricsOptions_IncludeDefaultProviders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Amount of data points to store per metric..
        /// </summary>
        public static string DisplayAttributeDescription_MetricsOptions_MetricCount {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_MetricsOptions_MetricCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Providers for custom metrics..
        /// </summary>
        public static string DisplayAttributeDescription_MetricsOptions_Providers {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_MetricsOptions_Providers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to How often metrics are collected..
        /// </summary>
        public static string DisplayAttributeDescription_MetricsOptions_UpdateIntervalSeconds {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_MetricsOptions_UpdateIntervalSeconds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The criteria used to compare against the target process..
        /// </summary>
        public static string DisplayAttributeDescription_ProcessFilterDescriptor_Key {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ProcessFilterDescriptor_Key", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type of match to use against the process criteria..
        /// </summary>
        public static string DisplayAttributeDescription_ProcessFilterDescriptor_MatchType {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ProcessFilterDescriptor_MatchType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of the criteria used to compare against the target process..
        /// </summary>
        public static string DisplayAttributeDescription_ProcessFilterDescriptor_Value {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ProcessFilterDescriptor_Value", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Performs a match based on the contents of the command passed to launch the process on the system; this typically includes the executable path and arguments to the process..
        /// </summary>
        public static string DisplayAttributeDescription_ProcessFilterKey_CommandLine {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ProcessFilterKey_CommandLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Performs a match based on the numerical ID of a process on the system..
        /// </summary>
        public static string DisplayAttributeDescription_ProcessFilterKey_ProcessId {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ProcessFilterKey_ProcessId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Performs a match based on the name of a process on the system..
        /// </summary>
        public static string DisplayAttributeDescription_ProcessFilterKey_ProcessName {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ProcessFilterKey_ProcessName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Process filters used to determine which process to use if one is not explicitly specified. All filters must match..
        /// </summary>
        public static string DisplayAttributeDescription_ProcessFilterOptions_Filters {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ProcessFilterOptions_Filters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Performs a case-insensitive substring search..
        /// </summary>
        public static string DisplayAttributeDescription_ProcessFilterType_Contains {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ProcessFilterType_Contains", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Performs a case-insensitive string comparison..
        /// </summary>
        public static string DisplayAttributeDescription_ProcessFilterType_Exact {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ProcessFilterType_Exact", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The location for temporary dump files. Defaults to the temp folder..
        /// </summary>
        public static string DisplayAttributeDescription_StorageOptions_DumpTempFolder {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_StorageOptions_DumpTempFolder", resourceCulture);
            }
        }
    }
}
