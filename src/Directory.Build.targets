<?xml version="1.0" encoding="utf-8"?>
<Project>
  <Import Project="Sdk.targets" Sdk="Microsoft.DotNet.Arcade.Sdk" />

  <Import Project="$(RepositoryEngineeringDir)Helix.targets" />

  <!-- Work around https://github.com/dotnet/sourcelink/issues/572
  Remove once we build using an SDK that contains https://github.com/dotnet/sdk/pull/10613 -->
  <PropertyGroup>
    <TargetFrameworkMonikerAssemblyAttributesPath>$([System.IO.Path]::Combine('$(IntermediateOutputPath)','$(TargetFrameworkMoniker).AssemblyAttributes$(DefaultLanguageSourceExtension)'))</TargetFrameworkMonikerAssemblyAttributesPath>
  </PropertyGroup>
  <ItemGroup>
    <EmbeddedFiles Include="$(GeneratedAssemblyInfoFile)"/>
  </ItemGroup>

  <Target Name="GetDocumentationFile"
          Returns="@(DocFileItem)" />

  <!-- Creates artifact files related to the package that will be uploaded to blob storage during publish. -->
  <Target Name="GenerateArchivePackageProjectFiles"
          AfterTargets="_CreateArchive"
          Condition="'$(DisableCustomBlobStoragePublishing)' != 'true' and '$(IsArchivable)' == 'true'">
    <!-- The path needs to be relative to the repository root to allow for correct path rooting across platforms and build machines. -->
    <WriteLinesToFile File="$(_DestinationFileName).projectpath"
                      Lines="$([MSBuild]::MakeRelative($(RepoRoot), $(MSBuildProjectFullPath)))"
                      Overwrite="true" />
    <ItemGroup>
      <PackageProjectProps Remove="@(PackageProjectProps)" />
      <PackageProjectProps Include="RuntimeIdentifier=$(RuntimeIdentifier)" />
    </ItemGroup>
    <!-- Write a props file so that the above project is invoked during publish with the specified properties. -->
    <WriteLinesToFile File="$(_DestinationFileName).projectprops"
                      Lines="@(PackageProjectProps)"
                      Overwrite="true" />
  </Target>
  <Target Name="GenerateSymbolsArchivePackageProjectFiles"
          AfterTargets="_CreateSymbolsArchive"
          Condition="'$(DisableCustomBlobStoragePublishing)' != 'true' and '$(IsArchivable)' == 'true' and '$(CreateSymbolsArchive)' == 'true'">
    <!-- The path needs to be relative to the repository root to allow for correct path rooting across platforms and build machines. -->
    <WriteLinesToFile File="$(_DestinationFileName).projectpath"
                      Lines="$([MSBuild]::MakeRelative($(RepoRoot), $(MSBuildProjectFullPath)))"
                      Overwrite="true" />
    <ItemGroup>
      <PackageProjectProps Remove="@(PackageProjectProps)" />
      <PackageProjectProps Include="RuntimeIdentifier=$(RuntimeIdentifier)" />
      <PackageProjectProps Include="IsSymbolsArchive=true" />
    </ItemGroup>
    <!-- Write a props file so that the above project is invoked during publish with the specified properties. -->
    <WriteLinesToFile File="$(_DestinationFileName).projectprops"
                      Lines="@(PackageProjectProps)"
                      Overwrite="true" />
  </Target>

  <Target Name="GetPackageVersion"
          Returns="$(PackageVersion)" />

  <Target Name="GetPackageFileName"
          Returns="@(PackageFileName)">
    <ItemGroup>
      <!-- The archive targets use Version instead of PackageVersion; do the same to be consistent. -->
      <PackageFileName Include="$(ArchiveName)-$(Version)-$(RuntimeIdentifier).$(ArchiveFormat)" Condition="'$(IsArchivable)' == 'true' and '$(IsSymbolsArchive)' != 'true' " />
      <!-- Symbols archive names reverse the order of the version and runtime identifier compared to the product archive. -->
      <PackageFileName Include="$(ArchiveName)-symbols-$(RuntimeIdentifier)-$(Version).$(ArchiveFormat)" Condition="'$(IsArchivable)' == 'true' and '$(IsSymbolsArchive)' == 'true' " />
    </ItemGroup>
  </Target>

  <!-- Remove native libraries from transitive dependencies -->
  <ItemGroup>
    <!--
      These assets are Windows-specific native libraries and are not used in the trace event usage
      by dotnet-monitor. Removing them saves about 20 MBs from the unpacked dotnet-monitor installation.
      -->
    <None Remove="$(NuGetPackageRoot)Microsoft.Diagnostics.Tracing.TraceEvent\*\build\native\**" />
    <!-- These are the same items above but using relative paths that haven't been resolved into absolute paths. -->
    <None Remove="$(NuGetPackageRoot)Microsoft.Diagnostics.Tracing.TraceEvent\buildTransitive\..\build\native\**" />
  </ItemGroup>

  <Target Name="CalculateProjectRuntimeConfigTestFilePath">
    <PropertyGroup>
      <ProjectRuntimeConfigTestFileName Condition="'$(ProjectRuntimeConfigTestFileName)' == ''">$(AssemblyName).runtimeconfig.test.json</ProjectRuntimeConfigTestFileName>
      <ProjectRuntimeConfigTestFilePath Condition="'$(ProjectRuntimeConfigTestFilePath)' == ''">$(TargetDir)$(ProjectRuntimeConfigTestFileName)</ProjectRuntimeConfigTestFilePath>
    </PropertyGroup>
  </Target>

  <!--
    Typically, the SDK will generate a runtimeconfig.json file with frameworks that it natively has included
    with itself. This does not allow testing with newer runtime versions brought in through dependency updates.
    The unit test apps can be rolled forward using RuntimeFrameworkVersion at build time, however we do not want
    to do this with any binaries that are shipped e.g. dotnet-monitor. Additionally the runtime-fx argument to
    dotnet does not work for any application that has more than one framework, such as ASP.NET apps.

    The general purpose solution is to generate a custom runtimeconfig[.test].json file that instructs the
    runtime which framework versions to use. The framework versions in this file are the ones provided by the
    dependency flow system.
  -->
  <Target Name="GenerateTestRuntimeConfigurationFiles"
          DependsOnTargets="GenerateBuildRuntimeConfigurationFiles;CalculateProjectRuntimeConfigTestFilePath"
          BeforeTargets="CopyFilesToOutputDirectory"
          Condition=" '$(GenerateRuntimeConfigurationFiles)' == 'true' "
          Inputs="@(GenerateRuntimeConfigurationFilesInputs)"
          Outputs="$(ProjectRuntimeConfigTestFilePath)">
    <!--
      For each target framework, copy and modify the version for NETCore and AspNetCore; include any remaining
      frameworks that are not forcibly re-versioned.
      -->
    <ItemGroup Condition=" '$(TargetFramework)' == 'netcoreapp3.1' ">
      <_TestRuntimeFramework Include="@(RuntimeFramework)" Condition=" '%(Identity)' == 'Microsoft.NETCore.App' ">
        <Version>$(MicrosoftNETCoreApp31Version)</Version>
      </_TestRuntimeFramework>
      <_TestRuntimeFramework Include="@(RuntimeFramework)" Condition=" '%(Identity)' == 'Microsoft.AspNetCore.App' ">
        <Version>$(MicrosoftAspNetCoreApp31Version)</Version>
      </_TestRuntimeFramework>
    </ItemGroup>
    <ItemGroup Condition=" '$(TargetFramework)' == 'net5.0' ">
      <_TestRuntimeFramework Include="@(RuntimeFramework)" Condition=" '%(Identity)' == 'Microsoft.NETCore.App' ">
        <Version>$(MicrosoftNETCoreApp50Version)</Version>
      </_TestRuntimeFramework>
      <_TestRuntimeFramework Include="@(RuntimeFramework)" Condition=" '%(Identity)' == 'Microsoft.AspNetCore.App' ">
        <Version>$(MicrosoftAspNetCoreApp50Version)</Version>
      </_TestRuntimeFramework>
    </ItemGroup>
    <ItemGroup Condition=" '$(TargetFramework)' == 'net6.0' ">
      <_TestRuntimeFramework Include="@(RuntimeFramework)" Condition=" '%(Identity)' == 'Microsoft.NETCore.App' ">
        <Version>$(MicrosoftNETCoreApp60Version)</Version>
      </_TestRuntimeFramework>
      <_TestRuntimeFramework Include="@(RuntimeFramework)" Condition=" '%(Identity)' == 'Microsoft.AspNetCore.App' ">
        <Version>$(MicrosoftAspNetCoreApp60Version)</Version>
      </_TestRuntimeFramework>
    </ItemGroup>
    <ItemGroup Condition=" '$(TargetFramework)' == 'net7.0' ">
      <_TestRuntimeFramework Include="@(RuntimeFramework)" Condition=" '%(Identity)' == 'Microsoft.NETCore.App' ">
        <Version>$(MicrosoftNETCoreApp70Version)</Version>
      </_TestRuntimeFramework>
      <_TestRuntimeFramework Include="@(RuntimeFramework)" Condition=" '%(Identity)' == 'Microsoft.AspNetCore.App' ">
        <Version>$(MicrosoftAspNetCoreApp70Version)</Version>
      </_TestRuntimeFramework>
    </ItemGroup>
    <ItemGroup Condition=" '$(TargetFramework)' == 'net8.0' ">
      <_TestRuntimeFramework Include="@(RuntimeFramework)" Condition=" '%(Identity)' == 'Microsoft.NETCore.App' ">
        <Version>$(MicrosoftNETCoreApp80Version)</Version>
      </_TestRuntimeFramework>
      <_TestRuntimeFramework Include="@(RuntimeFramework)" Condition=" '%(Identity)' == 'Microsoft.AspNetCore.App' ">
        <Version>$(MicrosoftAspNetCoreApp80Version)</Version>
      </_TestRuntimeFramework>
    </ItemGroup>
    <ItemGroup>
      <_TestRuntimeFramework Include="@(RuntimeFramework)" Condition=" '%(Identity)' != 'Microsoft.NETCore.App' and '%(Identity)' != 'Microsoft.AspNetCore.App' " />
    </ItemGroup>
    <GenerateRuntimeConfigurationFiles AssetsFilePath="$(ProjectAssetsFile)"
                                       TargetFramework="$(TargetFramework)"
                                       TargetFrameworkMoniker="$(TargetFrameworkMoniker)"
                                       RuntimeConfigPath="$(ProjectRuntimeConfigTestFilePath)"
                                       RuntimeIdentifier="$(RuntimeIdentifier)"
                                       PlatformLibraryName="$(MicrosoftNETPlatformLibrary)"
                                       RuntimeFrameworks="@(_TestRuntimeFramework)"
                                       RollForward="$(RollForward)"
                                       UserRuntimeConfig="$(UserRuntimeConfig)"
                                       HostConfigurationOptions="@(RuntimeHostConfigurationOption)"
                                       AdditionalProbingPaths="@(AdditionalProbingPath)"
                                       IsSelfContained="$(SelfContained)"
                                       WriteIncludedFrameworks="$(_WriteIncludedFrameworks)"
                                       AlwaysIncludeCoreFramework="$(AlwaysIncludeCoreFrameworkInRuntimeConfig)" />
  </Target>

</Project>
