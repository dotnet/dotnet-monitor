<?xml version="1.0" encoding="utf-8"?>
<Project>
  <Import Project="Sdk.targets" Sdk="Microsoft.DotNet.Arcade.Sdk" />
  
  <!--
    Set InformationalVersion to only include the original version prefix and any prerelease suffix.
    It will be updated later with commit hash information. Without this setting to the original
    version prefix, the version would include a patch number that is computed from the build number,
    which makes it difficult to trace back to the exact release version. This information is also
    used when invoking the global version option for tools using System.CommandLine.
  -->
  <PropertyGroup>
    <InformationalVersion>$(_OriginalVersionPrefix)</InformationalVersion>
    <InformationalVersion Condition="'$(VersionSuffix)' != ''">$(InformationalVersion)-$(VersionSuffix)</InformationalVersion>
  </PropertyGroup>

  <!--
    Set PackageVersion to only include the original version prefix and any prerelease suffix.
    Without this setting to the original version prefix, the version would include a patch number
    that is computed from the build number, which makes it difficult to trace back to the exact
    release version. Only set this if PackageVersion was not explicitly set.
  -->
  <PropertyGroup Condition="'$(PackageVersion)' == ''">
    <PackageVersion>$(_OriginalVersionPrefix)</PackageVersion>
    <PackageVersion Condition="'$(VersionSuffix)' != ''">$(PackageVersion)-$(VersionSuffix)</PackageVersion>
  </PropertyGroup>

  <!-- Work around https://github.com/dotnet/sourcelink/issues/572
  Remove once we build using an SDK that contains https://github.com/dotnet/sdk/pull/10613 -->
  <PropertyGroup>
    <TargetFrameworkMonikerAssemblyAttributesPath>$([System.IO.Path]::Combine('$(IntermediateOutputPath)','$(TargetFrameworkMoniker).AssemblyAttributes$(DefaultLanguageSourceExtension)'))</TargetFrameworkMonikerAssemblyAttributesPath>
  </PropertyGroup>
  <ItemGroup>
    <EmbeddedFiles Include="$(GeneratedAssemblyInfoFile)"/>
  </ItemGroup>

  <!-- Creates artifact files related to the package that will be uploaded to blob storage during publish. -->
  <Target Name="GeneratePackageArtifactFiles"
          AfterTargets="Pack"
          Condition="'$(IsPackable)' == 'true' and '$(BlobGroupPrefix)' != ''">
    <PropertyGroup>
      <!--
        These properties take a package version and transform it into a blob group name so that
        all builds from the same product and release version are grouped together. This code has
        to consider when the version is a release version (e.g. 5.0.0) or has a prerelease label
        (e.g. 5.0.0-preview.1). The former is transformed into '$(BlobGroupPrefix)5.0/release' whereas
        the latter is transformed into '$(BlobGroupPrefix)5.0/preview.1'. It also accounts for the
        BlobGroupBuildQuality defined in Version.props, which determines if the prerelease information
        should be used in the final blob group name.
        -->
      <_PreReleaseSeperatorIndex>$(PackageVersion.IndexOf('-'))</_PreReleaseSeperatorIndex>
      
      <!-- Prerelease: '5.0.0-preview.1' -> '5.0.0' and 'preview.1' -->
      <_BlobGroupVersion Condition="'$(_PreReleaseSeperatorIndex)' != '-1'">$(PackageVersion.Substring(0, $(_PreReleaseSeperatorIndex)))</_BlobGroupVersion>
      <_BlobGroupPreRelease Condition="'$(_PreReleaseSeperatorIndex)' != '-1'">$(PackageVersion.Substring($([MSBuild]::Add($(_PreReleaseSeperatorIndex), 1))))</_BlobGroupPreRelease>
      
      <!-- Release: take the package version as-is. -->
      <_BlobGroupVersion Condition="'$(_PreReleaseSeperatorIndex)' == '-1'">$(PackageVersion)</_BlobGroupVersion>

      <!--
        Prerelease may contain additional fields; only want the label and first number
        (e.g. 'preview.1.12345' -> 'preview' and '1').
        -->
      <_BlobGroupPreReleaseLabel Condition="'$(_BlobGroupPreRelease)' != ''">$(_BlobGroupPreRelease.Split('.')[0])</_BlobGroupPreReleaseLabel>
      <_BlobGroupPreReleaseIteration Condition="'$(_BlobGroupPreRelease)' != ''">$(_BlobGroupPreRelease.Split('.')[1])</_BlobGroupPreReleaseIteration>
    </PropertyGroup>
    <!-- These are the valid BlobGroupBuildQuality values. -->
    <ItemGroup>
      <_BlobGroupBuildQualityName Include="daily" ReleaseName="daily" />
      <_BlobGroupBuildQualityName Include="prerelease" ReleaseName="$(_BlobGroupPreReleaseLabel).$(_BlobGroupPreReleaseIteration)" />
      <_BlobGroupBuildQualityName Include="release" ReleaseName="release" />
    </ItemGroup>
    <!-- Select the blob group build quality based on the specified property. -->
    <ItemGroup>
      <_SelectedBlobGroupQualityName Include="@(_BlobGroupBuildQualityName)" Condition="'%(Identity)' == '$(BlobGroupBuildQuality)'" />
    </ItemGroup>
    <PropertyGroup>
      <!-- Extract major and minor version fields from version number. -->
      <_BlobGroupVersionMajor>$(_BlobGroupVersion.Split('.')[0])</_BlobGroupVersionMajor>
      <_BlobGroupVersionMinor>$(_BlobGroupVersion.Split('.')[1])</_BlobGroupVersionMinor>
      <!-- Get release name from blob group build quality. -->
      <_BlobGroupReleaseName>@(_SelectedBlobGroupQualityName->'%(ReleaseName)')</_BlobGroupReleaseName>
    </PropertyGroup>
    <!-- Validate the selected and calculated values. -->
    <Error Text="BlobGroupBuildQuality must be set to a valid value: @(_BlobGroupBuildQualityName, ', ')" Condition="'@(_SelectedBlobGroupQualityName)' == ''" />
    <Error Text="Unable to calculate _BlobGroupVersionMajor" Condition="'$(_BlobGroupVersionMajor)' == ''" />
    <Error Text="Unable to calculate _BlobGroupVersionMinor" Condition="'$(_BlobGroupVersionMinor)' == ''" />
    <Error Text="Unable to calculate _BlobGroupReleaseName" Condition="'$(_BlobGroupReleaseName)' == ''" />
    <PropertyGroup>
      <!--
        Combine all parts to create blob group name. For example (with BlobGroupPrefix = 'monitor'):
        Daily: '5.0.0-preview.1.12345' -> 'monitor5.0/daily'
        Prerelease: '5.0.0-preview.1.12345' -> 'monitor5.0/preview.1'
        Release: '5.0.0' -> 'monitor5.0/release'
        -->
      <_BlobGroupName>$(BlobGroupPrefix)$(_BlobGroupVersionMajor).$(_BlobGroupVersionMinor)/$(_BlobGroupReleaseName)</_BlobGroupName>
    </PropertyGroup>
    <!-- A file that contains the blob group so that publishing can use it in the blob path calculation. -->
    <WriteLinesToFile File="$(PackageOutputPath)\$(PackageId).$(PackageVersion).nupkg.blobgroup"
                      Lines="$(_BlobGroupName)"
                      Overwrite="true" />
    <WriteLinesToFile File="$(PackageOutputPath)\$(PackageId).$(PackageVersion).nupkg.version"
                      Lines="$(PackageVersion)"
                      Overwrite="true" />
  </Target>

</Project>
