//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Diagnostics.Monitoring.WebApi {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class OptionsDisplayStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal OptionsDisplayStrings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.Diagnostics.Monitoring.Options.OptionsDisplayStrings", typeof(OptionsDisplayStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The list of request paths to ignore. A request path must exactly match one of the items in the list to be ignored..
        /// </summary>
        public static string DisplayAttributeDescription_AspNetRequestCountOptions_ExcludePaths {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_AspNetRequestCountOptions_ExcludePaths", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The list of request paths to monitor. If not specified, all request paths are monitored.  A request path must exactly match one of the items in the list to be monitored. Request paths matching the ExcludePaths list will not be monitored..
        /// </summary>
        public static string DisplayAttributeDescription_AspNetRequestCountOptions_IncludePaths {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_AspNetRequestCountOptions_IncludePaths", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The threshold of the number of requests that start within the sliding window of time..
        /// </summary>
        public static string DisplayAttributeDescription_AspNetRequestCountOptions_RequestCount {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_AspNetRequestCountOptions_RequestCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sliding time window in which the number of requests are counted..
        /// </summary>
        public static string DisplayAttributeDescription_AspNetRequestCountOptions_SlidingWindowDuration {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_AspNetRequestCountOptions_SlidingWindowDuration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The list of request paths to ignore. A request path must exactly match one of the items in the list to be ignored..
        /// </summary>
        public static string DisplayAttributeDescription_AspNetRequestDurationOptions_ExcludePaths {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_AspNetRequestDurationOptions_ExcludePaths", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The list of request paths to monitor. If not specified, all request paths are monitored. A request path must exactly match one of the items in the list to be monitored. Request paths matching the ExcludePaths list will not be monitored..
        /// </summary>
        public static string DisplayAttributeDescription_AspNetRequestDurationOptions_IncludePaths {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_AspNetRequestDurationOptions_IncludePaths", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The threshold of the number of slow requests that start within the sliding window of time..
        /// </summary>
        public static string DisplayAttributeDescription_AspNetRequestDurationOptions_RequestCount {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_AspNetRequestDurationOptions_RequestCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The threshold of the amount of time in which a request is considered to be slow..
        /// </summary>
        public static string DisplayAttributeDescription_AspNetRequestDurationOptions_RequestDuration {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_AspNetRequestDurationOptions_RequestDuration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sliding time window in which the the number of slow requests are counted..
        /// </summary>
        public static string DisplayAttributeDescription_AspNetRequestDurationOptions_SlidingWindowDuration {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_AspNetRequestDurationOptions_SlidingWindowDuration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The list of request paths to ignore. A request path must exactly match one of the items in the list to be ignored..
        /// </summary>
        public static string DisplayAttributeDescription_AspNetResponseStatusOptions_ExcludePaths {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_AspNetResponseStatusOptions_ExcludePaths", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The list of request paths to monitor. If not specified, all request paths are monitored. A request path must exactly match one of the items in the list to be monitored. Request paths matching the ExcludePaths list will not be monitored..
        /// </summary>
        public static string DisplayAttributeDescription_AspNetResponseStatusOptions_IncludePaths {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_AspNetResponseStatusOptions_IncludePaths", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The threshold number of responses with matching status codes..
        /// </summary>
        public static string DisplayAttributeDescription_AspNetResponseStatusOptions_ResponseCount {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_AspNetResponseStatusOptions_ResponseCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sliding time window in which the number of responses with matching status codes must occur..
        /// </summary>
        public static string DisplayAttributeDescription_AspNetResponseStatusOptions_SlidingWindowDuration {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_AspNetResponseStatusOptions_SlidingWindowDuration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The list of HTTP response status codes to monitor. Each item of the list can be a single code or a range of codes (e.g. &quot;400-499&quot;)..
        /// </summary>
        public static string DisplayAttributeDescription_AspNetResponseStatusOptions_StatusCodes {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_AspNetResponseStatusOptions_StatusCodes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameters used to use configure authentication using Azure Active Directory..
        /// </summary>
        public static string DisplayAttributeDescription_AuthenticationOptions_AzureAd {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_AuthenticationOptions_AzureAd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameters used to validate MonitorApiKey JWT tokens..
        /// </summary>
        public static string DisplayAttributeDescription_AuthenticationOptions_MonitorApiKey {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_AuthenticationOptions_MonitorApiKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The App ID URI of the app registration. Defaults to api://{ClientId} if not specified..
        /// </summary>
        public static string DisplayAttributeDescription_AzureAdOptions_AppIdUri {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_AzureAdOptions_AppIdUri", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The unique application (client) id assigned to the app registration in Azure Active Directory..
        /// </summary>
        public static string DisplayAttributeDescription_AzureAdOptions_ClientId {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_AzureAdOptions_ClientId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the Azure cloud instance users are signing in from. Can be either the Azure public cloud or one of the national clouds..
        /// </summary>
        public static string DisplayAttributeDescription_AzureAdOptions_Instance {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_AzureAdOptions_Instance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The role required to be able to authenticate..
        /// </summary>
        public static string DisplayAttributeDescription_AzureAdOptions_RequiredRole {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_AzureAdOptions_RequiredRole", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The API scope required by users to be able to interactively authenticate using the in-box Swagger UI. If not specified, users will not be able to interactively authenticate..
        /// </summary>
        public static string DisplayAttributeDescription_AzureAdOptions_SwaggerScope {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_AzureAdOptions_SwaggerScope", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The tenant id of the Azure Active Directory tenant, or its tenant domain..
        /// </summary>
        public static string DisplayAttributeDescription_AzureAdOptions_TenantId {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_AzureAdOptions_TenantId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enables or disables the call stacks feature. By default, this feature is enabled if in-process features are enabled..
        /// </summary>
        public static string DisplayAttributeDescription_CallStacksOptions_Enabled {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CallStacksOptions_Enabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The duration of time in which the artifact is collected..
        /// </summary>
        public static string DisplayAttributeDescription_CollectArtifactOptions_Duration {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectArtifactOptions_Duration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the egress provider to which the artifact is egressed..
        /// </summary>
        public static string DisplayAttributeDescription_CollectArtifactOptions_Egress {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectArtifactOptions_Egress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of dump to collect from the target process..
        /// </summary>
        public static string DisplayAttributeDescription_CollectDumpOptions_Type {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectDumpOptions_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The format used to display the exceptions..
        /// </summary>
        public static string DisplayAttributeDescription_CollectExceptionsOptions_Format {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectExceptionsOptions_Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the default Egress Provider..
        /// </summary>
        public static string DisplayAttributeDescription_CollectionRuleActionDefaultsOptions_Egress {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectionRuleActionDefaultsOptions_Egress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name used to refer to the action..
        /// </summary>
        public static string DisplayAttributeDescription_CollectionRuleActionOptions_Name {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectionRuleActionOptions_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The settings to pass to the action when it is executed. Settings may be optional if the action doesn&apos;t require settings or its settings are all optional..
        /// </summary>
        public static string DisplayAttributeDescription_CollectionRuleActionOptions_Settings {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectionRuleActionOptions_Settings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of action to execute..
        /// </summary>
        public static string DisplayAttributeDescription_CollectionRuleActionOptions_Type {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectionRuleActionOptions_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wait for the current action to complete before starting the next action..
        /// </summary>
        public static string DisplayAttributeDescription_CollectionRuleActionOptions_WaitForCompletion {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectionRuleActionOptions_WaitForCompletion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Collection Rule Defaults that can be applied to actions..
        /// </summary>
        public static string DisplayAttributeDescription_CollectionRuleDefaultsOptions_Actions {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectionRuleDefaultsOptions_Actions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Collection Rule Defaults that can be applied to limits..
        /// </summary>
        public static string DisplayAttributeDescription_CollectionRuleDefaultsOptions_Limits {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectionRuleDefaultsOptions_Limits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Collection Rule Defaults that can be applied to triggers..
        /// </summary>
        public static string DisplayAttributeDescription_CollectionRuleDefaultsOptions_Triggers {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectionRuleDefaultsOptions_Triggers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The default number of times the action list may be executed before being throttled..
        /// </summary>
        public static string DisplayAttributeDescription_CollectionRuleLimitsDefaultsOptions_ActionCount {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectionRuleLimitsDefaultsOptions_ActionCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The default sliding window of time to consider whether the action list should be throttled based on the number of times the action list was executed..
        /// </summary>
        public static string DisplayAttributeDescription_CollectionRuleLimitsDefaultsOptions_ActionCountSlidingWindowDuration {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectionRuleLimitsDefaultsOptions_ActionCountSlidin" +
                        "gWindowDuration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The default amount of time before the rule will stop monitoring a process after it has been applied to a process..
        /// </summary>
        public static string DisplayAttributeDescription_CollectionRuleLimitsDefaultsOptions_RuleDuration {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectionRuleLimitsDefaultsOptions_RuleDuration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of times the action list may be executed before being throttled..
        /// </summary>
        public static string DisplayAttributeDescription_CollectionRuleLimitsOptions_ActionCount {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectionRuleLimitsOptions_ActionCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sliding window of time to consider whether the action list should be throttled based on the number of times the action list was executed. Executions that fall outside the window will not count toward the limit specified in the ActionCount setting..
        /// </summary>
        public static string DisplayAttributeDescription_CollectionRuleLimitsOptions_ActionCountSlidingWindowDuration {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectionRuleLimitsOptions_ActionCountSlidingWindowD" +
                        "uration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The amount of time before the rule will stop monitoring a process after it has been applied to a process. If not specified, the rule will monitor the process with the trigger indefinitely..
        /// </summary>
        public static string DisplayAttributeDescription_CollectionRuleLimitsOptions_RuleDuration {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectionRuleLimitsOptions_RuleDuration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The list of actions to be executed when the trigger raises its notification..
        /// </summary>
        public static string DisplayAttributeDescription_CollectionRuleOptions_Actions {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectionRuleOptions_Actions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Process filters used to determine to which process(es) the collection rule is applied. All filters must match. If no filters are specified, the rule is applied to all discovered processes..
        /// </summary>
        public static string DisplayAttributeDescription_CollectionRuleOptions_Filters {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectionRuleOptions_Filters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The set of limits to constrain the execution of the rule and its components..
        /// </summary>
        public static string DisplayAttributeDescription_CollectionRuleOptions_Limits {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectionRuleOptions_Limits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The trigger to use to monitor for a condition in the target process..
        /// </summary>
        public static string DisplayAttributeDescription_CollectionRuleOptions_Trigger {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectionRuleOptions_Trigger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The default threshold of the number of requests that start within the sliding window of time..
        /// </summary>
        public static string DisplayAttributeDescription_CollectionRuleTriggerDefaultsOptions_RequestCount {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectionRuleTriggerDefaultsOptions_RequestCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The default threshold number of responses with matching status codes..
        /// </summary>
        public static string DisplayAttributeDescription_CollectionRuleTriggerDefaultsOptions_ResponseCount {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectionRuleTriggerDefaultsOptions_ResponseCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The default sliding window duration..
        /// </summary>
        public static string DisplayAttributeDescription_CollectionRuleTriggerDefaultsOptions_SlidingWindowDuration {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectionRuleTriggerDefaultsOptions_SlidingWindowDur" +
                        "ation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The settings to pass to the trigger when it is executed. Settings may be optional if the trigger doesn&apos;t require settings or its settings are all optional..
        /// </summary>
        public static string DisplayAttributeDescription_CollectionRuleTriggerOptions_Settings {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectionRuleTriggerOptions_Settings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of trigger used to monitor for a condition in the target process..
        /// </summary>
        public static string DisplayAttributeDescription_CollectionRuleTriggerOptions_Type {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectionRuleTriggerOptions_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines if the default counter providers should be used..
        /// </summary>
        public static string DisplayAttributeDescription_CollectLiveMetricsOptions_IncludeDefaultProviders {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectLiveMetricsOptions_IncludeDefaultProviders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The array of meters for metrics to collect..
        /// </summary>
        public static string DisplayAttributeDescription_CollectLiveMetricsOptions_Meters {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectLiveMetricsOptions_Meters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The array of providers for metrics to collect..
        /// </summary>
        public static string DisplayAttributeDescription_CollectLiveMetricsOptions_Providers {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectLiveMetricsOptions_Providers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The default log level at which logs are collected for entries in the FilterSpecs that do not have a specified LogLevel value..
        /// </summary>
        public static string DisplayAttributeDescription_CollectLogsOptions_DefaultLevel {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectLogsOptions_DefaultLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A custom mapping of logger categories to log levels that describes at what level a log statement that matches one of the given categories should be captured..
        /// </summary>
        public static string DisplayAttributeDescription_CollectLogsOptions_FilterSpecs {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectLogsOptions_FilterSpecs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The format of the logs artifact..
        /// </summary>
        public static string DisplayAttributeDescription_CollectLogsOptions_Format {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectLogsOptions_Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies whether to capture log statements at the levels as specified in the application-defined filters..
        /// </summary>
        public static string DisplayAttributeDescription_CollectLogsOptions_UseAppFilters {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectLogsOptions_UseAppFilters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The format used to display the call stacks..
        /// </summary>
        public static string DisplayAttributeDescription_CollectStacksOptions_Format {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectStacksOptions_Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size of the event pipe buffer to use in the target process. If the event pipe buffer fills with too many events, newer events will be dropped until the buffer is drained to fit new events..
        /// </summary>
        public static string DisplayAttributeDescription_CollectTraceOptions_BufferSizeMegabytes {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectTraceOptions_BufferSizeMegabytes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use a predefined set of event providers and settings to capture in the trace. More than one profile may be specified at the same time. Either Profile or Providers must be specified, but not both..
        /// </summary>
        public static string DisplayAttributeDescription_CollectTraceOptions_Profile {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectTraceOptions_Profile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A list of event providers and settings to capture in the trace.  Either Profile or Providers must be specified, but not both..
        /// </summary>
        public static string DisplayAttributeDescription_CollectTraceOptions_Providers {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectTraceOptions_Providers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indicates that rundown information should be included in the trace..
        /// </summary>
        public static string DisplayAttributeDescription_CollectTraceOptions_RequestRundown {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectTraceOptions_RequestRundown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The event to watch for while collecting the trace, and once observed the trace will be stopped..
        /// </summary>
        public static string DisplayAttributeDescription_CollectTraceOptions_StoppingEvent {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CollectTraceOptions_StoppingEvent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Buffer size used when copying data from an egress callback returning a stream to the egress callback that is provided a stream to which data is written..
        /// </summary>
        public static string DisplayAttributeDescription_CommonEgressProviderOptions_CopyBufferSize {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CommonEgressProviderOptions_CopyBufferSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Gets or sets whether scopes should be included or not..
        /// </summary>
        public static string DisplayAttributeDescription_ConsoleFormatterOptions_IncludeScopes {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ConsoleFormatterOptions_IncludeScopes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Gets or sets the format string used to format the timestamp in logging messages. Defaults to null..
        /// </summary>
        public static string DisplayAttributeDescription_ConsoleFormatterOptions_TimestampFormat {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ConsoleFormatterOptions_TimestampFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Gets or sets whether or not UTC timezone should be used for timestamps in logging messages. Defaults to false..
        /// </summary>
        public static string DisplayAttributeDescription_ConsoleFormatterOptions_UseUtcTimestamp {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ConsoleFormatterOptions_UseUtcTimestamp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reserved name for Json console formatter..
        /// </summary>
        public static string DisplayAttributeDescription_ConsoleLoggerFormat_Json {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ConsoleLoggerFormat_Json", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reserved name for simple console formatter..
        /// </summary>
        public static string DisplayAttributeDescription_ConsoleLoggerFormat_Simple {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ConsoleLoggerFormat_Simple", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reserved name for systemd console formatter..
        /// </summary>
        public static string DisplayAttributeDescription_ConsoleLoggerFormat_Systemd {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ConsoleLoggerFormat_Systemd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name of the log message formatter to use. Defaults to &apos;Simple&apos;..
        /// </summary>
        public static string DisplayAttributeDescription_ConsoleLoggerOptions_FormatterName {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ConsoleLoggerOptions_FormatterName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Formatter options for the built-in console log formatter..
        /// </summary>
        public static string DisplayAttributeDescription_ConsoleLoggerOptions_FormatterOptions {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ConsoleLoggerOptions_FormatterOptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A mapping of logger categories to log levels describing the threshold level at which messages are logged for each category; applies solely to ConsoleLoggerOptions..
        /// </summary>
        public static string DisplayAttributeDescription_ConsoleLoggerOptions_LogLevel {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ConsoleLoggerOptions_LogLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The minimum level of messages that are written to Console.Error..
        /// </summary>
        public static string DisplayAttributeDescription_ConsoleLoggerOptions_LogToStandardErrorThreshold {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ConsoleLoggerOptions_LogToStandardErrorThreshold", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List of allowed CORS origins, separated by semicolons..
        /// </summary>
        public static string DisplayAttributeDescription_CorsConfiguration_AllowedOrigins {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CorsConfiguration_AllowedOrigins", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The threshold level as a percentage that the counter must maintain (or higher) for the specified duration..
        /// </summary>
        public static string DisplayAttributeDescription_CPUUsageOptions_GreaterThan {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CPUUsageOptions_GreaterThan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The threshold level as a percentage that the counter must maintain (or lower) for the specified duration. If LessThan is specified, the default value of GreaterThan becomes null..
        /// </summary>
        public static string DisplayAttributeDescription_CPUUsageOptions_LessThan {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_CPUUsageOptions_LessThan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In &apos;Connect&apos; mode, dotnet-monitor connects to the application for diagnostics. In &apos;Listen&apos; mode, the application connects to dotnet-monitor via EndpointName..
        /// </summary>
        public static string DisplayAttributeDescription_DiagnosticPortOptions_ConnectionMode {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_DiagnosticPortOptions_ConnectionMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In &apos;Listen&apos; connection mode, deletes the domain socket file used for diagnostic port communication..
        /// </summary>
        public static string DisplayAttributeDescription_DiagnosticPortOptions_DeleteEndpointOnStartup {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_DiagnosticPortOptions_DeleteEndpointOnStartup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In &apos;Listen&apos; mode, specifies the name of the named pipe or unix domain socket to use for connecting to the diagnostic server..
        /// </summary>
        public static string DisplayAttributeDescription_DiagnosticPortOptions_EndpointName {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_DiagnosticPortOptions_EndpointName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In &apos;Listen&apos; mode, the maximum amount of connections to accept..
        /// </summary>
        public static string DisplayAttributeDescription_DiagnosticPortOptions_MaxConnections {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_DiagnosticPortOptions_MaxConnections", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mapping of file system egress provider names to their options..
        /// </summary>
        public static string DisplayAttributeDescription_EgressOptions_FileSystem {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_EgressOptions_FileSystem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Additional properties, such as secrets, that can be referenced by the provider definitions..
        /// </summary>
        public static string DisplayAttributeDescription_EgressOptions_Properties {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_EgressOptions_Properties", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the counter to monitor..
        /// </summary>
        public static string DisplayAttributeDescription_EventCounterOptions_CounterName {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_EventCounterOptions_CounterName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The threshold level the counter must maintain (or higher) for the specified duration. Either GreaterThan or LessThan (or both) must be specified..
        /// </summary>
        public static string DisplayAttributeDescription_EventCounterOptions_GreaterThan {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_EventCounterOptions_GreaterThan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The threshold level the counter must maintain (or lower) for the specified duration. Either GreaterThan or LessThan (or both) must be specified..
        /// </summary>
        public static string DisplayAttributeDescription_EventCounterOptions_LessThan {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_EventCounterOptions_LessThan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the event source that provides the counter information..
        /// </summary>
        public static string DisplayAttributeDescription_EventCounterOptions_ProviderName {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_EventCounterOptions_ProviderName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sliding time window in which the counter must maintain its value as specified by the threshold levels in GreaterThan and LessThan..
        /// </summary>
        public static string DisplayAttributeDescription_EventCounterOptions_SlidingWindowDuration {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_EventCounterOptions_SlidingWindowDuration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The threshold level the instrument must maintain (or higher) for the specified duration. Either GreaterThan or LessThan (or both) must be specified..
        /// </summary>
        public static string DisplayAttributeDescription_EventMeterOptions_GreaterThan {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_EventMeterOptions_GreaterThan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When monitoring a histogram, this dictates which percentile to compare against using the value in GreaterThan/LessThan - by default, the percentile can be 50, 95, or 99..
        /// </summary>
        public static string DisplayAttributeDescription_EventMeterOptions_HistogramPercentile {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_EventMeterOptions_HistogramPercentile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the instrument to monitor..
        /// </summary>
        public static string DisplayAttributeDescription_EventMeterOptions_InstrumentName {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_EventMeterOptions_InstrumentName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The threshold level the instrument must maintain (or lower) for the specified duration. Either GreaterThan or LessThan (or both) must be specified..
        /// </summary>
        public static string DisplayAttributeDescription_EventMeterOptions_LessThan {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_EventMeterOptions_LessThan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the meter that provides the instrument information..
        /// </summary>
        public static string DisplayAttributeDescription_EventMeterOptions_MeterName {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_EventMeterOptions_MeterName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The sliding time window in which the instrument must maintain its value as specified by the threshold levels in GreaterThan and LessThan..
        /// </summary>
        public static string DisplayAttributeDescription_EventMeterOptions_SlidingWindowDuration {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_EventMeterOptions_SlidingWindowDuration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enables or disables the exceptions feature. By default, this feature is enabled if in-process features are enabled..
        /// </summary>
        public static string DisplayAttributeDescription_ExceptionsOptions_Enabled {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ExceptionsOptions_Enabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of top-level exceptions to keep in the cache before automatically removing older exceptions. A top-level exception is one that is not an inner exception of another exception..
        /// </summary>
        public static string DisplayAttributeDescription_ExceptionsOptions_TopLevelLimit {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ExceptionsOptions_TopLevelLimit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The arguments to pass to the executable..
        /// </summary>
        public static string DisplayAttributeDescription_ExecuteOptions_Arguments {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ExecuteOptions_Arguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path of the executable to start..
        /// </summary>
        public static string DisplayAttributeDescription_ExecuteOptions_Path {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ExecuteOptions_Path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The directory path to which the stream data will be egressed..
        /// </summary>
        public static string DisplayAttributeDescription_FileSystemEgressProviderOptions_DirectoryPath {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_FileSystemEgressProviderOptions_DirectoryPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The directory path to which the stream data will initially be written, if specified; the file will then be moved/renamed to the directory specified in DirectoryPath..
        /// </summary>
        public static string DisplayAttributeDescription_FileSystemEgressProviderOptions_IntermediateDirectoryPath {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_FileSystemEgressProviderOptions_IntermediateDirectory" +
                        "Path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The threshold level in MBs that the counter must maintain (or higher) for the specified duration..
        /// </summary>
        public static string DisplayAttributeDescription_GCHeapSizeOptions_GreaterThan {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_GCHeapSizeOptions_GreaterThan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The threshold level in MBs that the counter must maintain (or lower) for the specified duration. If LessThan is specified, the default value of GreaterThan becomes null..
        /// </summary>
        public static string DisplayAttributeDescription_GCHeapSizeOptions_LessThan {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_GCHeapSizeOptions_LessThan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the environment variable to get..
        /// </summary>
        public static string DisplayAttributeDescription_GetEnvironmentVariableOptions_Name {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_GetEnvironmentVariableOptions_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines the metrics interval for all dotnet-monitor scenarios. This includes prometheus metrics, live metrics, triggers, and traces..
        /// </summary>
        public static string DisplayAttributeDescription_GlobalCounterOptions_IntervalSeconds {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_GlobalCounterOptions_IntervalSeconds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dictionary of provider names and their global configuration..
        /// </summary>
        public static string DisplayAttributeDescription_GlobalCounterOptions_Providers {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_GlobalCounterOptions_Providers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Options for the in-process call stacks feature..
        /// </summary>
        public static string DisplayAttributeDescription_InProcessFeaturesOptions_CallStacks {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_InProcessFeaturesOptions_CallStacks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allows features that require diagnostic components to be loaded into target processes to be enabled. These features may have minimal performance impact on target processes..
        /// </summary>
        public static string DisplayAttributeDescription_InProcessFeaturesOptions_Enabled {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_InProcessFeaturesOptions_Enabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Options for the in-process exceptions feature..
        /// </summary>
        public static string DisplayAttributeDescription_InProcessFeaturesOptions_Exceptions {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_InProcessFeaturesOptions_Exceptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Options for the in-process parameter capturing feature..
        /// </summary>
        public static string DisplayAttributeDescription_InProcessFeaturesOptions_ParameterCapturing {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_InProcessFeaturesOptions_ParameterCapturing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Gets or sets JsonWriterOptions..
        /// </summary>
        public static string DisplayAttributeDescription_JsonConsoleFormatterOptions_WriterOptions {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_JsonConsoleFormatterOptions_WriterOptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The class identifier (or CLSID, typically a GUID) of the ICorProfilerCallback implementation. This is typically the same value that would be set as the CORECLR_PROFILER environment variable..
        /// </summary>
        public static string DisplayAttributeDescription_LoadProfilerOptions_Clsid {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_LoadProfilerOptions_Clsid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path of the profiler library to be loaded. This is typically the same value that would be set as the CORECLR_PROFILER_PATH environment variable..
        /// </summary>
        public static string DisplayAttributeDescription_LoadProfilerOptions_Path {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_LoadProfilerOptions_Path", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Gets or sets whether logging scopes are being captured. Defaults to true..
        /// </summary>
        public static string DisplayAttributeDescription_LoggingOptions_CaptureScopes {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_LoggingOptions_CaptureScopes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logging options for the Console provider..
        /// </summary>
        public static string DisplayAttributeDescription_LoggingOptions_Console {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_LoggingOptions_Console", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logging options for the Debug provider..
        /// </summary>
        public static string DisplayAttributeDescription_LoggingOptions_Debug {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_LoggingOptions_Debug", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logging options for the EventLog provider..
        /// </summary>
        public static string DisplayAttributeDescription_LoggingOptions_EventLog {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_LoggingOptions_EventLog", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logging options for the EventSource provider..
        /// </summary>
        public static string DisplayAttributeDescription_LoggingOptions_EventSource {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_LoggingOptions_EventSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A mapping of logger categories to log levels describing the threshold level at which messages are logged for each category; applies to no specific provider..
        /// </summary>
        public static string DisplayAttributeDescription_LoggingOptions_LogLevel {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_LoggingOptions_LogLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A mapping of logger categories to log levels describing the threshold level at which messages are logged for each category; applies to the specified provider..
        /// </summary>
        public static string DisplayAttributeDescription_LogLevelOptions_LogLevel {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_LogLevelOptions_LogLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names of the custom instruments..
        /// </summary>
        public static string DisplayAttributeDescription_MeterConfiguration_InstrumentNames {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_MeterConfiguration_InstrumentNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name of the custom meter..
        /// </summary>
        public static string DisplayAttributeDescription_MeterConfiguration_MeterName {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_MeterConfiguration_MeterName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name of custom metrics counters..
        /// </summary>
        public static string DisplayAttributeDescription_MetricProvider_CounterNames {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_MetricProvider_CounterNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the custom metrics provider..
        /// </summary>
        public static string DisplayAttributeDescription_MetricProvider_ProviderName {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_MetricProvider_ProviderName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable or disable metrics collection..
        /// </summary>
        public static string DisplayAttributeDescription_MetricsOptions_Enabled {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_MetricsOptions_Enabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Endpoints that expose prometheus metrics. Defaults to http://localhost:52325..
        /// </summary>
        public static string DisplayAttributeDescription_MetricsOptions_Endpoints {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_MetricsOptions_Endpoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Include default providers: System.Runtime, Microsoft.AspNetCore.Hosting, and Grpc.AspNetCore.Server..
        /// </summary>
        public static string DisplayAttributeDescription_MetricsOptions_IncludeDefaultProviders {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_MetricsOptions_IncludeDefaultProviders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum number of histograms that can be tracked. Each unique combination of provider name, histogram name, and dimension values counts as one histogram. Tracking more histograms uses more memory in the target process so this bound guards against unintentional high memory use..
        /// </summary>
        public static string DisplayAttributeDescription_MetricsOptions_MaxHistograms {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_MetricsOptions_MaxHistograms", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The maximum number of time series that can be tracked. Each unique combination of provider name, metric name, and dimension values counts as one time series. Tracking more time series uses more memory in the target process so this bound guards against unintentional high memory use..
        /// </summary>
        public static string DisplayAttributeDescription_MetricsOptions_MaxTimeSeries {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_MetricsOptions_MaxTimeSeries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Names of meters to collect from the System.Diagnostics.Metrics provider..
        /// </summary>
        public static string DisplayAttributeDescription_MetricsOptions_Meters {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_MetricsOptions_Meters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Amount of data points to store per metric..
        /// </summary>
        public static string DisplayAttributeDescription_MetricsOptions_MetricCount {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_MetricsOptions_MetricCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Providers for custom metrics..
        /// </summary>
        public static string DisplayAttributeDescription_MetricsOptions_Providers {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_MetricsOptions_Providers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The public key used to sign the JWT (JSON Web Token) used for authentication. This field is a JSON Web Key serialized as JSON encoded with base64Url encoding. The JWK must have a kty field of RSA or EC and should not have the private key information..
        /// </summary>
        public static string DisplayAttributeDescription_MonitorApiKeyOptions_PublicKey {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_MonitorApiKeyOptions_PublicKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of the &apos;sub&apos; or Subject field in the JWT (JSON Web Token)..
        /// </summary>
        public static string DisplayAttributeDescription_MonitorApiKeyOptions_Subject {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_MonitorApiKeyOptions_Subject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enables or disables the parameter capturing feature. By default, this feature is not enabled..
        /// </summary>
        public static string DisplayAttributeDescription_ParameterCapturingOptions_Enabled {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ParameterCapturingOptions_Enabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Performs a match based on the contents of the command passed to launch the process on the system; this typically includes the executable path and arguments to the process..
        /// </summary>
        public static string DisplayAttributeDescription_ProcessFilterDescriptor_CommandLine {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ProcessFilterDescriptor_CommandLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The criteria used to compare against the target process..
        /// </summary>
        public static string DisplayAttributeDescription_ProcessFilterDescriptor_Key {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ProcessFilterDescriptor_Key", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type of match to use against the process criteria..
        /// </summary>
        public static string DisplayAttributeDescription_ProcessFilterDescriptor_MatchType {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ProcessFilterDescriptor_MatchType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Performs a match based on the numerical ID of a process on the system..
        /// </summary>
        public static string DisplayAttributeDescription_ProcessFilterDescriptor_ProcessId {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ProcessFilterDescriptor_ProcessId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Performs a match based on the name of a process on the system..
        /// </summary>
        public static string DisplayAttributeDescription_ProcessFilterDescriptor_ProcessName {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ProcessFilterDescriptor_ProcessName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of the criteria used to compare against the target process..
        /// </summary>
        public static string DisplayAttributeDescription_ProcessFilterDescriptor_Value {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ProcessFilterDescriptor_Value", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Performs a match based on the contents of the command passed to launch the process on the system; this typically includes the executable path and arguments to the process..
        /// </summary>
        public static string DisplayAttributeDescription_ProcessFilterKey_CommandLine {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ProcessFilterKey_CommandLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Performs a match based on the numerical ID of a process on the system..
        /// </summary>
        public static string DisplayAttributeDescription_ProcessFilterKey_ProcessId {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ProcessFilterKey_ProcessId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Performs a match based on the name of a process on the system..
        /// </summary>
        public static string DisplayAttributeDescription_ProcessFilterKey_ProcessName {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ProcessFilterKey_ProcessName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Process filters used to determine which process to use if one is not explicitly specified. All filters must match..
        /// </summary>
        public static string DisplayAttributeDescription_ProcessFilterOptions_Filters {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ProcessFilterOptions_Filters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Performs a case-insensitive substring search..
        /// </summary>
        public static string DisplayAttributeDescription_ProcessFilterType_Contains {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ProcessFilterType_Contains", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Performs a case-insensitive string comparison..
        /// </summary>
        public static string DisplayAttributeDescription_ProcessFilterType_Exact {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ProcessFilterType_Exact", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the environment variable to set..
        /// </summary>
        public static string DisplayAttributeDescription_SetEnvironmentVariableOptions_Name {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_SetEnvironmentVariableOptions_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value of the environment variable to set..
        /// </summary>
        public static string DisplayAttributeDescription_SetEnvironmentVariableOptions_Value {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_SetEnvironmentVariableOptions_Value", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines when to use color when logging messages..
        /// </summary>
        public static string DisplayAttributeDescription_SimpleConsoleFormatterOptions_ColorBehavior {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_SimpleConsoleFormatterOptions_ColorBehavior", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When false, the entire message gets logged in a single line..
        /// </summary>
        public static string DisplayAttributeDescription_SimpleConsoleFormatterOptions_SingleLine {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_SimpleConsoleFormatterOptions_SingleLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The default path where assets will be shared between dotnet-monitor and target processes. Dumps are temporarily stored under this path or in a sub folder unless DumpTempFolder is specified. Shared libraries are stored under this path or in a sub folder unless SharedLibraryPath is specified. On non-Windows platforms, a server diagnostic port is created with the name of &apos;dotnet-monitor.sock&apos; immediately under this path if running in listen mode unless the diagnostic port is specified on the command line or th [rest of string was truncated]&quot;;.
        /// </summary>
        public static string DisplayAttributeDescription_StorageOptions_DefaultSharedPath {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_StorageOptions_DefaultSharedPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The location for temporary dump files. Defaults to the temp folder..
        /// </summary>
        public static string DisplayAttributeDescription_StorageOptions_DumpTempFolder {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_StorageOptions_DumpTempFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The location to which libraries shared with target processes will be copied at startup..
        /// </summary>
        public static string DisplayAttributeDescription_StorageOptions_SharedLibraryPath {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_StorageOptions_SharedLibraryPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The threshold level the counter must maintain (or higher) for the specified duration..
        /// </summary>
        public static string DisplayAttributeDescription_ThreadpoolQueueLengthOptions_GreaterThan {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ThreadpoolQueueLengthOptions_GreaterThan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The threshold level the counter must maintain (or lower) for the specified duration. If LessThan is specified, the default value of GreaterThan becomes null..
        /// </summary>
        public static string DisplayAttributeDescription_ThreadpoolQueueLengthOptions_LessThan {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_ThreadpoolQueueLengthOptions_LessThan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name of the event, which is a concatenation of the task name and opcode name, if any. The task and opcode names are separated by a &apos;/&apos;. If the event has no opcode, then the event name is just the task name..
        /// </summary>
        public static string DisplayAttributeDescription_TraceEventFilter_EventName {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_TraceEventFilter_EventName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A mapping of event payload field names to their expected value. A subset of the payload fields may be specified..
        /// </summary>
        public static string DisplayAttributeDescription_TraceEventFilter_PayloadFilter {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_TraceEventFilter_PayloadFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The event provider that will produce the specified event..
        /// </summary>
        public static string DisplayAttributeDescription_TraceEventFilter_ProviderName {
            get {
                return ResourceManager.GetString("DisplayAttributeDescription_TraceEventFilter_ProviderName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} field, {1} field, {2} field, or {3} field is required..
        /// </summary>
        public static string ErrorMessage_CredentialsMissing {
            get {
                return ResourceManager.GetString("ErrorMessage_CredentialsMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A value is required for the process filter..
        /// </summary>
        public static string ErrorMessage_FilterValueMissing {
            get {
                return ResourceManager.GetString("ErrorMessage_FilterValueMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple authentication modes were configured. Only one may be set..
        /// </summary>
        public static string ErrorMessage_MultipleAuthenticationModesSpecified {
            get {
                return ResourceManager.GetString("ErrorMessage_MultipleAuthenticationModesSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provider &apos;{0}&apos; validation error: &apos;{1}&apos;.
        /// </summary>
        public static string ErrorMessage_NestedProviderValidationError {
            get {
                return ResourceManager.GetString("ErrorMessage_NestedProviderValidationError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An egress provider must be specified if there is no default egress provider..
        /// </summary>
        public static string ErrorMessage_NoDefaultEgressProvider {
            get {
                return ResourceManager.GetString("ErrorMessage_NoDefaultEgressProvider", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A request count must be specified if there is no default request count..
        /// </summary>
        public static string ErrorMessage_NoDefaultRequestCount {
            get {
                return ResourceManager.GetString("ErrorMessage_NoDefaultRequestCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A response count must be specified if there is no default response count..
        /// </summary>
        public static string ErrorMessage_NoDefaultResponseCount {
            get {
                return ResourceManager.GetString("ErrorMessage_NoDefaultResponseCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The field {0} must be a status code or status code range between 1xx and 5xx. E.g. 200, 400-500..
        /// </summary>
        public static string ErrorMessage_StatusCodesRegularExpressionDoesNotMatch {
            get {
                return ResourceManager.GetString("ErrorMessage_StatusCodesRegularExpressionDoesNotMatch", resourceCulture);
            }
        }
    }
}
