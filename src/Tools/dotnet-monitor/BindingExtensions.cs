// <auto-generated/>

#nullable enable annotations
#nullable disable warnings

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0612, CS0618

namespace Microsoft.Extensions.Configuration.Binder.SourceGeneration
{
    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.Extensions.Options;
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Linq;
    using System.Runtime.CompilerServices;

    [GeneratedCode("Microsoft.Extensions.Configuration.Binder.SourceGeneration", "10.0.12.20601")]
    // file static class BindingExtensions
    // Made internal to allow access from outside this file
    internal static class BindingExtensions
    {
        #region IConfiguration extensions.
        /// <summary>Attempts to bind the configuration instance to a new instance of type T.</summary>
        public static T? Get<T>(this IConfiguration configuration) => (T?)(GetCore(configuration, typeof(T), configureOptions: null) ?? default(T));

        /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
        public static void Bind_AuthenticationOptions(this IConfiguration configuration, object? instance)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            if (instance is null)
            {
                return;
            }

            var typedObj = (global::Microsoft.Diagnostics.Tools.Monitor.AuthenticationOptions)instance;
            BindCore(configuration, ref typedObj, defaultValueIfNotFound: false, binderOptions: null);
        }

        /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
        public static void Bind_CollectDumpOptions(this IConfiguration configuration, object? instance)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            if (instance is null)
            {
                return;
            }

            var typedObj = (global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectDumpOptions)instance;
            BindCore(configuration, ref typedObj, defaultValueIfNotFound: false, binderOptions: null);
        }

        /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
        public static void Bind_CollectExceptionsOptions(this IConfiguration configuration, object? instance)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            if (instance is null)
            {
                return;
            }

            var typedObj = (global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectExceptionsOptions)instance;
            BindCore(configuration, ref typedObj, defaultValueIfNotFound: false, binderOptions: null);
        }

        /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
        public static void Bind_CollectGCDumpOptions(this IConfiguration configuration, object? instance)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            if (instance is null)
            {
                return;
            }

            var typedObj = (global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectGCDumpOptions)instance;
            BindCore(configuration, ref typedObj, defaultValueIfNotFound: false, binderOptions: null);
        }

        /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
        public static void Bind_CollectLiveMetricsOptions(this IConfiguration configuration, object? instance)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            if (instance is null)
            {
                return;
            }

            var typedObj = (global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectLiveMetricsOptions)instance;
            BindCore(configuration, ref typedObj, defaultValueIfNotFound: false, binderOptions: null);
        }

        /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
        public static void Bind_CollectLogsOptions(this IConfiguration configuration, object? instance)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            if (instance is null)
            {
                return;
            }

            var typedObj = (global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectLogsOptions)instance;
            BindCore(configuration, ref typedObj, defaultValueIfNotFound: false, binderOptions: null);
        }

        /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
        public static void Bind_CollectStacksOptions(this IConfiguration configuration, object? instance)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            if (instance is null)
            {
                return;
            }

            var typedObj = (global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectStacksOptions)instance;
            BindCore(configuration, ref typedObj, defaultValueIfNotFound: false, binderOptions: null);
        }

        /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
        public static void Bind_CollectTraceOptions(this IConfiguration configuration, object? instance)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            if (instance is null)
            {
                return;
            }

            var typedObj = (global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectTraceOptions)instance;
            BindCore(configuration, ref typedObj, defaultValueIfNotFound: false, binderOptions: null);
        }

        /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
        public static void Bind_ExecuteOptions(this IConfiguration configuration, object? instance)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            if (instance is null)
            {
                return;
            }

            var typedObj = (global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.ExecuteOptions)instance;
            BindCore(configuration, ref typedObj, defaultValueIfNotFound: false, binderOptions: null);
        }

        /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
        public static void Bind_GetEnvironmentVariableOptions(this IConfiguration configuration, object? instance)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            if (instance is null)
            {
                return;
            }

            var typedObj = (global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.GetEnvironmentVariableOptions)instance;
            BindCore(configuration, ref typedObj, defaultValueIfNotFound: false, binderOptions: null);
        }

        /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
        public static void Bind_LoadProfilerOptions(this IConfiguration configuration, object? instance)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            if (instance is null)
            {
                return;
            }

            var typedObj = (global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.LoadProfilerOptions)instance;
            BindCore(configuration, ref typedObj, defaultValueIfNotFound: false, binderOptions: null);
        }

        /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
        public static void Bind_SetEnvironmentVariableOptions(this IConfiguration configuration, object? instance)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            if (instance is null)
            {
                return;
            }

            var typedObj = (global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.SetEnvironmentVariableOptions)instance;
            BindCore(configuration, ref typedObj, defaultValueIfNotFound: false, binderOptions: null);
        }

        /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
        public static void Bind_CollectionRuleOptions(this IConfiguration configuration, object? instance)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            if (instance is null)
            {
                return;
            }

            var typedObj = (global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleOptions)instance;
            BindCore(configuration, ref typedObj, defaultValueIfNotFound: false, binderOptions: null);
        }

        /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
        public static void Bind_CollectionRuleActionOptions(this IConfiguration configuration, object? instance)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            if (instance is null)
            {
                return;
            }

            var typedObj = (global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleActionOptions)instance;
            BindCore(configuration, ref typedObj, defaultValueIfNotFound: false, binderOptions: null);
        }

        /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
        public static void Bind_ProcessFilterDescriptor(this IConfiguration configuration, object? instance)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            if (instance is null)
            {
                return;
            }

            var typedObj = (global::Microsoft.Diagnostics.Monitoring.WebApi.ProcessFilterDescriptor)instance;
            BindCore(configuration, ref typedObj, defaultValueIfNotFound: false, binderOptions: null);
        }

        /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
        public static void Bind_AspNetRequestCountOptions(this IConfiguration configuration, object? instance)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            if (instance is null)
            {
                return;
            }

            var typedObj = (global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.AspNetRequestCountOptions)instance;
            BindCore(configuration, ref typedObj, defaultValueIfNotFound: false, binderOptions: null);
        }

        /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
        public static void Bind_AspNetRequestDurationOptions(this IConfiguration configuration, object? instance)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            if (instance is null)
            {
                return;
            }

            var typedObj = (global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.AspNetRequestDurationOptions)instance;
            BindCore(configuration, ref typedObj, defaultValueIfNotFound: false, binderOptions: null);
        }

        /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
        public static void Bind_AspNetResponseStatusOptions(this IConfiguration configuration, object? instance)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            if (instance is null)
            {
                return;
            }

            var typedObj = (global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.AspNetResponseStatusOptions)instance;
            BindCore(configuration, ref typedObj, defaultValueIfNotFound: false, binderOptions: null);
        }

        /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
        public static void Bind_EventCounterOptions(this IConfiguration configuration, object? instance)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            if (instance is null)
            {
                return;
            }

            var typedObj = (global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.EventCounterOptions)instance;
            BindCore(configuration, ref typedObj, defaultValueIfNotFound: false, binderOptions: null);
        }

        /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
        public static void Bind_CPUUsageOptions(this IConfiguration configuration, object? instance)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            if (instance is null)
            {
                return;
            }

            var typedObj = (global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.EventCounterShortcuts.CPUUsageOptions)instance;
            BindCore(configuration, ref typedObj, defaultValueIfNotFound: false, binderOptions: null);
        }

        /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
        public static void Bind_GCHeapSizeOptions(this IConfiguration configuration, object? instance)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            if (instance is null)
            {
                return;
            }

            var typedObj = (global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.EventCounterShortcuts.GCHeapSizeOptions)instance;
            BindCore(configuration, ref typedObj, defaultValueIfNotFound: false, binderOptions: null);
        }

        /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
        public static void Bind_ThreadpoolQueueLengthOptions(this IConfiguration configuration, object? instance)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            if (instance is null)
            {
                return;
            }

            var typedObj = (global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.EventCounterShortcuts.ThreadpoolQueueLengthOptions)instance;
            BindCore(configuration, ref typedObj, defaultValueIfNotFound: false, binderOptions: null);
        }

        /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
        public static void Bind_EventMeterOptions(this IConfiguration configuration, object? instance)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            if (instance is null)
            {
                return;
            }

            var typedObj = (global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.EventMeterOptions)instance;
            BindCore(configuration, ref typedObj, defaultValueIfNotFound: false, binderOptions: null);
        }

        /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
        public static void Bind_FileSystemEgressProviderOptions(this IConfiguration configuration, object? instance)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            if (instance is null)
            {
                return;
            }

            var typedObj = (global::Microsoft.Diagnostics.Tools.Monitor.Egress.FileSystem.FileSystemEgressProviderOptions)instance;
            BindCore(configuration, ref typedObj, defaultValueIfNotFound: false, binderOptions: null);
        }

        /// <summary>Attempts to bind the given object instance to configuration values by matching property names against configuration keys recursively.</summary>
        public static void Bind_MetricsOptions(this IConfiguration configuration, string key, object? instance)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            if (instance is null)
            {
                return;
            }

            var typedObj = (global::Microsoft.Diagnostics.Monitoring.WebApi.MetricsOptions)instance;
            BindCore(configuration.GetSection(key), ref typedObj, defaultValueIfNotFound: false, binderOptions: null);
        }
        #endregion IConfiguration extensions.

        #region IServiceCollection extensions.
        /// <summary>Registers a configuration instance which TOptions will bind against.</summary>
        public static IServiceCollection Configure<TOptions>(this IServiceCollection services, IConfiguration config) where TOptions : class
        {
            return Configure<TOptions>(services, string.Empty, config, configureOptions: null);
        }

        /// <summary>Registers a configuration instance which TOptions will bind against.</summary>
        public static IServiceCollection Configure<TOptions>(this IServiceCollection services, string? name, IConfiguration config, Action<BinderOptions>? configureOptions) where TOptions : class
        {
            ArgumentNullException.ThrowIfNull(services);

            ArgumentNullException.ThrowIfNull(config);

            OptionsServiceCollectionExtensions.AddOptions(services);
            services.AddSingleton<IOptionsChangeTokenSource<TOptions>>(new ConfigurationChangeTokenSource<TOptions>(name, config));
            return services.AddSingleton<IConfigureOptions<TOptions>>(new ConfigureNamedOptions<TOptions>(name, instance => BindCoreMain(config, instance, typeof(TOptions), configureOptions)));
        }
        #endregion IServiceCollection extensions.

        #region Core binding extensions.
        private readonly static Lazy<HashSet<string>> s_configKeys_MonitorApiKeyOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Subject", "PublicKey", "Issuer" });
        private readonly static Lazy<HashSet<string>> s_configKeys_AzureAdOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Instance", "TenantId", "ClientId", "AppIdUri", "RequiredRole" });
        private readonly static Lazy<HashSet<string>> s_configKeys_AuthenticationOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "MonitorApiKey", "AzureAd" });
        private readonly static Lazy<HashSet<string>> s_configKeys_CollectDumpOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Type", "Egress", "ArtifactName" });
        private readonly static Lazy<HashSet<string>> s_configKeys_ExceptionFilter = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "ExceptionType", "ModuleName", "TypeName", "MethodName" });
        private readonly static Lazy<HashSet<string>> s_configKeys_ExceptionsConfiguration = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Include", "Exclude" });
        private readonly static Lazy<HashSet<string>> s_configKeys_CollectExceptionsOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Egress", "Format", "Filters", "ArtifactName" });
        private readonly static Lazy<HashSet<string>> s_configKeys_CollectGCDumpOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Egress", "ArtifactName" });
        private readonly static Lazy<HashSet<string>> s_configKeys_EventMetricsProvider = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "ProviderName", "CounterNames" });
        private readonly static Lazy<HashSet<string>> s_configKeys_EventMetricsMeter = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "MeterName", "InstrumentNames" });
        private readonly static Lazy<HashSet<string>> s_configKeys_CollectLiveMetricsOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "IncludeDefaultProviders", "Providers", "Meters", "Duration", "Egress", "ArtifactName" });
        private readonly static Lazy<HashSet<string>> s_configKeys_CollectLogsOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "DefaultLevel", "FilterSpecs", "UseAppFilters", "Duration", "Egress", "Format", "ArtifactName" });
        private readonly static Lazy<HashSet<string>> s_configKeys_CollectStacksOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Egress", "Format", "ArtifactName" });
        private readonly static Lazy<HashSet<string>> s_configKeys_EventPipeProvider = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Name", "Keywords", "EventLevel", "Arguments" });
        private readonly static Lazy<HashSet<string>> s_configKeys_TraceEventFilter = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "ProviderName", "EventName", "PayloadFilter" });
        private readonly static Lazy<HashSet<string>> s_configKeys_CollectTraceOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Profile", "Providers", "RequestRundown", "BufferSizeMegabytes", "Duration", "Egress", "StoppingEvent", "ArtifactName" });
        private readonly static Lazy<HashSet<string>> s_configKeys_ExecuteOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Path", "Arguments", "IgnoreExitCode" });
        private readonly static Lazy<HashSet<string>> s_configKeys_GetEnvironmentVariableOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Name" });
        private readonly static Lazy<HashSet<string>> s_configKeys_LoadProfilerOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Path", "Clsid" });
        private readonly static Lazy<HashSet<string>> s_configKeys_SetEnvironmentVariableOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Name", "Value" });
        private readonly static Lazy<HashSet<string>> s_configKeys_ProcessFilterDescriptor = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Key", "Value", "MatchType", "ProcessName", "ProcessId", "CommandLine", "ManagedEntryPointAssemblyName" });
        private readonly static Lazy<HashSet<string>> s_configKeys_CollectionRuleTriggerOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Type", "Settings" });
        private readonly static Lazy<HashSet<string>> s_configKeys_CollectionRuleActionOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Name", "Type", "Settings", "WaitForCompletion" });
        private readonly static Lazy<HashSet<string>> s_configKeys_CollectionRuleLimitsOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "ActionCount", "ActionCountSlidingWindowDuration", "RuleDuration" });
        private readonly static Lazy<HashSet<string>> s_configKeys_ErrorValidationResult = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Message", "MemberName" });
        private readonly static Lazy<HashSet<string>> s_configKeys_CollectionRuleOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Filters", "Trigger", "Actions", "Limits", "ErrorList" });
        private readonly static Lazy<HashSet<string>> s_configKeys_AspNetRequestCountOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "RequestCount", "SlidingWindowDuration", "IncludePaths", "ExcludePaths" });
        private readonly static Lazy<HashSet<string>> s_configKeys_AspNetRequestDurationOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "RequestCount", "RequestDuration", "SlidingWindowDuration", "IncludePaths", "ExcludePaths" });
        private readonly static Lazy<HashSet<string>> s_configKeys_AspNetResponseStatusOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "StatusCodes", "ResponseCount", "SlidingWindowDuration", "IncludePaths", "ExcludePaths" });
        private readonly static Lazy<HashSet<string>> s_configKeys_EventCounterOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "ProviderName", "CounterName", "GreaterThan", "LessThan", "SlidingWindowDuration" });
        private readonly static Lazy<HashSet<string>> s_configKeys_CPUUsageOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "GreaterThan", "LessThan", "SlidingWindowDuration" });
        private readonly static Lazy<HashSet<string>> s_configKeys_GCHeapSizeOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "GreaterThan", "LessThan", "SlidingWindowDuration" });
        private readonly static Lazy<HashSet<string>> s_configKeys_ThreadpoolQueueLengthOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "GreaterThan", "LessThan", "SlidingWindowDuration" });
        private readonly static Lazy<HashSet<string>> s_configKeys_EventMeterOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "MeterName", "InstrumentName", "GreaterThan", "LessThan", "SlidingWindowDuration", "HistogramPercentile" });
        private readonly static Lazy<HashSet<string>> s_configKeys_FileSystemEgressProviderOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "DirectoryPath", "IntermediateDirectoryPath", "CopyBufferSize" });
        private readonly static Lazy<HashSet<string>> s_configKeys_MetricProvider = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "ProviderName", "CounterNames" });
        private readonly static Lazy<HashSet<string>> s_configKeys_MeterConfiguration = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "MeterName", "InstrumentNames" });
        private readonly static Lazy<HashSet<string>> s_configKeys_MetricsOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Enabled", "Endpoints", "MetricCount", "IncludeDefaultProviders", "Providers", "Meters" });
        private readonly static Lazy<HashSet<string>> s_configKeys_CorsConfigurationOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "AllowedOrigins" });
        private readonly static Lazy<HashSet<string>> s_configKeys_ExceptionsDebugOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "IncludeMonitorExceptions" });
        private readonly static Lazy<HashSet<string>> s_configKeys_DotnetMonitorDebugOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Exceptions" });
        private readonly static Lazy<HashSet<string>> s_configKeys_GlobalProviderOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "IntervalSeconds" });
        private readonly static Lazy<HashSet<string>> s_configKeys_GlobalCounterOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "IntervalSeconds", "MaxHistograms", "MaxTimeSeries", "Providers" });
        private readonly static Lazy<HashSet<string>> s_configKeys_CollectionRuleTriggerDefaultsOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "RequestCount", "ResponseCount", "SlidingWindowDuration" });
        private readonly static Lazy<HashSet<string>> s_configKeys_CollectionRuleActionDefaultsOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Egress" });
        private readonly static Lazy<HashSet<string>> s_configKeys_CollectionRuleLimitsDefaultsOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "ActionCount", "ActionCountSlidingWindowDuration", "RuleDuration" });
        private readonly static Lazy<HashSet<string>> s_configKeys_CollectionRuleDefaultsOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Triggers", "Actions", "Limits" });
        private readonly static Lazy<HashSet<string>> s_configKeys_TemplateOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "CollectionRuleFilters", "CollectionRuleTriggers", "CollectionRuleActions", "CollectionRuleLimits" });
        private readonly static Lazy<HashSet<string>> s_configKeys_CallStacksOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Enabled" });
        private readonly static Lazy<HashSet<string>> s_configKeys_ExceptionsOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Enabled", "TopLevelLimit", "CollectionFilters" });
        private readonly static Lazy<HashSet<string>> s_configKeys_ParameterCapturingOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Enabled" });
        private readonly static Lazy<HashSet<string>> s_configKeys_InProcessFeaturesOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Enabled", "CallStacks", "Exceptions", "ParameterCapturing" });
        private readonly static Lazy<HashSet<string>> s_configKeys_StorageOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "DefaultSharedPath", "DumpTempFolder", "SharedLibraryPath" });
        private readonly static Lazy<HashSet<string>> s_configKeys_ProcessFilterOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "Filters" });
        private readonly static Lazy<HashSet<string>> s_configKeys_DiagnosticPortOptions = new(() => new HashSet<string>(StringComparer.OrdinalIgnoreCase) { "ConnectionMode", "EndpointName", "MaxConnections", "DeleteEndpointOnStartup" });

        public static object? GetCore(this IConfiguration configuration, Type type, Action<BinderOptions>? configureOptions)
        {
            ArgumentNullException.ThrowIfNull(configuration);

            BinderOptions? binderOptions = GetBinderOptions(configureOptions);

            if (!HasValueOrChildren(configuration))
            {
                return null;
            }

            if (type == typeof(bool?))
            {
                if (configuration is not IConfigurationSection section)
                {
                    throw new InvalidOperationException();
                }
                if (section.Value is string value && !string.IsNullOrEmpty(value))
                {
                    return ParseBool(value, section.Path);
                }
            }

            throw new NotSupportedException($"Unable to bind to type '{type}': generator did not detect the type as input.");
        }

        public static void BindCoreMain(IConfiguration configuration, object instance, Type type, Action<BinderOptions>? configureOptions)
        {
            if (instance is null)
            {
                return;
            }

            if (!HasValueOrChildren(configuration))
            {
                return;
            }

            BinderOptions? binderOptions = GetBinderOptions(configureOptions);

            if (type == typeof(global::Microsoft.Diagnostics.Monitoring.WebApi.CorsConfigurationOptions))
            {
                var temp = (global::Microsoft.Diagnostics.Monitoring.WebApi.CorsConfigurationOptions)instance;
                BindCore(configuration, ref temp, defaultValueIfNotFound: false, binderOptions);
                return;
            }
            else if (type == typeof(global::Microsoft.Diagnostics.Monitoring.Options.DotnetMonitorDebugOptions))
            {
                var temp = (global::Microsoft.Diagnostics.Monitoring.Options.DotnetMonitorDebugOptions)instance;
                BindCore(configuration, ref temp, defaultValueIfNotFound: false, binderOptions);
                return;
            }
            else if (type == typeof(global::Microsoft.Diagnostics.Monitoring.WebApi.GlobalCounterOptions))
            {
                var temp = (global::Microsoft.Diagnostics.Monitoring.WebApi.GlobalCounterOptions)instance;
                BindCore(configuration, ref temp, defaultValueIfNotFound: false, binderOptions);
                return;
            }
            else if (type == typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleDefaultsOptions))
            {
                var temp = (global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleDefaultsOptions)instance;
                BindCore(configuration, ref temp, defaultValueIfNotFound: false, binderOptions);
                return;
            }
            else if (type == typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.TemplateOptions))
            {
                var temp = (global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.TemplateOptions)instance;
                BindCore(configuration, ref temp, defaultValueIfNotFound: false, binderOptions);
                return;
            }
            else if (type == typeof(global::Microsoft.Diagnostics.Monitoring.Options.CallStacksOptions))
            {
                var temp = (global::Microsoft.Diagnostics.Monitoring.Options.CallStacksOptions)instance;
                BindCore(configuration, ref temp, defaultValueIfNotFound: false, binderOptions);
                return;
            }
            else if (type == typeof(global::Microsoft.Diagnostics.Monitoring.Options.ExceptionsOptions))
            {
                var temp = (global::Microsoft.Diagnostics.Monitoring.Options.ExceptionsOptions)instance;
                BindCore(configuration, ref temp, defaultValueIfNotFound: false, binderOptions);
                return;
            }
            else if (type == typeof(global::Microsoft.Diagnostics.Monitoring.Options.ParameterCapturingOptions))
            {
                var temp = (global::Microsoft.Diagnostics.Monitoring.Options.ParameterCapturingOptions)instance;
                BindCore(configuration, ref temp, defaultValueIfNotFound: false, binderOptions);
                return;
            }
            else if (type == typeof(global::Microsoft.Diagnostics.Monitoring.Options.InProcessFeaturesOptions))
            {
                var temp = (global::Microsoft.Diagnostics.Monitoring.Options.InProcessFeaturesOptions)instance;
                BindCore(configuration, ref temp, defaultValueIfNotFound: false, binderOptions);
                return;
            }
            else if (type == typeof(global::Microsoft.Diagnostics.Monitoring.WebApi.MetricsOptions))
            {
                var temp = (global::Microsoft.Diagnostics.Monitoring.WebApi.MetricsOptions)instance;
                BindCore(configuration, ref temp, defaultValueIfNotFound: false, binderOptions);
                return;
            }
            else if (type == typeof(global::Microsoft.Diagnostics.Tools.Monitor.MonitorApiKeyOptions))
            {
                var temp = (global::Microsoft.Diagnostics.Tools.Monitor.MonitorApiKeyOptions)instance;
                BindCore(configuration, ref temp, defaultValueIfNotFound: false, binderOptions);
                return;
            }
            else if (type == typeof(global::Microsoft.Diagnostics.Monitoring.WebApi.StorageOptions))
            {
                var temp = (global::Microsoft.Diagnostics.Monitoring.WebApi.StorageOptions)instance;
                BindCore(configuration, ref temp, defaultValueIfNotFound: false, binderOptions);
                return;
            }
            else if (type == typeof(global::Microsoft.Diagnostics.Monitoring.WebApi.ProcessFilterOptions))
            {
                var temp = (global::Microsoft.Diagnostics.Monitoring.WebApi.ProcessFilterOptions)instance;
                BindCore(configuration, ref temp, defaultValueIfNotFound: false, binderOptions);
                return;
            }
            else if (type == typeof(global::Microsoft.Diagnostics.Monitoring.WebApi.DiagnosticPortOptions))
            {
                var temp = (global::Microsoft.Diagnostics.Monitoring.WebApi.DiagnosticPortOptions)instance;
                BindCore(configuration, ref temp, defaultValueIfNotFound: false, binderOptions);
                return;
            }

            throw new NotSupportedException($"Unable to bind to type '{type}': generator did not detect the type as input.");
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.MonitorApiKeyOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.MonitorApiKeyOptions), s_configKeys_MonitorApiKeyOptions, configuration, binderOptions);

            if (configuration["Subject"] is string value14)
            {
                instance.Subject = value14;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.Subject;
                if (currentValue is not null)
                {
                    instance.Subject = currentValue;
                }
            }

            if (configuration["PublicKey"] is string value15)
            {
                instance.PublicKey = value15;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.PublicKey;
                if (currentValue is not null)
                {
                    instance.PublicKey = currentValue;
                }
            }

            if (configuration["Issuer"] is string value16)
            {
                instance.Issuer = value16;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.Issuer;
                if (currentValue is not null)
                {
                    instance.Issuer = currentValue;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.AzureAdOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.AzureAdOptions), s_configKeys_AzureAdOptions, configuration, binderOptions);

            if (configuration["Instance"] is string value17 && !string.IsNullOrEmpty(value17))
            {
                instance.Instance = ParseSystemUri(value17, configuration.GetSection("Instance").Path);
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.Instance;
                if (currentValue is not null)
                {
                    instance.Instance = currentValue;
                }
            }

            if (configuration["TenantId"] is string value18)
            {
                instance.TenantId = value18;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.TenantId;
                if (currentValue is not null)
                {
                    instance.TenantId = currentValue;
                }
            }

            if (configuration["ClientId"] is string value19)
            {
                instance.ClientId = value19;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.ClientId;
                if (currentValue is not null)
                {
                    instance.ClientId = currentValue;
                }
            }

            if (configuration["AppIdUri"] is string value20 && !string.IsNullOrEmpty(value20))
            {
                instance.AppIdUri = ParseSystemUri(value20, configuration.GetSection("AppIdUri").Path);
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.AppIdUri;
                if (currentValue is not null)
                {
                    instance.AppIdUri = currentValue;
                }
            }

            if (configuration["RequiredRole"] is string value21)
            {
                instance.RequiredRole = value21;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.RequiredRole;
                if (currentValue is not null)
                {
                    instance.RequiredRole = currentValue;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.AuthenticationOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.AuthenticationOptions), s_configKeys_AuthenticationOptions, configuration, binderOptions);

            if (AsConfigWithChildren(configuration.GetSection("MonitorApiKey")) is IConfigurationSection section22)
            {
                global::Microsoft.Diagnostics.Tools.Monitor.MonitorApiKeyOptions? temp24 = instance.MonitorApiKey;
                temp24 ??= new global::Microsoft.Diagnostics.Tools.Monitor.MonitorApiKeyOptions();
                BindCore(section22, ref temp24, defaultValueIfNotFound: false, binderOptions);
                instance.MonitorApiKey = temp24;
            }
            else
            {
                instance.MonitorApiKey = instance.MonitorApiKey;
            }

            if (AsConfigWithChildren(configuration.GetSection("AzureAd")) is IConfigurationSection section25)
            {
                global::Microsoft.Diagnostics.Tools.Monitor.AzureAdOptions? temp27 = instance.AzureAd;
                temp27 ??= new global::Microsoft.Diagnostics.Tools.Monitor.AzureAdOptions();
                BindCore(section25, ref temp27, defaultValueIfNotFound: false, binderOptions);
                instance.AzureAd = temp27;
            }
            else
            {
                instance.AzureAd = instance.AzureAd;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectDumpOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectDumpOptions), s_configKeys_CollectDumpOptions, configuration, binderOptions);

            if (configuration["Type"] is string value28 && !string.IsNullOrEmpty(value28))
            {
                instance.Type = ParseEnum<global::Microsoft.Diagnostics.Monitoring.WebApi.Models.DumpType>(value28, configuration.GetSection("Type").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.Type = instance.Type;
            }

            if (configuration["Egress"] is string value29)
            {
                instance.Egress = value29;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.Egress;
                if (currentValue is not null)
                {
                    instance.Egress = currentValue;
                }
            }

            if (configuration["ArtifactName"] is string value30)
            {
                instance.ArtifactName = value30;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.ArtifactName;
                if (currentValue is not null)
                {
                    instance.ArtifactName = currentValue;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Monitoring.Options.ExceptionFilter instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Monitoring.Options.ExceptionFilter), s_configKeys_ExceptionFilter, configuration, binderOptions);

            if (configuration["ExceptionType"] is string value31)
            {
                instance.ExceptionType = value31;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.ExceptionType;
                if (currentValue is not null)
                {
                    instance.ExceptionType = currentValue;
                }
            }

            if (configuration["ModuleName"] is string value32)
            {
                instance.ModuleName = value32;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.ModuleName;
                if (currentValue is not null)
                {
                    instance.ModuleName = currentValue;
                }
            }

            if (configuration["TypeName"] is string value33)
            {
                instance.TypeName = value33;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.TypeName;
                if (currentValue is not null)
                {
                    instance.TypeName = currentValue;
                }
            }

            if (configuration["MethodName"] is string value34)
            {
                instance.MethodName = value34;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.MethodName;
                if (currentValue is not null)
                {
                    instance.MethodName = currentValue;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::System.Collections.Generic.List<global::Microsoft.Diagnostics.Monitoring.Options.ExceptionFilter> instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (!string.IsNullOrEmpty(section.Value) && !section.GetChildren().Any())
                {
                    continue;
                }
                var value = new global::Microsoft.Diagnostics.Monitoring.Options.ExceptionFilter();
                BindCore(section, ref value, defaultValueIfNotFound: false, binderOptions);
                instance.Add(value);
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Monitoring.Options.ExceptionsConfiguration instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Monitoring.Options.ExceptionsConfiguration), s_configKeys_ExceptionsConfiguration, configuration, binderOptions);

            if (AsConfigWithChildren(configuration.GetSection("Include")) is IConfigurationSection section36)
            {
                global::System.Collections.Generic.List<global::Microsoft.Diagnostics.Monitoring.Options.ExceptionFilter>? temp38 = instance.Include;
                temp38 ??= new global::System.Collections.Generic.List<global::Microsoft.Diagnostics.Monitoring.Options.ExceptionFilter>();
                BindCore(section36, ref temp38, defaultValueIfNotFound: false, binderOptions);
                instance.Include = temp38;
            }
            else
            {
                instance.Include = instance.Include;
            }

            if (AsConfigWithChildren(configuration.GetSection("Exclude")) is IConfigurationSection section39)
            {
                global::System.Collections.Generic.List<global::Microsoft.Diagnostics.Monitoring.Options.ExceptionFilter>? temp41 = instance.Exclude;
                temp41 ??= new global::System.Collections.Generic.List<global::Microsoft.Diagnostics.Monitoring.Options.ExceptionFilter>();
                BindCore(section39, ref temp41, defaultValueIfNotFound: false, binderOptions);
                instance.Exclude = temp41;
            }
            else
            {
                instance.Exclude = instance.Exclude;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectExceptionsOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectExceptionsOptions), s_configKeys_CollectExceptionsOptions, configuration, binderOptions);

            if (configuration["Egress"] is string value42)
            {
                instance.Egress = value42;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.Egress;
                if (currentValue is not null)
                {
                    instance.Egress = currentValue;
                }
            }

            if (configuration["Format"] is string value43 && !string.IsNullOrEmpty(value43))
            {
                instance.Format = ParseEnum<global::Microsoft.Diagnostics.Monitoring.Options.ExceptionFormat>(value43, configuration.GetSection("Format").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.Format = instance.Format;
            }

            if (AsConfigWithChildren(configuration.GetSection("Filters")) is IConfigurationSection section44)
            {
                global::Microsoft.Diagnostics.Monitoring.Options.ExceptionsConfiguration? temp46 = instance.Filters;
                temp46 ??= new global::Microsoft.Diagnostics.Monitoring.Options.ExceptionsConfiguration();
                BindCore(section44, ref temp46, defaultValueIfNotFound: false, binderOptions);
                instance.Filters = temp46;
            }
            else
            {
                instance.Filters = instance.Filters;
            }

            if (configuration["ArtifactName"] is string value47)
            {
                instance.ArtifactName = value47;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.ArtifactName;
                if (currentValue is not null)
                {
                    instance.ArtifactName = currentValue;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectGCDumpOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectGCDumpOptions), s_configKeys_CollectGCDumpOptions, configuration, binderOptions);

            if (configuration["Egress"] is string value48)
            {
                instance.Egress = value48;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.Egress;
                if (currentValue is not null)
                {
                    instance.Egress = currentValue;
                }
            }

            if (configuration["ArtifactName"] is string value49)
            {
                instance.ArtifactName = value49;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.ArtifactName;
                if (currentValue is not null)
                {
                    instance.ArtifactName = currentValue;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref string[] instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            var temp50 = new List<string>();

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (section.Value is string value)
                {
                    temp50.Add(value);
                }
            }

            int originalCount = instance.Length;
            Array.Resize(ref instance, originalCount + temp50.Count);
            temp50.CopyTo(instance, originalCount);
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Monitoring.WebApi.Models.EventMetricsProvider instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Monitoring.WebApi.Models.EventMetricsProvider), s_configKeys_EventMetricsProvider, configuration, binderOptions);

            if (configuration["ProviderName"] is string value51)
            {
                instance.ProviderName = value51;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.ProviderName;
                if (currentValue is not null)
                {
                    instance.ProviderName = currentValue;
                }
            }

            if (AsConfigWithChildren(configuration.GetSection("CounterNames")) is IConfigurationSection section52)
            {
                string[]? temp54 = instance.CounterNames;
                temp54 ??= new string[0];
                BindCore(section52, ref temp54, defaultValueIfNotFound: false, binderOptions);
                instance.CounterNames = temp54;
            }
            else
            {
                instance.CounterNames = instance.CounterNames;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Monitoring.WebApi.Models.EventMetricsProvider[] instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            var temp55 = new List<global::Microsoft.Diagnostics.Monitoring.WebApi.Models.EventMetricsProvider>();

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (!string.IsNullOrEmpty(section.Value) && !section.GetChildren().Any())
                {
                    continue;
                }
                var value = new global::Microsoft.Diagnostics.Monitoring.WebApi.Models.EventMetricsProvider();
                BindCore(section, ref value, defaultValueIfNotFound: false, binderOptions);
                temp55.Add(value);
            }

            int originalCount = instance.Length;
            Array.Resize(ref instance, originalCount + temp55.Count);
            temp55.CopyTo(instance, originalCount);
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Monitoring.WebApi.Models.EventMetricsMeter instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Monitoring.WebApi.Models.EventMetricsMeter), s_configKeys_EventMetricsMeter, configuration, binderOptions);

            if (configuration["MeterName"] is string value57)
            {
                instance.MeterName = value57;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.MeterName;
                if (currentValue is not null)
                {
                    instance.MeterName = currentValue;
                }
            }

            if (AsConfigWithChildren(configuration.GetSection("InstrumentNames")) is IConfigurationSection section58)
            {
                string[]? temp60 = instance.InstrumentNames;
                temp60 ??= new string[0];
                BindCore(section58, ref temp60, defaultValueIfNotFound: false, binderOptions);
                instance.InstrumentNames = temp60;
            }
            else
            {
                instance.InstrumentNames = instance.InstrumentNames;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Monitoring.WebApi.Models.EventMetricsMeter[] instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            var temp61 = new List<global::Microsoft.Diagnostics.Monitoring.WebApi.Models.EventMetricsMeter>();

            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (!string.IsNullOrEmpty(section.Value) && !section.GetChildren().Any())
                {
                    continue;
                }
                var value = new global::Microsoft.Diagnostics.Monitoring.WebApi.Models.EventMetricsMeter();
                BindCore(section, ref value, defaultValueIfNotFound: false, binderOptions);
                temp61.Add(value);
            }

            int originalCount = instance.Length;
            Array.Resize(ref instance, originalCount + temp61.Count);
            temp61.CopyTo(instance, originalCount);
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectLiveMetricsOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectLiveMetricsOptions), s_configKeys_CollectLiveMetricsOptions, configuration, binderOptions);

            if (configuration["IncludeDefaultProviders"] is string value63 && !string.IsNullOrEmpty(value63))
            {
                instance.IncludeDefaultProviders = ParseBool(value63, configuration.GetSection("IncludeDefaultProviders").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.IncludeDefaultProviders = instance.IncludeDefaultProviders;
            }

            if (AsConfigWithChildren(configuration.GetSection("Providers")) is IConfigurationSection section64)
            {
                global::Microsoft.Diagnostics.Monitoring.WebApi.Models.EventMetricsProvider[]? temp66 = instance.Providers;
                temp66 ??= new global::Microsoft.Diagnostics.Monitoring.WebApi.Models.EventMetricsProvider[0];
                BindCore(section64, ref temp66, defaultValueIfNotFound: false, binderOptions);
                instance.Providers = temp66;
            }
            else
            {
                instance.Providers = instance.Providers;
            }

            if (AsConfigWithChildren(configuration.GetSection("Meters")) is IConfigurationSection section67)
            {
                global::Microsoft.Diagnostics.Monitoring.WebApi.Models.EventMetricsMeter[]? temp69 = instance.Meters;
                temp69 ??= new global::Microsoft.Diagnostics.Monitoring.WebApi.Models.EventMetricsMeter[0];
                BindCore(section67, ref temp69, defaultValueIfNotFound: false, binderOptions);
                instance.Meters = temp69;
            }
            else
            {
                instance.Meters = instance.Meters;
            }

            if (configuration["Duration"] is string value70 && !string.IsNullOrEmpty(value70))
            {
                instance.Duration = ParseSystemTimeSpan(value70, configuration.GetSection("Duration").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.Duration = instance.Duration;
            }

            if (configuration["Egress"] is string value71)
            {
                instance.Egress = value71;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.Egress;
                if (currentValue is not null)
                {
                    instance.Egress = currentValue;
                }
            }

            if (configuration["ArtifactName"] is string value72)
            {
                instance.ArtifactName = value72;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.ArtifactName;
                if (currentValue is not null)
                {
                    instance.ArtifactName = currentValue;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::System.Collections.Generic.Dictionary<string, global::Microsoft.Extensions.Logging.LogLevel?> instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                // Manual implementation of binding logic for LogLevel? values
                // https://github.com/dotnet/runtime/issues/115343
                if (section.Value is string value && !string.IsNullOrEmpty(value))
                {
                    instance[section.Key] = ParseEnum<global::Microsoft.Extensions.Logging.LogLevel>(value, section.Path);
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectLogsOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectLogsOptions), s_configKeys_CollectLogsOptions, configuration, binderOptions);

            if (configuration["DefaultLevel"] is string value73 && !string.IsNullOrEmpty(value73))
            {
                instance.DefaultLevel = ParseEnum<global::Microsoft.Extensions.Logging.LogLevel>(value73, configuration.GetSection("DefaultLevel").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.DefaultLevel = instance.DefaultLevel;
            }

            if (AsConfigWithChildren(configuration.GetSection("FilterSpecs")) is IConfigurationSection section74)
            {
                global::System.Collections.Generic.Dictionary<string, global::Microsoft.Extensions.Logging.LogLevel?>? temp76 = instance.FilterSpecs;
                temp76 ??= new global::System.Collections.Generic.Dictionary<string, global::Microsoft.Extensions.Logging.LogLevel?>();
                BindCore(section74, ref temp76, defaultValueIfNotFound: false, binderOptions);
                instance.FilterSpecs = temp76;
            }
            else
            {
                instance.FilterSpecs = instance.FilterSpecs;
            }

            if (configuration["UseAppFilters"] is string value77 && !string.IsNullOrEmpty(value77))
            {
                instance.UseAppFilters = ParseBool(value77, configuration.GetSection("UseAppFilters").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.UseAppFilters = instance.UseAppFilters;
            }

            if (configuration["Duration"] is string value78 && !string.IsNullOrEmpty(value78))
            {
                instance.Duration = ParseSystemTimeSpan(value78, configuration.GetSection("Duration").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.Duration = instance.Duration;
            }

            if (configuration["Egress"] is string value79)
            {
                instance.Egress = value79;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.Egress;
                if (currentValue is not null)
                {
                    instance.Egress = currentValue;
                }
            }

            if (configuration["Format"] is string value80 && !string.IsNullOrEmpty(value80))
            {
                instance.Format = ParseEnum<global::Microsoft.Diagnostics.Monitoring.Options.LogFormat>(value80, configuration.GetSection("Format").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.Format = instance.Format;
            }

            if (configuration["ArtifactName"] is string value81)
            {
                instance.ArtifactName = value81;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.ArtifactName;
                if (currentValue is not null)
                {
                    instance.ArtifactName = currentValue;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectStacksOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectStacksOptions), s_configKeys_CollectStacksOptions, configuration, binderOptions);

            if (configuration["Egress"] is string value82)
            {
                instance.Egress = value82;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.Egress;
                if (currentValue is not null)
                {
                    instance.Egress = currentValue;
                }
            }

            if (configuration["Format"] is string value83 && !string.IsNullOrEmpty(value83))
            {
                instance.Format = ParseEnum<global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CallStackFormat>(value83, configuration.GetSection("Format").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.Format = instance.Format;
            }

            if (configuration["ArtifactName"] is string value84)
            {
                instance.ArtifactName = value84;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.ArtifactName;
                if (currentValue is not null)
                {
                    instance.ArtifactName = currentValue;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::System.Collections.Generic.IDictionary<string, string> instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (section.Value is string value)
                {
                    instance[section.Key] = value;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Monitoring.WebApi.Models.EventPipeProvider instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Monitoring.WebApi.Models.EventPipeProvider), s_configKeys_EventPipeProvider, configuration, binderOptions);

            if (configuration["Name"] is string value85)
            {
                instance.Name = value85;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.Name;
                if (currentValue is not null)
                {
                    instance.Name = currentValue;
                }
            }

            if (configuration["Keywords"] is string value86)
            {
                instance.Keywords = value86;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.Keywords;
                if (currentValue is not null)
                {
                    instance.Keywords = currentValue;
                }
            }

            if (configuration["EventLevel"] is string value87 && !string.IsNullOrEmpty(value87))
            {
                instance.EventLevel = ParseEnum<global::System.Diagnostics.Tracing.EventLevel>(value87, configuration.GetSection("EventLevel").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.EventLevel = instance.EventLevel;
            }

            if (AsConfigWithChildren(configuration.GetSection("Arguments")) is IConfigurationSection section88)
            {
                global::System.Collections.Generic.IDictionary<string, string>? temp90 = instance.Arguments;
                temp90 ??= (global::System.Collections.Generic.IDictionary<string, string>)new Dictionary<string, string>();
                BindCore(section88, ref temp90, defaultValueIfNotFound: false, binderOptions);
                instance.Arguments = temp90;
            }
            else
            {
                instance.Arguments = instance.Arguments;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::System.Collections.Generic.List<global::Microsoft.Diagnostics.Monitoring.WebApi.Models.EventPipeProvider> instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (!string.IsNullOrEmpty(section.Value) && !section.GetChildren().Any())
                {
                    continue;
                }
                var value = new global::Microsoft.Diagnostics.Monitoring.WebApi.Models.EventPipeProvider();
                BindCore(section, ref value, defaultValueIfNotFound: false, binderOptions);
                instance.Add(value);
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.TraceEventFilter instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.TraceEventFilter), s_configKeys_TraceEventFilter, configuration, binderOptions);

            if (configuration["ProviderName"] is string value92)
            {
                instance.ProviderName = value92;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.ProviderName;
                if (currentValue is not null)
                {
                    instance.ProviderName = currentValue;
                }
            }

            if (configuration["EventName"] is string value93)
            {
                instance.EventName = value93;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.EventName;
                if (currentValue is not null)
                {
                    instance.EventName = currentValue;
                }
            }

            if (AsConfigWithChildren(configuration.GetSection("PayloadFilter")) is IConfigurationSection section94)
            {
                global::System.Collections.Generic.IDictionary<string, string>? temp96 = instance.PayloadFilter;
                temp96 ??= (global::System.Collections.Generic.IDictionary<string, string>)new Dictionary<string, string>();
                BindCore(section94, ref temp96, defaultValueIfNotFound: false, binderOptions);
                instance.PayloadFilter = temp96;
            }
            else
            {
                instance.PayloadFilter = instance.PayloadFilter;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectTraceOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectTraceOptions), s_configKeys_CollectTraceOptions, configuration, binderOptions);

            if (configuration["Profile"] is string value97 && !string.IsNullOrEmpty(value97))
            {
                instance.Profile = ParseEnum<global::Microsoft.Diagnostics.Monitoring.WebApi.Models.TraceProfile>(value97, configuration.GetSection("Profile").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.Profile = instance.Profile;
            }

            if (AsConfigWithChildren(configuration.GetSection("Providers")) is IConfigurationSection section98)
            {
                global::System.Collections.Generic.List<global::Microsoft.Diagnostics.Monitoring.WebApi.Models.EventPipeProvider>? temp100 = instance.Providers;
                temp100 ??= new global::System.Collections.Generic.List<global::Microsoft.Diagnostics.Monitoring.WebApi.Models.EventPipeProvider>();
                BindCore(section98, ref temp100, defaultValueIfNotFound: false, binderOptions);
                instance.Providers = temp100;
            }
            else
            {
                instance.Providers = instance.Providers;
            }

            if (configuration["RequestRundown"] is string value101 && !string.IsNullOrEmpty(value101))
            {
                instance.RequestRundown = ParseBool(value101, configuration.GetSection("RequestRundown").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.RequestRundown = instance.RequestRundown;
            }

            if (configuration["BufferSizeMegabytes"] is string value102 && !string.IsNullOrEmpty(value102))
            {
                instance.BufferSizeMegabytes = ParseInt(value102, configuration.GetSection("BufferSizeMegabytes").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.BufferSizeMegabytes = instance.BufferSizeMegabytes;
            }

            if (configuration["Duration"] is string value103 && !string.IsNullOrEmpty(value103))
            {
                instance.Duration = ParseSystemTimeSpan(value103, configuration.GetSection("Duration").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.Duration = instance.Duration;
            }

            if (configuration["Egress"] is string value104)
            {
                instance.Egress = value104;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.Egress;
                if (currentValue is not null)
                {
                    instance.Egress = currentValue;
                }
            }

            if (AsConfigWithChildren(configuration.GetSection("StoppingEvent")) is IConfigurationSection section105)
            {
                global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.TraceEventFilter? temp107 = instance.StoppingEvent;
                temp107 ??= new global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.TraceEventFilter();
                BindCore(section105, ref temp107, defaultValueIfNotFound: false, binderOptions);
                instance.StoppingEvent = temp107;
            }
            else
            {
                instance.StoppingEvent = instance.StoppingEvent;
            }

            if (configuration["ArtifactName"] is string value108)
            {
                instance.ArtifactName = value108;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.ArtifactName;
                if (currentValue is not null)
                {
                    instance.ArtifactName = currentValue;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.ExecuteOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.ExecuteOptions), s_configKeys_ExecuteOptions, configuration, binderOptions);

            if (configuration["Path"] is string value109)
            {
                instance.Path = value109;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.Path;
                if (currentValue is not null)
                {
                    instance.Path = currentValue;
                }
            }

            if (configuration["Arguments"] is string value110)
            {
                instance.Arguments = value110;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.Arguments;
                if (currentValue is not null)
                {
                    instance.Arguments = currentValue;
                }
            }

            if (configuration["IgnoreExitCode"] is string value111 && !string.IsNullOrEmpty(value111))
            {
                instance.IgnoreExitCode = ParseBool(value111, configuration.GetSection("IgnoreExitCode").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.IgnoreExitCode = instance.IgnoreExitCode;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.GetEnvironmentVariableOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.GetEnvironmentVariableOptions), s_configKeys_GetEnvironmentVariableOptions, configuration, binderOptions);

            if (configuration["Name"] is string value112)
            {
                instance.Name = value112;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.Name;
                if (currentValue is not null)
                {
                    instance.Name = currentValue;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.LoadProfilerOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.LoadProfilerOptions), s_configKeys_LoadProfilerOptions, configuration, binderOptions);

            if (configuration["Path"] is string value113)
            {
                instance.Path = value113;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.Path;
                if (currentValue is not null)
                {
                    instance.Path = currentValue;
                }
            }

            if (configuration["Clsid"] is string value114 && !string.IsNullOrEmpty(value114))
            {
                instance.Clsid = ParseSystemGuid(value114, configuration.GetSection("Clsid").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.Clsid = instance.Clsid;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.SetEnvironmentVariableOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.SetEnvironmentVariableOptions), s_configKeys_SetEnvironmentVariableOptions, configuration, binderOptions);

            if (configuration["Name"] is string value115)
            {
                instance.Name = value115;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.Name;
                if (currentValue is not null)
                {
                    instance.Name = currentValue;
                }
            }

            if (configuration["Value"] is string value116)
            {
                instance.Value = value116;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.Value;
                if (currentValue is not null)
                {
                    instance.Value = currentValue;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Monitoring.WebApi.ProcessFilterDescriptor instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Monitoring.WebApi.ProcessFilterDescriptor), s_configKeys_ProcessFilterDescriptor, configuration, binderOptions);

            if (configuration["Key"] is string value117 && !string.IsNullOrEmpty(value117))
            {
                instance.Key = ParseEnum<global::Microsoft.Diagnostics.Monitoring.WebApi.ProcessFilterKey>(value117, configuration.GetSection("Key").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.Key = instance.Key;
            }

            if (configuration["Value"] is string value118)
            {
                instance.Value = value118;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.Value;
                if (currentValue is not null)
                {
                    instance.Value = currentValue;
                }
            }

            if (configuration["MatchType"] is string value119 && !string.IsNullOrEmpty(value119))
            {
                instance.MatchType = ParseEnum<global::Microsoft.Diagnostics.Monitoring.WebApi.ProcessFilterType>(value119, configuration.GetSection("MatchType").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.MatchType = instance.MatchType;
            }

            if (configuration["ProcessName"] is string value120)
            {
                instance.ProcessName = value120;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.ProcessName;
                if (currentValue is not null)
                {
                    instance.ProcessName = currentValue;
                }
            }

            if (configuration["ProcessId"] is string value121)
            {
                instance.ProcessId = value121;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.ProcessId;
                if (currentValue is not null)
                {
                    instance.ProcessId = currentValue;
                }
            }

            if (configuration["CommandLine"] is string value122)
            {
                instance.CommandLine = value122;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.CommandLine;
                if (currentValue is not null)
                {
                    instance.CommandLine = currentValue;
                }
            }

            if (configuration["ManagedEntryPointAssemblyName"] is string value123)
            {
                instance.ManagedEntryPointAssemblyName = value123;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.ManagedEntryPointAssemblyName;
                if (currentValue is not null)
                {
                    instance.ManagedEntryPointAssemblyName = currentValue;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::System.Collections.Generic.List<global::Microsoft.Diagnostics.Monitoring.WebApi.ProcessFilterDescriptor> instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (!string.IsNullOrEmpty(section.Value) && !section.GetChildren().Any())
                {
                    continue;
                }
                var value = new global::Microsoft.Diagnostics.Monitoring.WebApi.ProcessFilterDescriptor();
                BindCore(section, ref value, defaultValueIfNotFound: false, binderOptions);
                instance.Add(value);
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleTriggerOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleTriggerOptions), s_configKeys_CollectionRuleTriggerOptions, configuration, binderOptions);

            if (configuration["Type"] is string value125)
            {
                instance.Type = value125;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.Type;
                if (currentValue is not null)
                {
                    instance.Type = currentValue;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleActionOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleActionOptions), s_configKeys_CollectionRuleActionOptions, configuration, binderOptions);

            if (configuration["Name"] is string value126)
            {
                instance.Name = value126;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.Name;
                if (currentValue is not null)
                {
                    instance.Name = currentValue;
                }
            }

            if (configuration["Type"] is string value127)
            {
                instance.Type = value127;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.Type;
                if (currentValue is not null)
                {
                    instance.Type = currentValue;
                }
            }

            if (configuration["WaitForCompletion"] is string value128 && !string.IsNullOrEmpty(value128))
            {
                instance.WaitForCompletion = ParseBool(value128, configuration.GetSection("WaitForCompletion").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.WaitForCompletion = instance.WaitForCompletion;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::System.Collections.Generic.List<global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleActionOptions> instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (!string.IsNullOrEmpty(section.Value) && !section.GetChildren().Any())
                {
                    continue;
                }
                var value = new global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleActionOptions();
                BindCore(section, ref value, defaultValueIfNotFound: false, binderOptions);
                instance.Add(value);
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleLimitsOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleLimitsOptions), s_configKeys_CollectionRuleLimitsOptions, configuration, binderOptions);

            if (configuration["ActionCount"] is string value130 && !string.IsNullOrEmpty(value130))
            {
                instance.ActionCount = ParseInt(value130, configuration.GetSection("ActionCount").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.ActionCount = instance.ActionCount;
            }

            if (configuration["ActionCountSlidingWindowDuration"] is string value131 && !string.IsNullOrEmpty(value131))
            {
                instance.ActionCountSlidingWindowDuration = ParseSystemTimeSpan(value131, configuration.GetSection("ActionCountSlidingWindowDuration").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.ActionCountSlidingWindowDuration = instance.ActionCountSlidingWindowDuration;
            }

            if (configuration["RuleDuration"] is string value132 && !string.IsNullOrEmpty(value132))
            {
                instance.RuleDuration = ParseSystemTimeSpan(value132, configuration.GetSection("RuleDuration").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.RuleDuration = instance.RuleDuration;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.ErrorValidationResult instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.ErrorValidationResult), s_configKeys_ErrorValidationResult, configuration, binderOptions);
        }

        public static void BindCore(IConfiguration configuration, ref global::System.Collections.Generic.List<global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.ErrorValidationResult> instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (!string.IsNullOrEmpty(section.Value) && !section.GetChildren().Any())
                {
                    continue;
                }
                var value = InitializeErrorValidationResult(section, binderOptions);
                BindCore(section, ref value, defaultValueIfNotFound: false, binderOptions);
                instance.Add(value);
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleOptions), s_configKeys_CollectionRuleOptions, configuration, binderOptions);

            if (AsConfigWithChildren(configuration.GetSection("Filters")) is IConfigurationSection section134)
            {
                global::System.Collections.Generic.List<global::Microsoft.Diagnostics.Monitoring.WebApi.ProcessFilterDescriptor>? temp136 = instance.Filters;
                temp136 ??= new global::System.Collections.Generic.List<global::Microsoft.Diagnostics.Monitoring.WebApi.ProcessFilterDescriptor>();
                BindCore(section134, ref temp136, defaultValueIfNotFound: false, binderOptions);
                instance.Filters = temp136;
            }
            else
            {
                instance.Filters = instance.Filters;
            }

            if (AsConfigWithChildren(configuration.GetSection("Trigger")) is IConfigurationSection section137)
            {
                global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleTriggerOptions? temp139 = instance.Trigger;
                temp139 ??= new global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleTriggerOptions();
                BindCore(section137, ref temp139, defaultValueIfNotFound: false, binderOptions);
                instance.Trigger = temp139;
            }
            else
            {
                instance.Trigger = instance.Trigger;
            }

            if (AsConfigWithChildren(configuration.GetSection("Actions")) is IConfigurationSection section140)
            {
                global::System.Collections.Generic.List<global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleActionOptions>? temp142 = instance.Actions;
                temp142 ??= new global::System.Collections.Generic.List<global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleActionOptions>();
                BindCore(section140, ref temp142, defaultValueIfNotFound: false, binderOptions);
                instance.Actions = temp142;
            }
            else
            {
                instance.Actions = instance.Actions;
            }

            if (AsConfigWithChildren(configuration.GetSection("Limits")) is IConfigurationSection section143)
            {
                global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleLimitsOptions? temp145 = instance.Limits;
                temp145 ??= new global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleLimitsOptions();
                BindCore(section143, ref temp145, defaultValueIfNotFound: false, binderOptions);
                instance.Limits = temp145;
            }
            else
            {
                instance.Limits = instance.Limits;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.AspNetRequestCountOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.AspNetRequestCountOptions), s_configKeys_AspNetRequestCountOptions, configuration, binderOptions);

            if (configuration["RequestCount"] is string value146 && !string.IsNullOrEmpty(value146))
            {
                instance.RequestCount = ParseInt(value146, configuration.GetSection("RequestCount").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.RequestCount = instance.RequestCount;
            }

            if (configuration["SlidingWindowDuration"] is string value147 && !string.IsNullOrEmpty(value147))
            {
                instance.SlidingWindowDuration = ParseSystemTimeSpan(value147, configuration.GetSection("SlidingWindowDuration").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.SlidingWindowDuration = instance.SlidingWindowDuration;
            }

            if (AsConfigWithChildren(configuration.GetSection("IncludePaths")) is IConfigurationSection section148)
            {
                string[]? temp150 = instance.IncludePaths;
                temp150 ??= new string[0];
                BindCore(section148, ref temp150, defaultValueIfNotFound: false, binderOptions);
                instance.IncludePaths = temp150;
            }
            else
            {
                instance.IncludePaths = instance.IncludePaths;
            }

            if (AsConfigWithChildren(configuration.GetSection("ExcludePaths")) is IConfigurationSection section151)
            {
                string[]? temp153 = instance.ExcludePaths;
                temp153 ??= new string[0];
                BindCore(section151, ref temp153, defaultValueIfNotFound: false, binderOptions);
                instance.ExcludePaths = temp153;
            }
            else
            {
                instance.ExcludePaths = instance.ExcludePaths;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.AspNetRequestDurationOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.AspNetRequestDurationOptions), s_configKeys_AspNetRequestDurationOptions, configuration, binderOptions);

            if (configuration["RequestCount"] is string value154 && !string.IsNullOrEmpty(value154))
            {
                instance.RequestCount = ParseInt(value154, configuration.GetSection("RequestCount").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.RequestCount = instance.RequestCount;
            }

            if (configuration["RequestDuration"] is string value155 && !string.IsNullOrEmpty(value155))
            {
                instance.RequestDuration = ParseSystemTimeSpan(value155, configuration.GetSection("RequestDuration").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.RequestDuration = instance.RequestDuration;
            }

            if (configuration["SlidingWindowDuration"] is string value156 && !string.IsNullOrEmpty(value156))
            {
                instance.SlidingWindowDuration = ParseSystemTimeSpan(value156, configuration.GetSection("SlidingWindowDuration").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.SlidingWindowDuration = instance.SlidingWindowDuration;
            }

            if (AsConfigWithChildren(configuration.GetSection("IncludePaths")) is IConfigurationSection section157)
            {
                string[]? temp159 = instance.IncludePaths;
                temp159 ??= new string[0];
                BindCore(section157, ref temp159, defaultValueIfNotFound: false, binderOptions);
                instance.IncludePaths = temp159;
            }
            else
            {
                instance.IncludePaths = instance.IncludePaths;
            }

            if (AsConfigWithChildren(configuration.GetSection("ExcludePaths")) is IConfigurationSection section160)
            {
                string[]? temp162 = instance.ExcludePaths;
                temp162 ??= new string[0];
                BindCore(section160, ref temp162, defaultValueIfNotFound: false, binderOptions);
                instance.ExcludePaths = temp162;
            }
            else
            {
                instance.ExcludePaths = instance.ExcludePaths;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.AspNetResponseStatusOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.AspNetResponseStatusOptions), s_configKeys_AspNetResponseStatusOptions, configuration, binderOptions);

            if (AsConfigWithChildren(configuration.GetSection("StatusCodes")) is IConfigurationSection section163)
            {
                string[]? temp165 = instance.StatusCodes;
                temp165 ??= new string[0];
                BindCore(section163, ref temp165, defaultValueIfNotFound: false, binderOptions);
                instance.StatusCodes = temp165;
            }
            else
            {
                instance.StatusCodes = instance.StatusCodes;
            }

            if (configuration["ResponseCount"] is string value166 && !string.IsNullOrEmpty(value166))
            {
                instance.ResponseCount = ParseInt(value166, configuration.GetSection("ResponseCount").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.ResponseCount = instance.ResponseCount;
            }

            if (configuration["SlidingWindowDuration"] is string value167 && !string.IsNullOrEmpty(value167))
            {
                instance.SlidingWindowDuration = ParseSystemTimeSpan(value167, configuration.GetSection("SlidingWindowDuration").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.SlidingWindowDuration = instance.SlidingWindowDuration;
            }

            if (AsConfigWithChildren(configuration.GetSection("IncludePaths")) is IConfigurationSection section168)
            {
                string[]? temp170 = instance.IncludePaths;
                temp170 ??= new string[0];
                BindCore(section168, ref temp170, defaultValueIfNotFound: false, binderOptions);
                instance.IncludePaths = temp170;
            }
            else
            {
                instance.IncludePaths = instance.IncludePaths;
            }

            if (AsConfigWithChildren(configuration.GetSection("ExcludePaths")) is IConfigurationSection section171)
            {
                string[]? temp173 = instance.ExcludePaths;
                temp173 ??= new string[0];
                BindCore(section171, ref temp173, defaultValueIfNotFound: false, binderOptions);
                instance.ExcludePaths = temp173;
            }
            else
            {
                instance.ExcludePaths = instance.ExcludePaths;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.EventCounterOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.EventCounterOptions), s_configKeys_EventCounterOptions, configuration, binderOptions);

            if (configuration["ProviderName"] is string value174)
            {
                instance.ProviderName = value174;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.ProviderName;
                if (currentValue is not null)
                {
                    instance.ProviderName = currentValue;
                }
            }

            if (configuration["CounterName"] is string value175)
            {
                instance.CounterName = value175;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.CounterName;
                if (currentValue is not null)
                {
                    instance.CounterName = currentValue;
                }
            }

            if (configuration["GreaterThan"] is string value176 && !string.IsNullOrEmpty(value176))
            {
                instance.GreaterThan = ParseDouble(value176, configuration.GetSection("GreaterThan").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.GreaterThan = instance.GreaterThan;
            }

            if (configuration["LessThan"] is string value177 && !string.IsNullOrEmpty(value177))
            {
                instance.LessThan = ParseDouble(value177, configuration.GetSection("LessThan").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.LessThan = instance.LessThan;
            }

            if (configuration["SlidingWindowDuration"] is string value178 && !string.IsNullOrEmpty(value178))
            {
                instance.SlidingWindowDuration = ParseSystemTimeSpan(value178, configuration.GetSection("SlidingWindowDuration").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.SlidingWindowDuration = instance.SlidingWindowDuration;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.EventCounterShortcuts.CPUUsageOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.EventCounterShortcuts.CPUUsageOptions), s_configKeys_CPUUsageOptions, configuration, binderOptions);

            if (configuration["GreaterThan"] is string value179 && !string.IsNullOrEmpty(value179))
            {
                instance.GreaterThan = ParseDouble(value179, configuration.GetSection("GreaterThan").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.GreaterThan = instance.GreaterThan;
            }

            if (configuration["LessThan"] is string value180 && !string.IsNullOrEmpty(value180))
            {
                instance.LessThan = ParseDouble(value180, configuration.GetSection("LessThan").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.LessThan = instance.LessThan;
            }

            if (configuration["SlidingWindowDuration"] is string value181 && !string.IsNullOrEmpty(value181))
            {
                instance.SlidingWindowDuration = ParseSystemTimeSpan(value181, configuration.GetSection("SlidingWindowDuration").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.SlidingWindowDuration = instance.SlidingWindowDuration;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.EventCounterShortcuts.GCHeapSizeOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.EventCounterShortcuts.GCHeapSizeOptions), s_configKeys_GCHeapSizeOptions, configuration, binderOptions);

            if (configuration["GreaterThan"] is string value182 && !string.IsNullOrEmpty(value182))
            {
                instance.GreaterThan = ParseDouble(value182, configuration.GetSection("GreaterThan").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.GreaterThan = instance.GreaterThan;
            }

            if (configuration["LessThan"] is string value183 && !string.IsNullOrEmpty(value183))
            {
                instance.LessThan = ParseDouble(value183, configuration.GetSection("LessThan").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.LessThan = instance.LessThan;
            }

            if (configuration["SlidingWindowDuration"] is string value184 && !string.IsNullOrEmpty(value184))
            {
                instance.SlidingWindowDuration = ParseSystemTimeSpan(value184, configuration.GetSection("SlidingWindowDuration").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.SlidingWindowDuration = instance.SlidingWindowDuration;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.EventCounterShortcuts.ThreadpoolQueueLengthOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.EventCounterShortcuts.ThreadpoolQueueLengthOptions), s_configKeys_ThreadpoolQueueLengthOptions, configuration, binderOptions);

            if (configuration["GreaterThan"] is string value185 && !string.IsNullOrEmpty(value185))
            {
                instance.GreaterThan = ParseDouble(value185, configuration.GetSection("GreaterThan").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.GreaterThan = instance.GreaterThan;
            }

            if (configuration["LessThan"] is string value186 && !string.IsNullOrEmpty(value186))
            {
                instance.LessThan = ParseDouble(value186, configuration.GetSection("LessThan").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.LessThan = instance.LessThan;
            }

            if (configuration["SlidingWindowDuration"] is string value187 && !string.IsNullOrEmpty(value187))
            {
                instance.SlidingWindowDuration = ParseSystemTimeSpan(value187, configuration.GetSection("SlidingWindowDuration").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.SlidingWindowDuration = instance.SlidingWindowDuration;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.EventMeterOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.EventMeterOptions), s_configKeys_EventMeterOptions, configuration, binderOptions);

            if (configuration["MeterName"] is string value188)
            {
                instance.MeterName = value188;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.MeterName;
                if (currentValue is not null)
                {
                    instance.MeterName = currentValue;
                }
            }

            if (configuration["InstrumentName"] is string value189)
            {
                instance.InstrumentName = value189;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.InstrumentName;
                if (currentValue is not null)
                {
                    instance.InstrumentName = currentValue;
                }
            }

            if (configuration["GreaterThan"] is string value190 && !string.IsNullOrEmpty(value190))
            {
                instance.GreaterThan = ParseDouble(value190, configuration.GetSection("GreaterThan").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.GreaterThan = instance.GreaterThan;
            }

            if (configuration["LessThan"] is string value191 && !string.IsNullOrEmpty(value191))
            {
                instance.LessThan = ParseDouble(value191, configuration.GetSection("LessThan").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.LessThan = instance.LessThan;
            }

            if (configuration["SlidingWindowDuration"] is string value192 && !string.IsNullOrEmpty(value192))
            {
                instance.SlidingWindowDuration = ParseSystemTimeSpan(value192, configuration.GetSection("SlidingWindowDuration").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.SlidingWindowDuration = instance.SlidingWindowDuration;
            }

            if (configuration["HistogramPercentile"] is string value193 && !string.IsNullOrEmpty(value193))
            {
                instance.HistogramPercentile = ParseInt(value193, configuration.GetSection("HistogramPercentile").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.HistogramPercentile = instance.HistogramPercentile;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.Egress.FileSystem.FileSystemEgressProviderOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.Egress.FileSystem.FileSystemEgressProviderOptions), s_configKeys_FileSystemEgressProviderOptions, configuration, binderOptions);

            if (configuration["DirectoryPath"] is string value194)
            {
                instance.DirectoryPath = value194;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.DirectoryPath;
                if (currentValue is not null)
                {
                    instance.DirectoryPath = currentValue;
                }
            }

            if (configuration["IntermediateDirectoryPath"] is string value195)
            {
                instance.IntermediateDirectoryPath = value195;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.IntermediateDirectoryPath;
                if (currentValue is not null)
                {
                    instance.IntermediateDirectoryPath = currentValue;
                }
            }

            if (configuration["CopyBufferSize"] is string value196 && !string.IsNullOrEmpty(value196))
            {
                instance.CopyBufferSize = ParseInt(value196, configuration.GetSection("CopyBufferSize").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.CopyBufferSize = instance.CopyBufferSize;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::System.Collections.Generic.List<string> instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (section.Value is string value)
                {
                    instance.Add(value);
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Monitoring.WebApi.MetricProvider instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Monitoring.WebApi.MetricProvider), s_configKeys_MetricProvider, configuration, binderOptions);

            if (configuration["ProviderName"] is string value197)
            {
                instance.ProviderName = value197;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.ProviderName;
                if (currentValue is not null)
                {
                    instance.ProviderName = currentValue;
                }
            }

            if (AsConfigWithChildren(configuration.GetSection("CounterNames")) is IConfigurationSection section198)
            {
                global::System.Collections.Generic.List<string>? temp200 = instance.CounterNames;
                temp200 ??= new global::System.Collections.Generic.List<string>();
                BindCore(section198, ref temp200, defaultValueIfNotFound: false, binderOptions);
                instance.CounterNames = temp200;
            }
            else
            {
                instance.CounterNames = instance.CounterNames;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::System.Collections.Generic.List<global::Microsoft.Diagnostics.Monitoring.WebApi.MetricProvider> instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (!string.IsNullOrEmpty(section.Value) && !section.GetChildren().Any())
                {
                    continue;
                }
                var value = new global::Microsoft.Diagnostics.Monitoring.WebApi.MetricProvider();
                BindCore(section, ref value, defaultValueIfNotFound: false, binderOptions);
                instance.Add(value);
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Monitoring.WebApi.MeterConfiguration instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Monitoring.WebApi.MeterConfiguration), s_configKeys_MeterConfiguration, configuration, binderOptions);

            if (configuration["MeterName"] is string value202)
            {
                instance.MeterName = value202;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.MeterName;
                if (currentValue is not null)
                {
                    instance.MeterName = currentValue;
                }
            }

            if (AsConfigWithChildren(configuration.GetSection("InstrumentNames")) is IConfigurationSection section203)
            {
                global::System.Collections.Generic.List<string>? temp205 = instance.InstrumentNames;
                temp205 ??= new global::System.Collections.Generic.List<string>();
                BindCore(section203, ref temp205, defaultValueIfNotFound: false, binderOptions);
                instance.InstrumentNames = temp205;
            }
            else
            {
                instance.InstrumentNames = instance.InstrumentNames;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::System.Collections.Generic.List<global::Microsoft.Diagnostics.Monitoring.WebApi.MeterConfiguration> instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (!string.IsNullOrEmpty(section.Value) && !section.GetChildren().Any())
                {
                    continue;
                }
                var value = new global::Microsoft.Diagnostics.Monitoring.WebApi.MeterConfiguration();
                BindCore(section, ref value, defaultValueIfNotFound: false, binderOptions);
                instance.Add(value);
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Monitoring.WebApi.MetricsOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Monitoring.WebApi.MetricsOptions), s_configKeys_MetricsOptions, configuration, binderOptions);

            if (configuration["Enabled"] is string value207 && !string.IsNullOrEmpty(value207))
            {
                instance.Enabled = ParseBool(value207, configuration.GetSection("Enabled").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.Enabled = instance.Enabled;
            }

            if (configuration["Endpoints"] is string value208)
            {
                instance.Endpoints = value208;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.Endpoints;
                if (currentValue is not null)
                {
                    instance.Endpoints = currentValue;
                }
            }

            if (configuration["MetricCount"] is string value209 && !string.IsNullOrEmpty(value209))
            {
                instance.MetricCount = ParseInt(value209, configuration.GetSection("MetricCount").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.MetricCount = instance.MetricCount;
            }

            if (configuration["IncludeDefaultProviders"] is string value210 && !string.IsNullOrEmpty(value210))
            {
                instance.IncludeDefaultProviders = ParseBool(value210, configuration.GetSection("IncludeDefaultProviders").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.IncludeDefaultProviders = instance.IncludeDefaultProviders;
            }

            if (AsConfigWithChildren(configuration.GetSection("Providers")) is IConfigurationSection section211)
            {
                global::System.Collections.Generic.List<global::Microsoft.Diagnostics.Monitoring.WebApi.MetricProvider>? temp213 = instance.Providers;
                temp213 ??= new global::System.Collections.Generic.List<global::Microsoft.Diagnostics.Monitoring.WebApi.MetricProvider>();
                BindCore(section211, ref temp213, defaultValueIfNotFound: false, binderOptions);
                instance.Providers = temp213;
            }
            else
            {
                instance.Providers = instance.Providers;
            }

            if (AsConfigWithChildren(configuration.GetSection("Meters")) is IConfigurationSection section214)
            {
                global::System.Collections.Generic.List<global::Microsoft.Diagnostics.Monitoring.WebApi.MeterConfiguration>? temp216 = instance.Meters;
                temp216 ??= new global::System.Collections.Generic.List<global::Microsoft.Diagnostics.Monitoring.WebApi.MeterConfiguration>();
                BindCore(section214, ref temp216, defaultValueIfNotFound: false, binderOptions);
                instance.Meters = temp216;
            }
            else
            {
                instance.Meters = instance.Meters;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Monitoring.WebApi.CorsConfigurationOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Monitoring.WebApi.CorsConfigurationOptions), s_configKeys_CorsConfigurationOptions, configuration, binderOptions);

            if (configuration["AllowedOrigins"] is string value217)
            {
                instance.AllowedOrigins = value217;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.AllowedOrigins;
                if (currentValue is not null)
                {
                    instance.AllowedOrigins = currentValue;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Monitoring.Options.ExceptionsDebugOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Monitoring.Options.ExceptionsDebugOptions), s_configKeys_ExceptionsDebugOptions, configuration, binderOptions);

            if (configuration["IncludeMonitorExceptions"] is string value218 && !string.IsNullOrEmpty(value218))
            {
                instance.IncludeMonitorExceptions = ParseBool(value218, configuration.GetSection("IncludeMonitorExceptions").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.IncludeMonitorExceptions = instance.IncludeMonitorExceptions;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Monitoring.Options.DotnetMonitorDebugOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Monitoring.Options.DotnetMonitorDebugOptions), s_configKeys_DotnetMonitorDebugOptions, configuration, binderOptions);

            if (AsConfigWithChildren(configuration.GetSection("Exceptions")) is IConfigurationSection section219)
            {
                global::Microsoft.Diagnostics.Monitoring.Options.ExceptionsDebugOptions? temp221 = instance.Exceptions;
                temp221 ??= new global::Microsoft.Diagnostics.Monitoring.Options.ExceptionsDebugOptions();
                BindCore(section219, ref temp221, defaultValueIfNotFound: false, binderOptions);
                instance.Exceptions = temp221;
            }
            else
            {
                instance.Exceptions = instance.Exceptions;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Monitoring.WebApi.GlobalProviderOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Monitoring.WebApi.GlobalProviderOptions), s_configKeys_GlobalProviderOptions, configuration, binderOptions);

            if (configuration["IntervalSeconds"] is string value222 && !string.IsNullOrEmpty(value222))
            {
                instance.IntervalSeconds = ParseFloat(value222, configuration.GetSection("IntervalSeconds").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.IntervalSeconds = instance.IntervalSeconds;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::System.Collections.Generic.IDictionary<string, global::Microsoft.Diagnostics.Monitoring.WebApi.GlobalProviderOptions> instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (!(instance.TryGetValue(section.Key, out global::Microsoft.Diagnostics.Monitoring.WebApi.GlobalProviderOptions? element) && element is not null))
                {
                    element = new global::Microsoft.Diagnostics.Monitoring.WebApi.GlobalProviderOptions();
                }
                BindCore(section, ref element, defaultValueIfNotFound: false, binderOptions);
                instance[section.Key] = element;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Monitoring.WebApi.GlobalCounterOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Monitoring.WebApi.GlobalCounterOptions), s_configKeys_GlobalCounterOptions, configuration, binderOptions);

            if (configuration["IntervalSeconds"] is string value224 && !string.IsNullOrEmpty(value224))
            {
                instance.IntervalSeconds = ParseFloat(value224, configuration.GetSection("IntervalSeconds").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.IntervalSeconds = instance.IntervalSeconds;
            }

            if (configuration["MaxHistograms"] is string value225 && !string.IsNullOrEmpty(value225))
            {
                instance.MaxHistograms = ParseInt(value225, configuration.GetSection("MaxHistograms").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.MaxHistograms = instance.MaxHistograms;
            }

            if (configuration["MaxTimeSeries"] is string value226 && !string.IsNullOrEmpty(value226))
            {
                instance.MaxTimeSeries = ParseInt(value226, configuration.GetSection("MaxTimeSeries").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.MaxTimeSeries = instance.MaxTimeSeries;
            }

            if (AsConfigWithChildren(configuration.GetSection("Providers")) is IConfigurationSection section227)
            {
                global::System.Collections.Generic.IDictionary<string, global::Microsoft.Diagnostics.Monitoring.WebApi.GlobalProviderOptions>? temp229 = instance.Providers;
                temp229 ??= (global::System.Collections.Generic.IDictionary<string, global::Microsoft.Diagnostics.Monitoring.WebApi.GlobalProviderOptions>)new Dictionary<string, global::Microsoft.Diagnostics.Monitoring.WebApi.GlobalProviderOptions>();
                BindCore(section227, ref temp229, defaultValueIfNotFound: false, binderOptions);
                instance.Providers = temp229;
            }
            else
            {
                instance.Providers = instance.Providers;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleTriggerDefaultsOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleTriggerDefaultsOptions), s_configKeys_CollectionRuleTriggerDefaultsOptions, configuration, binderOptions);

            if (configuration["RequestCount"] is string value230 && !string.IsNullOrEmpty(value230))
            {
                instance.RequestCount = ParseInt(value230, configuration.GetSection("RequestCount").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.RequestCount = instance.RequestCount;
            }

            if (configuration["ResponseCount"] is string value231 && !string.IsNullOrEmpty(value231))
            {
                instance.ResponseCount = ParseInt(value231, configuration.GetSection("ResponseCount").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.ResponseCount = instance.ResponseCount;
            }

            if (configuration["SlidingWindowDuration"] is string value232 && !string.IsNullOrEmpty(value232))
            {
                instance.SlidingWindowDuration = ParseSystemTimeSpan(value232, configuration.GetSection("SlidingWindowDuration").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.SlidingWindowDuration = instance.SlidingWindowDuration;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleActionDefaultsOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleActionDefaultsOptions), s_configKeys_CollectionRuleActionDefaultsOptions, configuration, binderOptions);

            if (configuration["Egress"] is string value233)
            {
                instance.Egress = value233;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.Egress;
                if (currentValue is not null)
                {
                    instance.Egress = currentValue;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleLimitsDefaultsOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleLimitsDefaultsOptions), s_configKeys_CollectionRuleLimitsDefaultsOptions, configuration, binderOptions);

            if (configuration["ActionCount"] is string value234 && !string.IsNullOrEmpty(value234))
            {
                instance.ActionCount = ParseInt(value234, configuration.GetSection("ActionCount").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.ActionCount = instance.ActionCount;
            }

            if (configuration["ActionCountSlidingWindowDuration"] is string value235 && !string.IsNullOrEmpty(value235))
            {
                instance.ActionCountSlidingWindowDuration = ParseSystemTimeSpan(value235, configuration.GetSection("ActionCountSlidingWindowDuration").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.ActionCountSlidingWindowDuration = instance.ActionCountSlidingWindowDuration;
            }

            if (configuration["RuleDuration"] is string value236 && !string.IsNullOrEmpty(value236))
            {
                instance.RuleDuration = ParseSystemTimeSpan(value236, configuration.GetSection("RuleDuration").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.RuleDuration = instance.RuleDuration;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleDefaultsOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleDefaultsOptions), s_configKeys_CollectionRuleDefaultsOptions, configuration, binderOptions);

            if (AsConfigWithChildren(configuration.GetSection("Triggers")) is IConfigurationSection section237)
            {
                global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleTriggerDefaultsOptions? temp239 = instance.Triggers;
                temp239 ??= new global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleTriggerDefaultsOptions();
                BindCore(section237, ref temp239, defaultValueIfNotFound: false, binderOptions);
                instance.Triggers = temp239;
            }
            else
            {
                instance.Triggers = instance.Triggers;
            }

            if (AsConfigWithChildren(configuration.GetSection("Actions")) is IConfigurationSection section240)
            {
                global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleActionDefaultsOptions? temp242 = instance.Actions;
                temp242 ??= new global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleActionDefaultsOptions();
                BindCore(section240, ref temp242, defaultValueIfNotFound: false, binderOptions);
                instance.Actions = temp242;
            }
            else
            {
                instance.Actions = instance.Actions;
            }

            if (AsConfigWithChildren(configuration.GetSection("Limits")) is IConfigurationSection section243)
            {
                global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleLimitsDefaultsOptions? temp245 = instance.Limits;
                temp245 ??= new global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleLimitsDefaultsOptions();
                BindCore(section243, ref temp245, defaultValueIfNotFound: false, binderOptions);
                instance.Limits = temp245;
            }
            else
            {
                instance.Limits = instance.Limits;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::System.Collections.Generic.IDictionary<string, global::Microsoft.Diagnostics.Monitoring.WebApi.ProcessFilterDescriptor> instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (!(instance.TryGetValue(section.Key, out global::Microsoft.Diagnostics.Monitoring.WebApi.ProcessFilterDescriptor? element) && element is not null))
                {
                    element = new global::Microsoft.Diagnostics.Monitoring.WebApi.ProcessFilterDescriptor();
                }
                BindCore(section, ref element, defaultValueIfNotFound: false, binderOptions);
                instance[section.Key] = element;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::System.Collections.Generic.IDictionary<string, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleTriggerOptions> instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (!(instance.TryGetValue(section.Key, out global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleTriggerOptions? element) && element is not null))
                {
                    element = new global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleTriggerOptions();
                }
                BindCore(section, ref element, defaultValueIfNotFound: false, binderOptions);
                instance[section.Key] = element;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::System.Collections.Generic.IDictionary<string, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleActionOptions> instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (!(instance.TryGetValue(section.Key, out global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleActionOptions? element) && element is not null))
                {
                    element = new global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleActionOptions();
                }
                BindCore(section, ref element, defaultValueIfNotFound: false, binderOptions);
                instance[section.Key] = element;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::System.Collections.Generic.IDictionary<string, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleLimitsOptions> instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            foreach (IConfigurationSection section in configuration.GetChildren())
            {
                if (!(instance.TryGetValue(section.Key, out global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleLimitsOptions? element) && element is not null))
                {
                    element = new global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleLimitsOptions();
                }
                BindCore(section, ref element, defaultValueIfNotFound: false, binderOptions);
                instance[section.Key] = element;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.TemplateOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.TemplateOptions), s_configKeys_TemplateOptions, configuration, binderOptions);

            if (AsConfigWithChildren(configuration.GetSection("CollectionRuleFilters")) is IConfigurationSection section250)
            {
                global::System.Collections.Generic.IDictionary<string, global::Microsoft.Diagnostics.Monitoring.WebApi.ProcessFilterDescriptor>? temp252 = instance.CollectionRuleFilters;
                temp252 ??= (global::System.Collections.Generic.IDictionary<string, global::Microsoft.Diagnostics.Monitoring.WebApi.ProcessFilterDescriptor>)new Dictionary<string, global::Microsoft.Diagnostics.Monitoring.WebApi.ProcessFilterDescriptor>();
                BindCore(section250, ref temp252, defaultValueIfNotFound: false, binderOptions);
                instance.CollectionRuleFilters = temp252;
            }
            else
            {
                instance.CollectionRuleFilters = instance.CollectionRuleFilters;
            }

            if (AsConfigWithChildren(configuration.GetSection("CollectionRuleTriggers")) is IConfigurationSection section253)
            {
                global::System.Collections.Generic.IDictionary<string, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleTriggerOptions>? temp255 = instance.CollectionRuleTriggers;
                temp255 ??= (global::System.Collections.Generic.IDictionary<string, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleTriggerOptions>)new Dictionary<string, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleTriggerOptions>();
                BindCore(section253, ref temp255, defaultValueIfNotFound: false, binderOptions);
                instance.CollectionRuleTriggers = temp255;
            }
            else
            {
                instance.CollectionRuleTriggers = instance.CollectionRuleTriggers;
            }

            if (AsConfigWithChildren(configuration.GetSection("CollectionRuleActions")) is IConfigurationSection section256)
            {
                global::System.Collections.Generic.IDictionary<string, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleActionOptions>? temp258 = instance.CollectionRuleActions;
                temp258 ??= (global::System.Collections.Generic.IDictionary<string, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleActionOptions>)new Dictionary<string, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleActionOptions>();
                BindCore(section256, ref temp258, defaultValueIfNotFound: false, binderOptions);
                instance.CollectionRuleActions = temp258;
            }
            else
            {
                instance.CollectionRuleActions = instance.CollectionRuleActions;
            }

            if (AsConfigWithChildren(configuration.GetSection("CollectionRuleLimits")) is IConfigurationSection section259)
            {
                global::System.Collections.Generic.IDictionary<string, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleLimitsOptions>? temp261 = instance.CollectionRuleLimits;
                temp261 ??= (global::System.Collections.Generic.IDictionary<string, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleLimitsOptions>)new Dictionary<string, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleLimitsOptions>();
                BindCore(section259, ref temp261, defaultValueIfNotFound: false, binderOptions);
                instance.CollectionRuleLimits = temp261;
            }
            else
            {
                instance.CollectionRuleLimits = instance.CollectionRuleLimits;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Monitoring.Options.CallStacksOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Monitoring.Options.CallStacksOptions), s_configKeys_CallStacksOptions, configuration, binderOptions);

            if (configuration["Enabled"] is string value262 && !string.IsNullOrEmpty(value262))
            {
                instance.Enabled = ParseBool(value262, configuration.GetSection("Enabled").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.Enabled = instance.Enabled;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Monitoring.Options.ExceptionsOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Monitoring.Options.ExceptionsOptions), s_configKeys_ExceptionsOptions, configuration, binderOptions);

            if (configuration["Enabled"] is string value263 && !string.IsNullOrEmpty(value263))
            {
                instance.Enabled = ParseBool(value263, configuration.GetSection("Enabled").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.Enabled = instance.Enabled;
            }

            if (configuration["TopLevelLimit"] is string value264 && !string.IsNullOrEmpty(value264))
            {
                instance.TopLevelLimit = ParseInt(value264, configuration.GetSection("TopLevelLimit").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.TopLevelLimit = instance.TopLevelLimit;
            }

            if (AsConfigWithChildren(configuration.GetSection("CollectionFilters")) is IConfigurationSection section265)
            {
                global::Microsoft.Diagnostics.Monitoring.Options.ExceptionsConfiguration? temp267 = instance.CollectionFilters;
                temp267 ??= new global::Microsoft.Diagnostics.Monitoring.Options.ExceptionsConfiguration();
                BindCore(section265, ref temp267, defaultValueIfNotFound: false, binderOptions);
                instance.CollectionFilters = temp267;
            }
            else
            {
                instance.CollectionFilters = instance.CollectionFilters;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Monitoring.Options.ParameterCapturingOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Monitoring.Options.ParameterCapturingOptions), s_configKeys_ParameterCapturingOptions, configuration, binderOptions);

            if (configuration["Enabled"] is string value268 && !string.IsNullOrEmpty(value268))
            {
                instance.Enabled = ParseBool(value268, configuration.GetSection("Enabled").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.Enabled = instance.Enabled;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Monitoring.Options.InProcessFeaturesOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Monitoring.Options.InProcessFeaturesOptions), s_configKeys_InProcessFeaturesOptions, configuration, binderOptions);

            if (configuration["Enabled"] is string value269 && !string.IsNullOrEmpty(value269))
            {
                instance.Enabled = ParseBool(value269, configuration.GetSection("Enabled").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.Enabled = instance.Enabled;
            }

            if (AsConfigWithChildren(configuration.GetSection("CallStacks")) is IConfigurationSection section270)
            {
                global::Microsoft.Diagnostics.Monitoring.Options.CallStacksOptions? temp272 = instance.CallStacks;
                temp272 ??= new global::Microsoft.Diagnostics.Monitoring.Options.CallStacksOptions();
                BindCore(section270, ref temp272, defaultValueIfNotFound: false, binderOptions);
                instance.CallStacks = temp272;
            }
            else
            {
                instance.CallStacks = instance.CallStacks;
            }

            if (AsConfigWithChildren(configuration.GetSection("Exceptions")) is IConfigurationSection section273)
            {
                global::Microsoft.Diagnostics.Monitoring.Options.ExceptionsOptions? temp275 = instance.Exceptions;
                temp275 ??= new global::Microsoft.Diagnostics.Monitoring.Options.ExceptionsOptions();
                BindCore(section273, ref temp275, defaultValueIfNotFound: false, binderOptions);
                instance.Exceptions = temp275;
            }
            else
            {
                instance.Exceptions = instance.Exceptions;
            }

            if (AsConfigWithChildren(configuration.GetSection("ParameterCapturing")) is IConfigurationSection section276)
            {
                global::Microsoft.Diagnostics.Monitoring.Options.ParameterCapturingOptions? temp278 = instance.ParameterCapturing;
                temp278 ??= new global::Microsoft.Diagnostics.Monitoring.Options.ParameterCapturingOptions();
                BindCore(section276, ref temp278, defaultValueIfNotFound: false, binderOptions);
                instance.ParameterCapturing = temp278;
            }
            else
            {
                instance.ParameterCapturing = instance.ParameterCapturing;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Monitoring.WebApi.StorageOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Monitoring.WebApi.StorageOptions), s_configKeys_StorageOptions, configuration, binderOptions);

            if (configuration["DefaultSharedPath"] is string value279)
            {
                instance.DefaultSharedPath = value279;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.DefaultSharedPath;
                if (currentValue is not null)
                {
                    instance.DefaultSharedPath = currentValue;
                }
            }

            if (configuration["DumpTempFolder"] is string value280)
            {
                instance.DumpTempFolder = value280;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.DumpTempFolder;
                if (currentValue is not null)
                {
                    instance.DumpTempFolder = currentValue;
                }
            }

            if (configuration["SharedLibraryPath"] is string value281)
            {
                instance.SharedLibraryPath = value281;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.SharedLibraryPath;
                if (currentValue is not null)
                {
                    instance.SharedLibraryPath = currentValue;
                }
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Monitoring.WebApi.ProcessFilterOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Monitoring.WebApi.ProcessFilterOptions), s_configKeys_ProcessFilterOptions, configuration, binderOptions);

            if (AsConfigWithChildren(configuration.GetSection("Filters")) is IConfigurationSection section282)
            {
                global::System.Collections.Generic.List<global::Microsoft.Diagnostics.Monitoring.WebApi.ProcessFilterDescriptor>? temp284 = instance.Filters;
                temp284 ??= new global::System.Collections.Generic.List<global::Microsoft.Diagnostics.Monitoring.WebApi.ProcessFilterDescriptor>();
                BindCore(section282, ref temp284, defaultValueIfNotFound: false, binderOptions);
                instance.Filters = temp284;
            }
            else
            {
                instance.Filters = instance.Filters;
            }
        }

        public static void BindCore(IConfiguration configuration, ref global::Microsoft.Diagnostics.Monitoring.WebApi.DiagnosticPortOptions instance, bool defaultValueIfNotFound, BinderOptions? binderOptions)
        {
            ValidateConfigurationKeys(typeof(global::Microsoft.Diagnostics.Monitoring.WebApi.DiagnosticPortOptions), s_configKeys_DiagnosticPortOptions, configuration, binderOptions);

            if (configuration["ConnectionMode"] is string value285 && !string.IsNullOrEmpty(value285))
            {
                instance.ConnectionMode = ParseEnum<global::Microsoft.Diagnostics.Monitoring.WebApi.DiagnosticPortConnectionMode>(value285, configuration.GetSection("ConnectionMode").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.ConnectionMode = instance.ConnectionMode;
            }

            if (configuration["EndpointName"] is string value286)
            {
                instance.EndpointName = value286;
            }
            else if (defaultValueIfNotFound)
            {
                var currentValue = instance.EndpointName;
                if (currentValue is not null)
                {
                    instance.EndpointName = currentValue;
                }
            }

            if (configuration["MaxConnections"] is string value287 && !string.IsNullOrEmpty(value287))
            {
                instance.MaxConnections = ParseInt(value287, configuration.GetSection("MaxConnections").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.MaxConnections = instance.MaxConnections;
            }

            if (configuration["DeleteEndpointOnStartup"] is string value288 && !string.IsNullOrEmpty(value288))
            {
                instance.DeleteEndpointOnStartup = ParseBool(value288, configuration.GetSection("DeleteEndpointOnStartup").Path);
            }
            else if (defaultValueIfNotFound)
            {
                instance.DeleteEndpointOnStartup = instance.DeleteEndpointOnStartup;
            }
        }

        public static global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.ErrorValidationResult InitializeErrorValidationResult(IConfiguration configuration, BinderOptions? binderOptions)
        {
            if (configuration["Message"] is not string message)
            {
                throw new InvalidOperationException("Cannot create instance of type 'Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.ErrorValidationResult' because parameter 'message' has no matching config. Each parameter in the constructor that does not have a default value must have a corresponding config entry.");
            }

            if (configuration["MemberName"] is not string memberName)
            {
                throw new InvalidOperationException("Cannot create instance of type 'Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.ErrorValidationResult' because parameter 'memberName' has no matching config. Each parameter in the constructor that does not have a default value must have a corresponding config entry.");
            }

            return new global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.ErrorValidationResult(message, memberName);
        }


        /// <summary>If required by the binder options, validates that there are no unknown keys in the input configuration object.</summary>
        public static void ValidateConfigurationKeys(Type type, Lazy<HashSet<string>> keys, IConfiguration configuration, BinderOptions? binderOptions)
        {
            if (binderOptions?.ErrorOnUnknownConfiguration is true)
            {
                List<string>? temp = null;
        
                foreach (IConfigurationSection section in configuration.GetChildren())
                {
                    if (!keys.Value.Contains(section.Key))
                    {
                        (temp ??= new List<string>()).Add($"'{section.Key}'");
                    }
                }
        
                if (temp is not null)
                {
                    throw new InvalidOperationException($"'ErrorOnUnknownConfiguration' was set on the provided BinderOptions, but the following properties were not found on the instance of {type}: {string.Join(", ", temp)}");
                }
            }
        }

        public static bool HasValueOrChildren(IConfiguration configuration)
        {
            if ((configuration as IConfigurationSection)?.Value is not null)
            {
                return true;
            }
            return AsConfigWithChildren(configuration) is not null;
        }

        public static IConfiguration? AsConfigWithChildren(IConfiguration configuration)
        {
            foreach (IConfigurationSection _ in configuration.GetChildren())
            {
                return configuration;
            }
            return null;
        }

        public static BinderOptions? GetBinderOptions(Action<BinderOptions>? configureOptions)
        {
            if (configureOptions is null)
            {
                return null;
            }
        
            BinderOptions binderOptions = new();
            configureOptions(binderOptions);
        
            if (binderOptions.BindNonPublicProperties)
            {
                throw new NotSupportedException($"The configuration binding source generator does not support 'BinderOptions.BindNonPublicProperties'.");
            }
        
            return binderOptions;
        }

        public static T ParseEnum<T>(string value, string? path) where T : struct
        {
            try
            {
                return Enum.Parse<T>(value, ignoreCase: true);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{path}' to type '{typeof(T)}'.", exception);
            }
        }

        public static global::System.Uri ParseSystemUri(string value, string? path)
        {
            try
            {
                return new Uri(value, UriKind.RelativeOrAbsolute);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{path}' to type '{typeof(global::System.Uri)}'.", exception);
            }
        }

        public static bool ParseBool(string value, string? path)
        {
            try
            {
                return bool.Parse(value);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{path}' to type '{typeof(bool)}'.", exception);
            }
        }

        public static global::System.TimeSpan ParseSystemTimeSpan(string value, string? path)
        {
            try
            {
                return global::System.TimeSpan.Parse(value, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{path}' to type '{typeof(global::System.TimeSpan)}'.", exception);
            }
        }

        public static int ParseInt(string value, string? path)
        {
            try
            {
                return int.Parse(value, NumberStyles.Integer, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{path}' to type '{typeof(int)}'.", exception);
            }
        }

        public static global::System.Guid ParseSystemGuid(string value, string? path)
        {
            try
            {
                return global::System.Guid.Parse(value);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{path}' to type '{typeof(global::System.Guid)}'.", exception);
            }
        }

        public static double ParseDouble(string value, string? path)
        {
            try
            {
                return double.Parse(value, NumberStyles.Float, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{path}' to type '{typeof(double)}'.", exception);
            }
        }

        public static float ParseFloat(string value, string? path)
        {
            try
            {
                return float.Parse(value, NumberStyles.Float, CultureInfo.InvariantCulture);
            }
            catch (Exception exception)
            {
                throw new InvalidOperationException($"Failed to convert configuration value at '{path}' to type '{typeof(float)}'.", exception);
            }
        }
        #endregion Core binding extensions.
    }
}
