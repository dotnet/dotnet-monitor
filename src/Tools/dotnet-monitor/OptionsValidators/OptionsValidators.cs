// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using Microsoft.Extensions.Options;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Globalization;

// <auto-generated/>
#nullable enable
#pragma warning disable CS1591 // Compensate for https://github.com/dotnet/roslyn/issues/54103
namespace Microsoft.Diagnostics.Monitoring.WebApi
{
    internal sealed partial class __MetricProviderValidator__
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        public static ValidateOptionsResult Validate(string? name, MetricProvider options)
        {
            ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "MetricProvider.Validate" : $"{name}.Validate";
            var context = new ValidationContext(options, displayName, null, null);
            var validationResults = new List<ValidationResult>();
            var validationAttributes = new List<ValidationAttribute>(1);

            context.MemberName = "ProviderName";
            context.DisplayName = "MetricProvider.ProviderName";
            validationAttributes.Add(__OptionValidationStaticInstances.__Attributes.A1);
            if (!Validator.TryValidateValue(options.ProviderName, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            return builder is null ? ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Monitoring.WebApi
{
    partial class GlobalCounterOptionsValidator
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        public ValidateOptionsResult Validate(string? name, GlobalCounterOptions options)
        {
            ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "GlobalCounterOptions.Validate" : $"{name}.Validate";
            var context = new ValidationContext(options, displayName, _serviceProvider, null);
            var validationResults = new List<ValidationResult>();
            var validationAttributes = new List<ValidationAttribute>(1);

            context.MemberName = "IntervalSeconds";
            context.DisplayName = "GlobalCounterOptions.IntervalSeconds";
            validationAttributes.Add(__OptionValidationStaticInstances.__Attributes.A2);
            if (!Validator.TryValidateValue(options.IntervalSeconds, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "MaxHistograms";
            context.DisplayName = "GlobalCounterOptions.MaxHistograms";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(__OptionValidationStaticInstances.__Attributes.A3);
            if (!Validator.TryValidateValue(options.MaxHistograms, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "MaxTimeSeries";
            context.DisplayName = "GlobalCounterOptions.MaxTimeSeries";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(__OptionValidationStaticInstances.__Attributes.A3);
            if (!Validator.TryValidateValue(options.MaxTimeSeries, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "Validate";
            context.DisplayName = string.IsNullOrEmpty(name) ? "GlobalCounterOptions.Validate" : $"{name}.Validate";
            (builder ??= new()).AddResults(((IValidatableObject)options).Validate(context));

            return builder is null ? ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Monitoring.WebApi
{
    partial class GlobalProviderOptionsValidator
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        public ValidateOptionsResult Validate(string? name, GlobalProviderOptions options)
        {
            ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "GlobalProviderOptions.Validate" : $"{name}.Validate";
            var context = new ValidationContext(options, displayName, null, null);
            var validationResults = new List<ValidationResult>();
            var validationAttributes = new List<ValidationAttribute>(1);

            context.MemberName = "IntervalSeconds";
            context.DisplayName = "GlobalProviderOptions.IntervalSeconds";
            validationAttributes.Add(__OptionValidationStaticInstances.__Attributes.A2);
            if (!Validator.TryValidateValue(options.IntervalSeconds, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            return builder is null ? ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Monitoring.WebApi
{
    partial class MetricsOptionsValidator
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        public ValidateOptionsResult Validate(string? name, MetricsOptions options)
        {
            ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "MetricsOptions.Validate" : $"{name}.Validate";
            var context = new ValidationContext(options, displayName, null, null);
            var validationResults = new List<ValidationResult>();
            var validationAttributes = new List<ValidationAttribute>(1);

            context.MemberName = "MetricCount";
            context.DisplayName = "MetricsOptions.MetricCount";
            validationAttributes.Add(__OptionValidationStaticInstances.__Attributes.A3);
            if (!Validator.TryValidateValue(options.MetricCount, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            if (options.Providers is not null)
            {
                var count = 0;
                foreach (var o in options.Providers)
                {
                    if (o is not null)
                    {
                        (builder ??= new()).AddResult(__MetricProviderValidator__.Validate(string.IsNullOrEmpty(name) ? $"MetricsOptions.Providers[{count}]" : $"{name}.Providers[{count}]", o));
                    }
                    else
                    {
                        (builder ??= new()).AddError(string.IsNullOrEmpty(name) ? $"MetricsOptions.Providers[{count}] is null" : $"{name}.Providers[{count}] is null");
                    }
                    count++;
                }
            }

            return builder is null ? ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Tools.Monitor.Egress.FileSystem
{
    partial class FileSystemEgressProviderOptionsValidator
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        public ValidateOptionsResult Validate(string? name, FileSystemEgressProviderOptions options)
        {
            ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "FileSystemEgressProviderOptions.Validate" : $"{name}.Validate";
            var context = new ValidationContext(options, displayName, null, null);
            var validationResults = new List<ValidationResult>();
            var validationAttributes = new List<ValidationAttribute>(1);

            context.MemberName = "DirectoryPath";
            context.DisplayName = "FileSystemEgressProviderOptions.DirectoryPath";
            validationAttributes.Add(__OptionValidationStaticInstances.__Attributes.A1);
            if (!Validator.TryValidateValue(options.DirectoryPath, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "CopyBufferSize";
            context.DisplayName = "FileSystemEgressProviderOptions.CopyBufferSize";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(__OptionValidationStaticInstances.__Attributes.A3);
            if (!Validator.TryValidateValue(options.CopyBufferSize, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            return builder is null ? ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace __OptionValidationStaticInstances
{
    static class __Attributes
    {
        internal static readonly RequiredAttribute A1 = new RequiredAttribute();

        internal static readonly __OptionValidationGeneratedAttributes.__SourceGen__RangeAttribute A2 = new __OptionValidationGeneratedAttributes.__SourceGen__RangeAttribute(
            (double)1,
            (double)86400);

        internal static readonly __OptionValidationGeneratedAttributes.__SourceGen__RangeAttribute A3 = new __OptionValidationGeneratedAttributes.__SourceGen__RangeAttribute(
            (int)1,
            (int)2147483647);
    }
}
namespace __OptionValidationGeneratedAttributes
{
    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false)]
    class __SourceGen__RangeAttribute : ValidationAttribute
    {
        public __SourceGen__RangeAttribute(int minimum, int maximum) : base()
        {
            Minimum = minimum;
            Maximum = maximum;
            OperandType = typeof(int);
        }
        public __SourceGen__RangeAttribute(double minimum, double maximum) : base()
        {
            Minimum = minimum;
            Maximum = maximum;
            OperandType = typeof(double);
        }
        public __SourceGen__RangeAttribute(Type type, string minimum, string maximum) : base()
        {
            OperandType = type;
            _needToConvertMinMax = true;
            Minimum = minimum;
            Maximum = maximum;
        }
        public object Minimum { get; private set; }
        public object Maximum { get; private set; }
        public bool MinimumIsExclusive { get; set; }
        public bool MaximumIsExclusive { get; set; }
        public Type OperandType { get; }
        public bool ParseLimitsInInvariantCulture { get; set; }
        public bool ConvertValueInInvariantCulture { get; set; }
        public override string FormatErrorMessage(string name) =>
                string.Format(CultureInfo.CurrentCulture, GetValidationErrorMessage(), name, Minimum, Maximum);
        private readonly bool _needToConvertMinMax;
        private volatile bool _initialized;
        private readonly object _lock = new();
        private const string MinMaxError = "The minimum and maximum values must be set to valid values.";

        public override bool IsValid(object? value)
        {
            if (!_initialized)
            {
                lock (_lock)
                {
                    if (!_initialized)
                    {
                        if (Minimum is null || Maximum is null)
                        {
                            throw new InvalidOperationException(MinMaxError);
                        }
                        if (_needToConvertMinMax)
                        {
                            CultureInfo culture = ParseLimitsInInvariantCulture ? CultureInfo.InvariantCulture : CultureInfo.CurrentCulture;
                            Minimum = ConvertValue(Minimum, culture) ?? throw new InvalidOperationException(MinMaxError);
                            Maximum = ConvertValue(Maximum, culture) ?? throw new InvalidOperationException(MinMaxError);
                        }
                        int cmp = ((IComparable)Minimum).CompareTo((IComparable)Maximum);
                        if (cmp > 0)
                        {
                            throw new InvalidOperationException("The maximum value '{Maximum}' must be greater than or equal to the minimum value '{Minimum}'.");
                        }
                        else if (cmp == 0 && (MinimumIsExclusive || MaximumIsExclusive))
                        {
                            throw new InvalidOperationException("Cannot use exclusive bounds when the maximum value is equal to the minimum value.");
                        }
                        _initialized = true;
                    }
                }
            }

            if (value is null or string { Length: 0 })
            {
                return true;
            }

            CultureInfo formatProvider = ConvertValueInInvariantCulture ? CultureInfo.InvariantCulture : CultureInfo.CurrentCulture;
            object? convertedValue;

            try
            {
                convertedValue = ConvertValue(value, formatProvider);
            }
            catch (Exception e) when (e is FormatException or InvalidCastException or NotSupportedException)
            {
                return false;
            }

            var min = (IComparable)Minimum;
            var max = (IComparable)Maximum;

            return
                (MinimumIsExclusive ? min.CompareTo(convertedValue) < 0 : min.CompareTo(convertedValue) <= 0) &&
                (MaximumIsExclusive ? max.CompareTo(convertedValue) > 0 : max.CompareTo(convertedValue) >= 0);
        }
        private string GetValidationErrorMessage()
        {
            return (MinimumIsExclusive, MaximumIsExclusive) switch
            {
                (false, false) => "The field {0} must be between {1} and {2}.",
                (true, false) => "The field {0} must be between {1} exclusive and {2}.",
                (false, true) => "The field {0} must be between {1} and {2} exclusive.",
                (true, true) => "The field {0} must be between {1} exclusive and {2} exclusive.",
            };
        }
        private object? ConvertValue(object? value, CultureInfo formatProvider)
        {
            if (value is string stringValue)
            {
                value = Convert.ChangeType(stringValue, OperandType, formatProvider);
            }
            else
            {
                value = Convert.ChangeType(value, OperandType, formatProvider);
            }
            return value;
        }
    }
}
