<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFrameworks>$(ToolTargetFrameworks)</TargetFrameworks>
    <RootNamespace>Microsoft.Diagnostics.Tools.Monitor</RootNamespace>
    <ToolCommandName>dotnet-monitor</ToolCommandName>
    <Description>.NET Core Diagnostic Monitoring Tool</Description>
    <PackageTags>Diagnostic</PackageTags>
    <PackageReleaseNotes>$(Description)</PackageReleaseNotes>
    <RollForward>Major</RollForward>
    <!-- File locking warnings (that are typically resolved with automatic retries) are failing builds
         quite frequently with messages such as:
         
         error MSB3026: (NETCORE_ENGINEERING_TELEMETRY=Build) Could not copy "...\dotnet-monitor.dll" to
         "...\dotnet-monitor.dll". Beginning retry 1 in 1000ms. The process cannot access the file
         '...\dotnet-monitor.dll' because it is being used by another process.
         
         work around this problem by telling the compiler to not warn about the issue. A file lock that
         actually prevents the build from completing correctly should still fail the compilation with
         an MSB3027 error. -->
    <NoWarn>$(NoWarn);MSB3026</NoWarn>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Azure.Identity" Version="$(AzureIdentityVersion)" />
    <PackageReference Include="Azure.Storage.Blobs" Version="$(AzureStorageBlobsVersion)" />
    <PackageReference Include="Azure.Storage.Queues" Version="$(AzureStorageQueuesVersion)" />
    <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="$(MicrosoftAspNetCoreAuthenticationJwtBearerVersion)" />
    <PackageReference Include="Microsoft.AspNetCore.Authentication.Negotiate" Version="$(MicrosoftAspNetCoreAuthenticationNegotiateVersion)" />
    <!-- Used to upgrade to a higher version than what is provided from indirect dependencies. -->
    <PackageReference Include="Newtonsoft.Json" Version="$(NewtonsoftJsonVersion)" />
    <PackageReference Include="System.CommandLine" Version="$(SystemCommandLineVersion)" />
    <PackageReference Include="System.IdentityModel.Tokens.Jwt" Version="$(MicrosoftIdentityModelTokensVersion)" />
  </ItemGroup>

  <ItemGroup Condition="'$(TargetFramework)' == 'netcoreapp3.1'">
    <PackageReference Include="Microsoft.Extensions.Configuration.KeyPerFile" Version="$(MicrosoftExtensionsConfigurationKeyPerFileVersion)" />
    <PackageReference Include="Microsoft.Extensions.Hosting" Version="$(MicrosoftExtensionsHostingVersion)" />
    <PackageReference Include="Microsoft.Extensions.Logging.Console" Version="$(MicrosoftExtensionsLoggingConsoleVersion)" />
  </ItemGroup>

  <ItemGroup Condition="'$(DIAGNOSTICS_REPO_ROOT)' == ''">
    <PackageReference Include="Microsoft.Diagnostics.Monitoring" Version="$(MicrosoftDiagnosticsMonitoringVersion)" />
  </ItemGroup>

  <ItemGroup Condition="'$(DIAGNOSTICS_REPO_ROOT)' != ''">
    <ProjectReference Include="$(DIAGNOSTICS_REPO_ROOT)\src\Microsoft.Diagnostics.Monitoring\Microsoft.Diagnostics.Monitoring.csproj" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\Microsoft.Diagnostics.Monitoring.Options\Microsoft.Diagnostics.Monitoring.Options.csproj" />
    <ProjectReference Include="..\..\Microsoft.Diagnostics.Monitoring.WebApi\Microsoft.Diagnostics.Monitoring.WebApi.csproj" />
  </ItemGroup>

  <ItemGroup>
    <InternalsVisibleTo Include="Microsoft.Diagnostics.Monitoring.ConfigurationSchema" />
    <InternalsVisibleTo Include="Microsoft.Diagnostics.Monitoring.OpenApiGen" />
    <InternalsVisibleTo Include="Microsoft.Diagnostics.Monitoring.Tool.UnitTests" />
  </ItemGroup>

  <ItemGroup>
    <Compile Update="Strings.Designer.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>Strings.resx</DependentUpon>
    </Compile>
    <EmbeddedResource Update="Strings.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Strings.Designer.cs</LastGenOutput>
    </EmbeddedResource>
  </ItemGroup>

  <ItemGroup>
    <!-- Profiler library items for all of the native platforms. -->
    <MonitorProfilerLibraryFile Include="@(NativeArtifactDirectories->'%(Identity)\%(LibraryPrefix)MonitorProfiler%(LibraryExtension)')">
      <PackagePath>tools/$(TargetFramework)/any/shared/%(TargetRid)/native</PackagePath>
      <PublishSubPath>shared/%(TargetRid)/native</PublishSubPath>
    </MonitorProfilerLibraryFile>
  </ItemGroup>
  <ItemGroup>
    <!-- Profiler symbols items for all of the native platforms. -->
    <MonitorProfilerSymbolsFile Include="@(NativeArtifactDirectories->'%(Identity)\%(LibraryPrefix)MonitorProfiler%(SymbolsExtension)')">
      <PackagePath>tools/$(TargetFramework)/any/shared/%(TargetRid)/native</PackagePath>
      <PublishSubPath>shared/%(TargetRid)/native</PublishSubPath>
    </MonitorProfilerSymbolsFile>
  </ItemGroup>

  <PropertyGroup>
    <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);GatherTfmNativeFilesInPackage</TargetsForTfmSpecificContentInPackage>
  </PropertyGroup>

  <!-- Don't include profiler files in official builds until productized. -->
  <Target Name="GatherTfmNativeFilesInPackage" Condition="'$(ContinuousIntegrationBuild)' != 'true'">
    <ItemGroup>
      <!-- Pack the profiler library for each platform if it exists. -->
      <TfmSpecificPackageFile Include="@(MonitorProfilerLibraryFile->Exists())" />
      <!-- Pack the profiler symbols for each platform if it exists. -->
      <TfmSpecificPackageFile Include="@(MonitorProfilerSymbolsFile->Exists())" />
    </ItemGroup>
  </Target>

  <Target Name="IncludeProfilerFilesToPublish"
          AfterTargets="ComputeFilesToPublish"
          Condition="'$(ContinuousIntegrationBuild)' != 'true'">
    <ItemGroup>
      <!-- Include the profiler library for the corresponding platform if it exists. -->
      <ResolvedFileToPublish Include="@(MonitorProfilerLibraryFile-&gt;Exists())"
                             Condition="'%(MonitorProfilerLibraryFile.TargetRid)' == '$(RuntimeIdentifier)'">
        <RelativePath>%(MonitorProfilerLibraryFile.PublishSubPath)\%(Filename)%(Extension)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </ResolvedFileToPublish>
      <!-- Include the profiler symbols for the corresponding platform if it exists. -->
      <ResolvedFileToPublish Include="@(MonitorProfilerSymbolsFile-&gt;Exists())"
                             Condition="'%(MonitorProfilerSymbolsFile.TargetRid)' == '$(RuntimeIdentifier)'">
        <RelativePath>%(MonitorProfilerSymbolsFile.PublishSubPath)\%(Filename)%(Extension)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>

</Project>
