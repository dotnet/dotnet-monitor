<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrorMessage_ApiKeyNotConfigured" xml:space="preserve">
    <value>API key authentication not configured.</value>
    <comment>Gets a string similar to "API key authentication not configured.".</comment>
  </data>
  <data name="ErrorMessage_CouldNotMapToAction" xml:space="preserve">
    <value>The '{0}' action was not registered correctly.</value>
    <comment>Gets the format string for invalid mapping from a string to an ICollectionRuleActionProxy.</comment>
  </data>
  <data name="ErrorMessage_CouldNotMapToTrigger" xml:space="preserve">
    <value>The '{0}' trigger was not registered correctly.</value>
    <comment>Gets the format string for invalid mapping from a string to an ICollectionRuleTriggerProxy.</comment>
  </data>
  <data name="ErrorMessage_DiagnosticPortMissingInListenMode" xml:space="preserve">
    <value>In 'Listen' mode, the diagnostic port endpoint name must be specified.</value>
    <comment>Gets a string similar to "In 'Listen' mode, the diagnostic port endpoint name must be specified.".</comment>
  </data>
  <data name="ErrorMessage_EgressAzureFailedDetailed" xml:space="preserve">
    <value>Azure blob egress failed: {0}</value>
    <comment>Gets the format string for egress failure to Azure blob (with an inner message).
1 Format Parameter:
0. innerMessage: The detailed inner message with additional error context.</comment>
  </data>
  <data name="ErrorMessage_EgressAzureFailedGeneric" xml:space="preserve">
    <value>Azure blob egress failed.</value>
    <comment>Gets a string similar to "Azure blob egress failed.".</comment>
  </data>
  <data name="ErrorMessage_EgressFileFailedDetailed" xml:space="preserve">
    <value>File system egress failed" {0}</value>
    <comment>Gets the format string for egress failure to File (with an inner message).
1 Format Parameter:
0. innerMessage: The detailed inner message with additional error context.</comment>
  </data>
  <data name="ErrorMessage_EgressFileFailedGeneric" xml:space="preserve">
    <value>File system egress failed.</value>
    <comment>Gets a string similar to "File system egress failed.".</comment>
  </data>
  <data name="ErrorMessage_EgressMissingSasOrKey" xml:space="preserve">
    <value>SharedAccessSignature or AccountKey must be specified.</value>
    <comment>Gets a string similar to "SharedAccessSignature or AccountKey must be specified.".</comment>
  </data>
  <data name="ErrorMessage_EgressProviderDoesNotExist" xml:space="preserve">
    <value>Egress provider '{0}' does not exist.</value>
    <comment>Gets the format string for egress provider failure due to missing provider.
1 Format Parameter:
0. providerName: The name of the provider that could not be found.</comment>
  </data>
  <data name="ErrorMessage_EgressProviderTypeNotRegistered" xml:space="preserve">
    <value>Egress provider type '{0}' was not registered.</value>
    <comment>Gets the format string for egress provider type failure due to missing provider type.
1 Format Parameter:
0. providerType: The type of the provider that could not be found.</comment>
  </data>
  <data name="ErrorMessage_EgressUnableToCreateIntermediateFile" xml:space="preserve">
    <value>Unable to create unique intermediate file in '{0}' directory.</value>
    <comment>Gets the format string for file system egress provider failure due to inability to create an intermediate file.
1 Format Parameter:
0. intermediateFileDirectory: The directory where the intermediate file was attempted to be created.</comment>
  </data>
  <data name="ErrorMessage_FieldMustBeLessThanOtherField" xml:space="preserve">
    <value>The value of field {0} must be less than the value of field {1}.</value>
    <comment>{0} = Field name that must be lower.
{1} = Field name that must be higher.</comment>
  </data>
  <data name="ErrorMessage_FieldNotAllowed" xml:space="preserve">
    <value>The {0} field value '{1}' is not allowed.</value>
    <comment>Gets the format string for rejecting a field value.
2 Format Parameters:
0. fieldName: The name of the field that failed validation
1. fieldValue: The value in the field that was rejected</comment>
  </data>
  <data name="ErrorMessage_FieldNotHex" xml:space="preserve">
    <value>The {0} field could not be decoded as hex string.</value>
    <comment>Gets the format string for rejecting a field because it is not hex.
1 Format Parameter:
0. fieldName: The name of the field that failed validation</comment>
  </data>
  <data name="ErrorMessage_FieldOddLengh" xml:space="preserve">
    <value>The {0} field value length must be an even number.</value>
    <comment>Gets the format string for rejecting a field because it must have an even numbered length.
1 Format Parameter:
0. fieldName: The name of the field that failed validation</comment>
  </data>
  <data name="ErrorMessage_FileNotFound" xml:space="preserve">
    <value>A file could not be found at the provided path: {0}</value>
    <comment>{0} = Provided path to executable.</comment>
  </data>
  <data name="ErrorMessage_InvalidApiKey" xml:space="preserve">
    <value>Invalid API key.</value>
    <comment>Gets a string similar to "Invalid API key.".</comment>
  </data>
  <data name="ErrorMessage_InvalidApiKeyFormat" xml:space="preserve">
    <value>Invalid API key format.</value>
    <comment>Gets a string similar to "Invalid API key format.".</comment>
  </data>
  <data name="ErrorMessage_InvalidAuthHeader" xml:space="preserve">
    <value>Invalid authentication header.</value>
    <comment>Gets a string similar to "Invalid authentication header.".</comment>
  </data>
  <data name="ErrorMessage_InvalidJwk" xml:space="preserve">
    <value>The configuration parameter {0} must be contain a valid jwk, the value '{1}' could not be parsed as a Json Web Key. The expected format is a Json Web Key written as JSON which is base64Url encoded. {2}</value>
    <comment>Gets the format string for rejecting a config param because it is not a json-encoded jwk.
3 Format Parameters:
0. configName: The variable name for the provided string.
1. value: The value of the string that could not be parsed.
2. errorMessage: Additional error message text.</comment>
  </data>
  <data name="ErrorMessage_NonzeroExitCode" xml:space="preserve">
    <value>The process exited with exit code {0}</value>
    <comment>{0} = Nonzero exit code.</comment>
  </data>
  <data name="ErrorMessage_NotBase64" xml:space="preserve">
    <value>The configuration parameter {0} must be base64Url encoded, the value '{1}' could not be parsed as a base64Url-encoded string.</value>
    <comment>Gets the format string for rejecting a string because it is not base64url encoded.
2 Format Parameters:
0. stringName: The variable name for the provided string.
1. stringValue: The value of the string that could not be parsed.</comment>
  </data>
  <data name="ErrorMessage_ParameterNotAllowed" xml:space="preserve">
    <value>The {0} parameter value '{1}' is not allowed.</value>
    <comment>Gets the format string for rejecting a parameter value.
2 Format Parameters:
0. parameterName: The name of the parameter that failed validation
1. parameterValue: The value in the parameter that was rejected</comment>
  </data>
  <data name="ErrorMessage_ParameterNotAllowedByteRange" xml:space="preserve">
    <value>The {0} parameter value '{1}' is not allowed. Must be between {2} and {3} bytes long.</value>
    <comment>Gets the format string for rejecting a parameter value with additional text specifying the required range in bytes.
4 Format Parameters:
0. parameterName: The name of the parameter that failed validation
1. parameterValue: The value in the parameter that was rejected
2. minBytes: The minimum number of bytes acceptable
3. maxBytes: The maximum number of bytes acceptable</comment>
  </data>
  <data name="ErrorMessage_RejectedJwk" xml:space="preserve">
    <value>The configuration parameter {0} must be contain a jwk that is valid for use with dotnet-monitor. The provided Json Web Key must be have a key-type of EC or RSA and must-not have private key information because this this key is only used for signature verification.</value>
    <comment>Gets the format string for rejecting a config param because it is not a jwk type that is accepted.
1 Format Parameter:
0. configName: The variable name for the provided string.</comment>
  </data>
  <data name="ErrorMessage_TriggerFactoryFailed" xml:space="preserve">
    <value>The '{0}' trigger factory failed to create a trigger instance.</value>
    <comment>Gets the format string describing the error condition when a trigger factory does not return a valid trigger instance.</comment>
  </data>
  <data name="ErrorMessage_TwoFieldsCannotBeSpecified" xml:space="preserve">
    <value>Both the {0} field and the {1} field cannot be specified.</value>
    <comment>{0} = Name of first field that must not be specified if second field is specified.
{1} = Name of second field that must not be specified if first field is specified.</comment>
  </data>
  <data name="ErrorMessage_TwoFieldsMissing" xml:space="preserve">
    <value>The {0} field or the {1} field is required.</value>
    <comment>Gets the format string for rejecting validation due to 2 missing fields where at least one is required.
2 Format Parameters:
0. fieldNameOne: The name of the first field that is missing
1. fieldNameTwo: The name of the second field that is missing</comment>
  </data>
  <data name="ErrorMessage_UnableToBindUrls" xml:space="preserve">
    <value>Unable to bind any urls.</value>
    <comment>Gets a string similar to "Unable to bind any urls.".</comment>
  </data>
  <data name="ErrorMessage_UnableToStartProcess" xml:space="preserve">
    <value>Unable to start: {0} {1}</value>
    <comment>{0} = FileName, {1} = Process's Arguments</comment>
  </data>
  <data name="ErrorMessage_UnhandledConnectionMode" xml:space="preserve">
    <value>Unhandled connection mode: {0}</value>
    <comment>Gets the format string for egress provider failure due to missing provider.
1 Format Parameter:
0. connectionMode: The provided DiagnosticPortConnectionMode that could not be parsed.</comment>
  </data>
  <data name="ErrorMessage_UnknownActionType" xml:space="preserve">
    <value>'{0}' is not a known action type.</value>
    <comment>{0} = The type of action that is unknown.</comment>
  </data>
  <data name="ErrorMessage_UnknownFormat" xml:space="preserve">
    <value>Unknown output format type: {0}</value>
    <comment>Gets the format string for an unknown output format.
1 Format Parameter:
0. formatType: The value of the unknown OutputFormat type.</comment>
  </data>
  <data name="ErrorMessage_UnknownTriggerType" xml:space="preserve">
    <value>'{0}' is not a known trigger type.</value>
    <comment>{0} = The type of trigger that is unknown.</comment>
  </data>
  <data name="HelpDescription_CommandCollect" xml:space="preserve">
    <value>Monitor logs and metrics in a .NET application send the results to a chosen destination.</value>
    <comment>Gets the string to display in help that explains what the 'collect' command does.</comment>
  </data>
  <data name="HelpDescription_CommandConfig" xml:space="preserve">
    <value>Configuration related commands for dotnet-monitor.</value>
    <comment>Gets the string to display in help that explains what the 'config' command does.</comment>
  </data>
  <data name="HelpDescription_CommandGenerateKey" xml:space="preserve">
    <value>Generate api key and hash for authentication.</value>
    <comment>Gets the string to display in help that explains what the 'generatekey' command does.</comment>
  </data>
  <data name="HelpDescription_CommandShow" xml:space="preserve">
    <value>Shows configuration, as if dotnet-monitor collect was executed with these parameters.</value>
    <comment>Gets the string to display in help that explains what the 'show' command does.</comment>
  </data>
  <data name="HelpDescription_OptionDiagnosticPort" xml:space="preserve">
    <value>The fully qualified path and filename of the diagnostic port to which runtime instances can connect.</value>
    <comment>Gets the string to display in help that explains what the '--diagnostic-port' option does.</comment>
  </data>
  <data name="HelpDescription_OptionLevel" xml:space="preserve">
    <value>Configuration level. Unredacted configuration can show sensitive information.</value>
    <comment>Gets the string to display in help that explains what the '--level' option does.</comment>
  </data>
  <data name="HelpDescription_OptionMetrics" xml:space="preserve">
    <value>Enable publishing of metrics</value>
    <comment>Gets the string to display in help that explains what the '--metrics' option does.</comment>
  </data>
  <data name="HelpDescription_OptionMetricsUrls" xml:space="preserve">
    <value>Bindings for metrics api.</value>
    <comment>Gets the string to display in help that explains what the '--metricUrls' option does.</comment>
  </data>
  <data name="HelpDescription_OptionNoAuth" xml:space="preserve">
    <value>Turn off authentication.</value>
    <comment>Gets the string to display in help that explains what the '--no-auth' option does.</comment>
  </data>
  <data name="HelpDescription_OptionNoHttpEgress" xml:space="preserve">
    <value>Turn off HTTP response egress</value>
    <comment>Gets the string to display in help that explains what the '--no-http-egress' option does.</comment>
  </data>
  <data name="HelpDescription_OptionTempApiKey" xml:space="preserve">
    <value>Generates a new MonitorApiKey for each launch of the process.</value>
    <comment>Gets the string to display in help that explains what the '--temp-apikey' option does.</comment>
  </data>
  <data name="HelpDescription_OptionUrls" xml:space="preserve">
    <value>Bindings for the REST api.</value>
    <comment>Gets the string to display in help that explains what the '--urls' option does.</comment>
  </data>
  <data name="HelpDescription_OutputFormat" xml:space="preserve">
    <value>The format to display the output in. Valid values are Json, Text, and EnvVar.</value>
    <comment>Gets the string to display in help that explains what the '--output' option does.</comment>
  </data>
  <data name="LogFormatString_ApiKeyAuthenticationOptionsValidated" xml:space="preserve">
    <value>{apiAuthenticationConfigKey} settings have changed. The new settings have passed validation.</value>
    <comment>Gets the format string that is printed in the 22:ApiKeyAuthenticationOptionsChanged event.
1 Format Parameter:
1. apiAuthenticationConfigKey: The string key of ApiAuthentication object in configuration.</comment>
  </data>
  <data name="LogFormatString_ApiKeyOptionsChanged" xml:space="preserve">
    <value>The {configName} have changed, new values: Subject={subject}, PublicKey={publicKey}</value>
    <comment>Gets the format string that is printed in the 21:ApiKeyValidationFailure event.
3 Format Parameters:
1. configName: The string key of MonitorApiKey object in configuration.
2. subject: The value of the Subject property from the MonitorApiKeyOptions object.
3. publicKey: The value of the PublicKey property from the MonitorApiKeyOptions object.</comment>
  </data>
  <data name="LogFormatString_ApiKeyValidationFailure" xml:space="preserve">
    <value>{apiAuthenticationConfigKey} settings are invalid: {validationFailure}</value>
    <comment>Gets the format string that is printed in the 21:ApiKeyValidationFailure event.
2 Format Parameters:
1. apiAuthenticationConfigKey: The string key of ApiAuthentication object in configuration.
2. validationFailure: The error message of why the provided ApiAuthentication object is invalid.</comment>
  </data>
  <data name="LogFormatString_ApplyingCollectionRules" xml:space="preserve">
    <value>Applying collection rules.</value>
  </data>
  <data name="LogFormatString_BoundDefaultAddress" xml:space="preserve">
    <value>Bound default address: {address}</value>
    <comment>Gets the format string that is printed in the 16:BoundDefaultAddress event.
1 Format Parameter:
1. address: The address the REST api was bound to</comment>
  </data>
  <data name="LogFormatString_BoundMetricsAddress" xml:space="preserve">
    <value>Bound metrics address: {address}</value>
    <comment>Gets the format string that is printed in the 17:BoundMetricsAddress event.
1 Format Parameter:
1. address: The address the metrics api was bound to</comment>
  </data>
  <data name="LogFormatString_CollectionRuleActionCompleted" xml:space="preserve">
    <value>Collection rule '{ruleName}' action '{actionType}' completed.</value>
  </data>
  <data name="LogFormatString_CollectionRuleActionFailed" xml:space="preserve">
    <value>Collection rule '{ruleName}' action '{actionType}' failed.</value>
  </data>
  <data name="LogFormatString_CollectionRuleActionsCompleted" xml:space="preserve">
    <value>Collection rule '{ruleName}' actions completed.</value>
  </data>
  <data name="LogFormatString_CollectionRuleActionStarted" xml:space="preserve">
    <value>Collection rule '{ruleName}' action '{actionType}' started.</value>
  </data>
  <data name="LogFormatString_CollectionRuleActionsThrottled" xml:space="preserve">
    <value>Collection rule '{ruleName}' actions throttled due to action limits.</value>
  </data>
  <data name="LogFormatString_CollectionRuleCompleted" xml:space="preserve">
    <value>Collection rule '{ruleName}' completed.</value>
  </data>
  <data name="LogFormatString_CollectionRuleFailed" xml:space="preserve">
    <value>Collection rule '{ruleName}' failed.</value>
  </data>
  <data name="LogFormatString_CollectionRulesStarted" xml:space="preserve">
    <value>All collection rules started.</value>
  </data>
  <data name="LogFormatString_CollectionRuleStarted" xml:space="preserve">
    <value>Collection rule '{ruleName}' started.</value>
  </data>
  <data name="LogFormatString_CollectionRuleTriggerCompleted" xml:space="preserve">
    <value>Collection rule '{ruleName}' trigger '{triggerType}' completed.</value>
  </data>
  <data name="LogFormatString_CollectionRuleTriggerStarted" xml:space="preserve">
    <value>Collection rule '{ruleName}' trigger '{triggerType}' started.</value>
  </data>
  <data name="LogFormatString_DisabledNegotiateWhileElevated" xml:space="preserve">
    <value>Negotiate, Kerberos, and NTLM authentication are not enabled when running with elevated permissions.</value>
    <comment>Gets the format string that is printed in the 20:DisabledNegotiateWhileElevated event.
0 Format Parameters</comment>
  </data>
  <data name="LogFormatString_DuplicateCollectionRuleActionIgnored" xml:space="preserve">
    <value>Collection rule action '{actionType}' was previously registered; the new registration will be ignored.</value>
    <comment>Gets the format string that is printed in the 27:DuplicateCollectionRuleActionIgnored event.
1 Format Parameter:
1. actionType: The registration name of the collection rule action.</comment>
  </data>
  <data name="LogFormatString_DuplicateCollectionRuleTriggerIgnored" xml:space="preserve">
    <value>Collection rule trigger '{triggerType}' was previously registered; the new registration will be ignored.</value>
    <comment>Gets the format string that is printed in the 28:DuplicateCollectionRuleTriggerIgnored event.
1 Format Parameter:
1. triggerType: The registration name of the collection rule trigger.</comment>
  </data>
  <data name="LogFormatString_DuplicateEgressProviderIgnored" xml:space="preserve">
    <value>New provider '{providerName}' under type '{providerType}' was already registered with type '{existingProviderType}' and will be ignored.</value>
    <comment>Gets the format string that is printed in the 24:DuplicateEgressProviderIgnored event.
3 Format Parameter:
1. providerName: Name of the provider that was already registered
2. providerType: The type of provider that the new provider was attempting to be registered.
3. existingProviderType: The type of provider that the new provider name was already registered.</comment>
  </data>
  <data name="LogFormatString_EgressCopyActionStreamToEgressStream" xml:space="preserve">
    <value>Copying action stream to egress stream with buffer size {bufferSize}</value>
    <comment>Gets the format string that is printed in the 5:EgressCopyActionStreamToEgressStream event.
1 Format Parameter:
1. bufferSize: Size of the buffer</comment>
  </data>
  <data name="LogFormatString_EgressProviderInvalidOptions" xml:space="preserve">
    <value>Provider '{providerName}': The options are invalid. The provider will not be available for use.</value>
    <comment>Gets the format string that is printed in the 2:EgressProviderInvalidOptions event.
1 Format Parameter:
1. providerName: Name of the provider that was not valid</comment>
  </data>
  <data name="LogFormatString_EgressProviderInvokeStreamAction" xml:space="preserve">
    <value>Provider {providerType}: Invoking stream action.</value>
    <comment>Gets the format string that is printed in the 11:EgressProviderInvokeStreamAction event.
1 Format Parameter:
1. providerType: Type of the provider that was invoked</comment>
  </data>
  <data name="LogFormatString_EgressProviderOptionsValidationError" xml:space="preserve">
    <value>Provider '{providerName}': {failureMessage}</value>
    <comment>Gets the format string that is printed in the 6:EgressProviderOptionsValidationError event.
2 Format Parameters:
1. providerName: Name of the provider with a warning
2. failureMessage: The failure message</comment>
  </data>
  <data name="LogFormatString_EgressProviderSavedStream" xml:space="preserve">
    <value>Provider {providerType}: Saved stream to {path}</value>
    <comment>Gets the format string that is printed in the 12:EgressProviderSavedStream event.
2 Format Parameters:
1. providerType: Type of the provider
2. path: path where provider saved the stream</comment>
  </data>
  <data name="LogFormatString_EgressProvideUnableToFindPropertyKey" xml:space="preserve">
    <value>Provider {providerType}: Unable to find '{keyName}' key in egress properties</value>
    <comment>Gets the format string that is printed in the 10:EgressProvideUnableToFindPropertyKey event.
2 Format Parameters:
1. providerType: Type of the provider
2. keyName: Name of the property that could not be found</comment>
  </data>
  <data name="LogFormatString_InsecureAutheticationConfiguration" xml:space="preserve">
    <value>WARNING: Authentication is enabled over insecure http transport. This can pose a security risk and is not intended for production environments.</value>
    <comment>Gets the format string that is printed in the 14:InsecureAutheticationConfiguration event.
0 Format Parameters</comment>
  </data>
  <data name="LogFormatString_LogTempApiKey" xml:space="preserve">
    <value>Generated one-time-use ApiKey for dotnet-monitor; use the following header for authorization:{NewLine}{AuthHeaderName}: {AuthScheme} {MonitorApiKey}</value>
    <comment>Gets the format string that is printed in the 23:LogTempApiKey event.
4 Format Parameters:
1. NewLine: A newline string from the current environment, Environment.NewLine
2. AuthHeaderName: The string name of the Authorization header, "Authorization"
3. AuthScheme: The scheme used in the http Authorization header
4. MonitorApiKey: The parameter to the scheme used in the http Authorization header, this should be the MonitorApiKey's value</comment>
  </data>
  <data name="LogFormatString_NoAuthentication" xml:space="preserve">
    <value>WARNING: Authentication has been disabled. This can pose a security risk and is not intended for production environments.</value>
    <comment>Gets the format string that is printed in the 13:NoAuthentication event.
0 Format Parameters</comment>
  </data>
  <data name="LogFormatString_NotifyPrivateKey" xml:space="preserve">
    <value>The configuration field {fieldName} contains private key information. The private key information is not required for dotnet-monitor to verify a token signature and it is strongly recomended to only provide the public key.</value>
  </data>
  <data name="LogFormatString_OptionsValidationFailure" xml:space="preserve">
    <value>{failure}</value>
    <comment>Gets the format string that is printed in the 18:OptionsValidationFailure event.
1 Format Parameter:
1. failure: The failure message from validation</comment>
  </data>
  <data name="LogFormatString_RunningElevated" xml:space="preserve">
    <value>The process was launched elevated and will have access to all processes on the system. Do not run elevated unless you need to monitor processes launched by another user (e.g., IIS worker processes)</value>
    <comment>Gets the format string that is printed in the 19:RunningElevated event.
0 Format Parameters</comment>
  </data>
  <data name="LogFormatString_UnableToListenToAddress" xml:space="preserve">
    <value>Unable to listen to {url}. Dotnet-monitor functionality will be limited.</value>
    <comment>Gets the format string that is printed in the 15:UnableToListenToAddress event.
1 Format Parameter:
1. url: The URL that could not have a listener attached to it</comment>
  </data>
  <data name="Message_GenerateApiKey" xml:space="preserve">
    <value>Generated ApiKey for dotnet-monitor; use the following header for authorization:</value>
    <comment>Gets a header string for the output of GenerateApiKeyCommand.</comment>
  </data>
  <data name="Message_GeneratedAuthorizationHeader" xml:space="preserve">
    <value>{0}: {1} {2}</value>
    <comment>Gets the string for writing the http Authorization header.</comment>
  </data>
  <data name="Message_GeneratekeyPublicKey" xml:space="preserve">
    <value>Public Key: {0}</value>
    <comment>Gets the string for displaying the PublicKey configuration value</comment>
  </data>
  <data name="Message_GeneratekeySubject" xml:space="preserve">
    <value>Subject: {0}</value>
    <comment>Gets the string for displaying the Subject configuration value</comment>
  </data>
  <data name="Message_SettingsDump" xml:space="preserve">
    <value>Settings in {0} format:</value>
    <comment>Gets a header string for the configuration output of GenerateApiKeyCommand.</comment>
  </data>
  <data name="Placeholder_NotPresent" xml:space="preserve">
    <value>:NOT PRESENT:</value>
    <comment>Gets a string similar to ":NOT PRESENT:".</comment>
  </data>
  <data name="Placeholder_Redacted" xml:space="preserve">
    <value>:REDACTED:</value>
    <comment>Gets a string similar to ":REDACTED:".</comment>
  </data>
</root>