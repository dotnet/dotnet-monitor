
// <auto-generated/>
#nullable enable
#pragma warning disable CS1591 // Compensate for https://github.com/dotnet/roslyn/issues/54103
namespace Microsoft.Diagnostics.Monitoring.WebApi.Models
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
    internal sealed partial class __EventMetricsMeterValidator__
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
        public static global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Monitoring.WebApi.Models.EventMetricsMeter options)
        {
            global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "EventMetricsMeter.Validate" : $"{name}.Validate";
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, null, null);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(2);

            context.MemberName = "MeterName";
            context.DisplayName = "EventMetricsMeter.MeterName";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A1);
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A2);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.MeterName, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Monitoring.WebApi.Models
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
    internal sealed partial class __EventMetricsProviderValidator__
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
        public static global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Monitoring.WebApi.Models.EventMetricsProvider options)
        {
            global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "EventMetricsProvider.Validate" : $"{name}.Validate";
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, null, null);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(2);

            context.MemberName = "ProviderName";
            context.DisplayName = "EventMetricsProvider.ProviderName";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A1);
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A2);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.ProviderName, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Monitoring.WebApi.Models
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
    internal sealed partial class __EventPipeProviderValidator__
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
        public static global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Monitoring.WebApi.Models.EventPipeProvider options)
        {
            global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "EventPipeProvider.Validate" : $"{name}.Validate";
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, null, null);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(2);

            context.MemberName = "Name";
            context.DisplayName = "EventPipeProvider.Name";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A1);
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A2);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.Name, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "Keywords";
            context.DisplayName = "EventPipeProvider.Keywords";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A3);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.Keywords, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "EventLevel";
            context.DisplayName = "EventPipeProvider.EventLevel";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A4);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.EventLevel, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Actions
{
    partial class CollectDumpActionDescriptor
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
        public global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectDumpOptions options)
        {
            global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "CollectDumpOptions.Validate" : $"{name}.Validate";
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, _serviceProvider, null);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(2);

            context.MemberName = "Type";
            context.DisplayName = "CollectDumpOptions.Type";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A5);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.Type, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "Egress";
            context.DisplayName = "CollectDumpOptions.Egress";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A6);
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A7);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.Egress, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Actions
{
    partial class CollectExceptionsActionDescriptor
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
        public global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectExceptionsOptions options)
        {
            global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "CollectExceptionsOptions.Validate" : $"{name}.Validate";
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, _serviceProvider, null);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(2);

            context.MemberName = "Egress";
            context.DisplayName = "CollectExceptionsOptions.Egress";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A6);
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A7);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.Egress, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "Validate";
            context.DisplayName = "CollectExceptionsOptions.Validate";
            (builder ??= new()).AddResults(((global::System.ComponentModel.DataAnnotations.IValidatableObject)options).Validate(context));

            return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Actions
{
    partial class CollectGCDumpActionDescriptor
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
        public global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectGCDumpOptions options)
        {
            global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "CollectGCDumpOptions.Validate" : $"{name}.Validate";
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, _serviceProvider, null);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(2);

            context.MemberName = "Egress";
            context.DisplayName = "CollectGCDumpOptions.Egress";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A6);
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A7);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.Egress, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Actions
{
    partial class CollectLiveMetricsActionDescriptor
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
        public global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectLiveMetricsOptions options)
        {
            global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "CollectLiveMetricsOptions.Validate" : $"{name}.Validate";
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, _serviceProvider, null);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(2);

            if (options.Providers is not null)
            {
                var count = 0;
                foreach (var o in options.Providers)
                {
                    if (o is not null)
                    {
                        (builder ??= new()).AddResult(global::Microsoft.Diagnostics.Monitoring.WebApi.Models.__EventMetricsProviderValidator__.Validate(string.IsNullOrEmpty(name) ? $"CollectLiveMetricsOptions.Providers[{count}]" : $"{name}.Providers[{count}]", o));
                    }
                    else
                    {
                        (builder ??= new()).AddError(string.IsNullOrEmpty(name) ? $"CollectLiveMetricsOptions.Providers[{count}] is null" : $"{name}.Providers[{count}] is null");
                    }
                    count++;
                }
            }

            if (options.Meters is not null)
            {
                var count = 0;
                foreach (var o in options.Meters)
                {
                    if (o is not null)
                    {
                        (builder ??= new()).AddResult(global::Microsoft.Diagnostics.Monitoring.WebApi.Models.__EventMetricsMeterValidator__.Validate(string.IsNullOrEmpty(name) ? $"CollectLiveMetricsOptions.Meters[{count}]" : $"{name}.Meters[{count}]", o));
                    }
                    else
                    {
                        (builder ??= new()).AddError(string.IsNullOrEmpty(name) ? $"CollectLiveMetricsOptions.Meters[{count}] is null" : $"{name}.Meters[{count}] is null");
                    }
                    count++;
                }
            }

            context.MemberName = "Duration";
            context.DisplayName = "CollectLiveMetricsOptions.Duration";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A8);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.Duration, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "Egress";
            context.DisplayName = "CollectLiveMetricsOptions.Egress";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A6);
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A7);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.Egress, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Actions
{
    partial class CollectLogsActionDescriptor
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
        public global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectLogsOptions options)
        {
            global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "CollectLogsOptions.Validate" : $"{name}.Validate";
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, _serviceProvider, null);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(2);

            context.MemberName = "DefaultLevel";
            context.DisplayName = "CollectLogsOptions.DefaultLevel";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A9);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.DefaultLevel, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "Duration";
            context.DisplayName = "CollectLogsOptions.Duration";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A8);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.Duration, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "Egress";
            context.DisplayName = "CollectLogsOptions.Egress";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A6);
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A7);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.Egress, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "Format";
            context.DisplayName = "CollectLogsOptions.Format";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A10);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.Format, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "Validate";
            context.DisplayName = "CollectLogsOptions.Validate";
            (builder ??= new()).AddResults(((global::System.ComponentModel.DataAnnotations.IValidatableObject)options).Validate(context));

            return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Actions
{
    partial class CollectStacksActionDescriptor
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
        public global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectStacksOptions options)
        {
            global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "CollectStacksOptions.Validate" : $"{name}.Validate";
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, _serviceProvider, null);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(2);

            context.MemberName = "Egress";
            context.DisplayName = "CollectStacksOptions.Egress";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A6);
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A7);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.Egress, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "Validate";
            context.DisplayName = "CollectStacksOptions.Validate";
            (builder ??= new()).AddResults(((global::System.ComponentModel.DataAnnotations.IValidatableObject)options).Validate(context));

            return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Actions
{
    partial class CollectTraceActionDescriptor
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
        public global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.CollectTraceOptions options)
        {
            global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "CollectTraceOptions.Validate" : $"{name}.Validate";
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, _serviceProvider, null);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(2);

            context.MemberName = "Profile";
            context.DisplayName = "CollectTraceOptions.Profile";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A11);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.Profile, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            if (options.Providers is not null)
            {
                var count = 0;
                foreach (var o in options.Providers)
                {
                    if (o is not null)
                    {
                        (builder ??= new()).AddResult(global::Microsoft.Diagnostics.Monitoring.WebApi.Models.__EventPipeProviderValidator__.Validate(string.IsNullOrEmpty(name) ? $"CollectTraceOptions.Providers[{count}]" : $"{name}.Providers[{count}]", o));
                    }
                    else
                    {
                        (builder ??= new()).AddError(string.IsNullOrEmpty(name) ? $"CollectTraceOptions.Providers[{count}] is null" : $"{name}.Providers[{count}] is null");
                    }
                    count++;
                }
            }

            context.MemberName = "BufferSizeMegabytes";
            context.DisplayName = "CollectTraceOptions.BufferSizeMegabytes";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A12);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.BufferSizeMegabytes, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "Duration";
            context.DisplayName = "CollectTraceOptions.Duration";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A8);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.Duration, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "Egress";
            context.DisplayName = "CollectTraceOptions.Egress";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A6);
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A7);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.Egress, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            if (options.StoppingEvent is not null)
            {
                (builder ??= new()).AddResult(global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.__TraceEventFilterValidator__.Validate(string.IsNullOrEmpty(name) ? "CollectTraceOptions.StoppingEvent" : $"{name}.StoppingEvent", options.StoppingEvent));
            }

            context.MemberName = "Validate";
            context.DisplayName = "CollectTraceOptions.Validate";
            (builder ??= new()).AddResults(((global::System.ComponentModel.DataAnnotations.IValidatableObject)options).Validate(context));

            return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Actions
{
    partial class ExecuteActionDescriptor
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
        public global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.ExecuteOptions options)
        {
            global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "ExecuteOptions.Validate" : $"{name}.Validate";
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, null, null);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(1);

            context.MemberName = "Path";
            context.DisplayName = "ExecuteOptions.Path";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A1);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.Path, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Actions
{
    partial class GetEnvironmentVariableActionDescriptor
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
        public global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.GetEnvironmentVariableOptions options)
        {
            global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "GetEnvironmentVariableOptions.Validate" : $"{name}.Validate";
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, null, null);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(1);

            context.MemberName = "Name";
            context.DisplayName = "GetEnvironmentVariableOptions.Name";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A1);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.Name, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Actions
{
    partial class LoadProfilerActionDescriptor
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
        public global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.LoadProfilerOptions options)
        {
            global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "LoadProfilerOptions.Validate" : $"{name}.Validate";
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, null, null);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(2);

            context.MemberName = "Path";
            context.DisplayName = "LoadProfilerOptions.Path";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A1);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.Path, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "Clsid";
            context.DisplayName = "LoadProfilerOptions.Clsid";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A1);
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A13);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.Clsid, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Actions
{
    partial class SetEnvironmentVariableActionDescriptor
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
        public global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.SetEnvironmentVariableOptions options)
        {
            global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "SetEnvironmentVariableOptions.Validate" : $"{name}.Validate";
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, null, null);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(1);

            context.MemberName = "Name";
            context.DisplayName = "SetEnvironmentVariableOptions.Name";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A1);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.Name, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
    internal sealed partial class __CollectionRuleLimitsOptionsValidator__
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
        public static global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleLimitsOptions options)
        {
            global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "CollectionRuleLimitsOptions.Validate" : $"{name}.Validate";
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, null, null);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(1);

            context.MemberName = "ActionCount";
            context.DisplayName = "CollectionRuleLimitsOptions.ActionCount";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A14);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.ActionCount, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "ActionCountSlidingWindowDuration";
            context.DisplayName = "CollectionRuleLimitsOptions.ActionCountSlidingWindowDuration";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A8);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.ActionCountSlidingWindowDuration, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "RuleDuration";
            context.DisplayName = "CollectionRuleLimitsOptions.RuleDuration";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A15);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.RuleDuration, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
    internal sealed partial class __TraceEventFilterValidator__
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
        public static global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.TraceEventFilter options)
        {
            global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "TraceEventFilter.Validate" : $"{name}.Validate";
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, null, null);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(1);

            context.MemberName = "ProviderName";
            context.DisplayName = "TraceEventFilter.ProviderName";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A1);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.ProviderName, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "EventName";
            context.DisplayName = "TraceEventFilter.EventName";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A1);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.EventName, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options
{
    partial class CollectionRuleActionOptionsValidator
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
        public global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleActionOptions options)
        {
            global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "CollectionRuleActionOptions.Validate" : $"{name}.Validate";
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, _serviceProvider, null);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(1);

            context.MemberName = "Type";
            context.DisplayName = "CollectionRuleActionOptions.Type";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A1);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.Type, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "Validate";
            context.DisplayName = "CollectionRuleActionOptions.Validate";
            (builder ??= new()).AddResults(((global::System.ComponentModel.DataAnnotations.IValidatableObject)options).Validate(context));

            return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options
{
    partial class CollectionRuleTriggerOptionsValidator
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
        public global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.CollectionRuleTriggerOptions options)
        {
            global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "CollectionRuleTriggerOptions.Validate" : $"{name}.Validate";
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, _serviceProvider, null);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(1);

            context.MemberName = "Type";
            context.DisplayName = "CollectionRuleTriggerOptions.Type";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A1);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.Type, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "Validate";
            context.DisplayName = "CollectionRuleTriggerOptions.Validate";
            (builder ??= new()).AddResults(((global::System.ComponentModel.DataAnnotations.IValidatableObject)options).Validate(context));

            return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers
{
    partial class EventCounterOptions
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
        public global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.EventCounterOptions options)
        {
            global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "EventCounterOptions.Validate" : $"{name}.Validate";
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, null, null);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(1);

            context.MemberName = "ProviderName";
            context.DisplayName = "EventCounterOptions.ProviderName";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A1);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.ProviderName, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "CounterName";
            context.DisplayName = "EventCounterOptions.CounterName";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A1);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.CounterName, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "SlidingWindowDuration";
            context.DisplayName = "EventCounterOptions.SlidingWindowDuration";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A8);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.SlidingWindowDuration, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "Validate";
            context.DisplayName = "EventCounterOptions.Validate";
            (builder ??= new()).AddResults(((global::System.ComponentModel.DataAnnotations.IValidatableObject)options).Validate(context));

            return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Triggers
{
    partial class AspNetRequestCountTriggerDescriptor
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
        public global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.AspNetRequestCountOptions options)
        {
            global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "AspNetRequestCountOptions.Validate" : $"{name}.Validate";
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, null, null);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(2);

            context.MemberName = "RequestCount";
            context.DisplayName = "AspNetRequestCountOptions.RequestCount";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A16);
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A14);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.RequestCount, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "SlidingWindowDuration";
            context.DisplayName = "AspNetRequestCountOptions.SlidingWindowDuration";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A8);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.SlidingWindowDuration, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Triggers
{
    partial class AspNetRequestDurationTriggerDescriptor
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
        public global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.AspNetRequestDurationOptions options)
        {
            global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "AspNetRequestDurationOptions.Validate" : $"{name}.Validate";
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, null, null);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(2);

            context.MemberName = "RequestCount";
            context.DisplayName = "AspNetRequestDurationOptions.RequestCount";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A16);
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A14);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.RequestCount, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "RequestDuration";
            context.DisplayName = "AspNetRequestDurationOptions.RequestDuration";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A17);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.RequestDuration, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "SlidingWindowDuration";
            context.DisplayName = "AspNetRequestDurationOptions.SlidingWindowDuration";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A8);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.SlidingWindowDuration, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Triggers
{
    partial class AspNetResponseStatusTriggerDescriptor
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
        public global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.AspNetResponseStatusOptions options)
        {
            global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "AspNetResponseStatusOptions.Validate" : $"{name}.Validate";
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, null, null);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(3);

            context.MemberName = "StatusCodes";
            context.DisplayName = "AspNetResponseStatusOptions.StatusCodes";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A1);
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A2);
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A18);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.StatusCodes, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "ResponseCount";
            context.DisplayName = "AspNetResponseStatusOptions.ResponseCount";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A19);
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A14);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.ResponseCount, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "SlidingWindowDuration";
            context.DisplayName = "AspNetResponseStatusOptions.SlidingWindowDuration";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A8);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.SlidingWindowDuration, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Triggers
{
    partial class CPUUsageTriggerDescriptor
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
        public global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.EventCounterShortcuts.CPUUsageOptions options)
        {
            global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "CPUUsageOptions.Validate" : $"{name}.Validate";
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, null, null);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(1);

            context.MemberName = "GreaterThan";
            context.DisplayName = "CPUUsageOptions.GreaterThan";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A20);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.GreaterThan, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "LessThan";
            context.DisplayName = "CPUUsageOptions.LessThan";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A20);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.LessThan, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "SlidingWindowDuration";
            context.DisplayName = "CPUUsageOptions.SlidingWindowDuration";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A8);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.SlidingWindowDuration, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "Validate";
            context.DisplayName = "CPUUsageOptions.Validate";
            (builder ??= new()).AddResults(((global::System.ComponentModel.DataAnnotations.IValidatableObject)options).Validate(context));

            return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Triggers
{
    partial class EventCounterTriggerDescriptor
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
        public global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.EventCounterOptions options)
        {
            global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "EventCounterOptions.Validate" : $"{name}.Validate";
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, null, null);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(1);

            context.MemberName = "ProviderName";
            context.DisplayName = "EventCounterOptions.ProviderName";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A1);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.ProviderName, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "CounterName";
            context.DisplayName = "EventCounterOptions.CounterName";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A1);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.CounterName, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "SlidingWindowDuration";
            context.DisplayName = "EventCounterOptions.SlidingWindowDuration";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A8);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.SlidingWindowDuration, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "Validate";
            context.DisplayName = "EventCounterOptions.Validate";
            (builder ??= new()).AddResults(((global::System.ComponentModel.DataAnnotations.IValidatableObject)options).Validate(context));

            return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Triggers
{
    partial class EventMeterTriggerDescriptor
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
        public global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.EventMeterOptions options)
        {
            global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "EventMeterOptions.Validate" : $"{name}.Validate";
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, null, null);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(1);

            context.MemberName = "MeterName";
            context.DisplayName = "EventMeterOptions.MeterName";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A1);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.MeterName, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "InstrumentName";
            context.DisplayName = "EventMeterOptions.InstrumentName";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A1);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.InstrumentName, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "SlidingWindowDuration";
            context.DisplayName = "EventMeterOptions.SlidingWindowDuration";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A8);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.SlidingWindowDuration, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "HistogramPercentile";
            context.DisplayName = "EventMeterOptions.HistogramPercentile";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A20);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.HistogramPercentile, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "Validate";
            context.DisplayName = "EventMeterOptions.Validate";
            (builder ??= new()).AddResults(((global::System.ComponentModel.DataAnnotations.IValidatableObject)options).Validate(context));

            return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Triggers
{
    partial class GCHeapSizeTriggerDescriptor
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
        public global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.EventCounterShortcuts.GCHeapSizeOptions options)
        {
            global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "GCHeapSizeOptions.Validate" : $"{name}.Validate";
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, null, null);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(1);

            context.MemberName = "GreaterThan";
            context.DisplayName = "GCHeapSizeOptions.GreaterThan";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A21);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.GreaterThan, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "LessThan";
            context.DisplayName = "GCHeapSizeOptions.LessThan";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A21);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.LessThan, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "SlidingWindowDuration";
            context.DisplayName = "GCHeapSizeOptions.SlidingWindowDuration";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A8);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.SlidingWindowDuration, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "Validate";
            context.DisplayName = "GCHeapSizeOptions.Validate";
            (builder ??= new()).AddResults(((global::System.ComponentModel.DataAnnotations.IValidatableObject)options).Validate(context));

            return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Triggers
{
    partial class ThreadpoolQueueLengthTriggerDescriptor
    {
        /// <summary>
        /// Validates a specific named options instance (or all when <paramref name="name"/> is <see langword="null" />).
        /// </summary>
        /// <param name="name">The name of the options instance being validated.</param>
        /// <param name="options">The options instance.</param>
        /// <returns>Validation result.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
        public global::Microsoft.Extensions.Options.ValidateOptionsResult Validate(string? name, global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Triggers.EventCounterShortcuts.ThreadpoolQueueLengthOptions options)
        {
            global::Microsoft.Extensions.Options.ValidateOptionsResultBuilder? builder = null;
            string displayName = string.IsNullOrEmpty(name) ? "ThreadpoolQueueLengthOptions.Validate" : $"{name}.Validate";
            var context = new global::System.ComponentModel.DataAnnotations.ValidationContext(options, displayName, null, null);
            var validationResults = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationResult>();
            var validationAttributes = new global::System.Collections.Generic.List<global::System.ComponentModel.DataAnnotations.ValidationAttribute>(1);

            context.MemberName = "GreaterThan";
            context.DisplayName = "ThreadpoolQueueLengthOptions.GreaterThan";
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A21);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.GreaterThan, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "LessThan";
            context.DisplayName = "ThreadpoolQueueLengthOptions.LessThan";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A21);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.LessThan, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "SlidingWindowDuration";
            context.DisplayName = "ThreadpoolQueueLengthOptions.SlidingWindowDuration";
            validationResults.Clear();
            validationAttributes.Clear();
            validationAttributes.Add(global::__OptionValidationStaticInstances.__Attributes.A8);
            if (!global::System.ComponentModel.DataAnnotations.Validator.TryValidateValue(options.SlidingWindowDuration, context, validationResults, validationAttributes))
            {
                (builder ??= new()).AddResults(validationResults);
            }

            context.MemberName = "Validate";
            context.DisplayName = "ThreadpoolQueueLengthOptions.Validate";
            (builder ??= new()).AddResults(((global::System.ComponentModel.DataAnnotations.IValidatableObject)options).Validate(context));

            return builder is null ? global::Microsoft.Extensions.Options.ValidateOptionsResult.Success : builder.Build();
        }
    }
}
namespace __OptionValidationStaticInstances
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
    file static class __Attributes
    {
        internal static readonly global::System.ComponentModel.DataAnnotations.RequiredAttribute A1 = new global::System.ComponentModel.DataAnnotations.RequiredAttribute();

        internal static readonly __OptionValidationGeneratedAttributes.__SourceGen__MinLengthAttribute A2 = new __OptionValidationGeneratedAttributes.__SourceGen__MinLengthAttribute(
            (int)1);

        internal static readonly global::Microsoft.Diagnostics.Monitoring.WebApi.Validation.IntegerOrHexStringAttribute A3 = new global::Microsoft.Diagnostics.Monitoring.WebApi.Validation.IntegerOrHexStringAttribute();

        internal static readonly global::System.ComponentModel.DataAnnotations.EnumDataTypeAttribute A4 = new global::System.ComponentModel.DataAnnotations.EnumDataTypeAttribute(
            typeof(global::System.Diagnostics.Tracing.EventLevel));

        internal static readonly global::System.ComponentModel.DataAnnotations.EnumDataTypeAttribute A5 = new global::System.ComponentModel.DataAnnotations.EnumDataTypeAttribute(
            typeof(global::Microsoft.Diagnostics.Monitoring.WebApi.Models.DumpType));

        internal static readonly global::System.ComponentModel.DataAnnotations.RequiredAttribute A6 = new global::System.ComponentModel.DataAnnotations.RequiredAttribute()
        {
            ErrorMessageResourceName = "ErrorMessage_NoDefaultEgressProvider",
            ErrorMessageResourceType = typeof(global::Microsoft.Diagnostics.Monitoring.WebApi.OptionsDisplayStrings)
        };

        internal static readonly global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.ValidateEgressProviderAttribute A7 = new global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.ValidateEgressProviderAttribute();

        internal static readonly __OptionValidationGeneratedAttributes.__SourceGen__RangeAttribute A8 = new __OptionValidationGeneratedAttributes.__SourceGen__RangeAttribute(
            typeof(global::System.TimeSpan),
            "00:00:01",
            "1.00:00:00");

        internal static readonly global::System.ComponentModel.DataAnnotations.EnumDataTypeAttribute A9 = new global::System.ComponentModel.DataAnnotations.EnumDataTypeAttribute(
            typeof(global::Microsoft.Extensions.Logging.LogLevel));

        internal static readonly global::System.ComponentModel.DataAnnotations.EnumDataTypeAttribute A10 = new global::System.ComponentModel.DataAnnotations.EnumDataTypeAttribute(
            typeof(global::Microsoft.Diagnostics.Monitoring.Options.LogFormat));

        internal static readonly global::System.ComponentModel.DataAnnotations.EnumDataTypeAttribute A11 = new global::System.ComponentModel.DataAnnotations.EnumDataTypeAttribute(
            typeof(global::Microsoft.Diagnostics.Monitoring.WebApi.Models.TraceProfile));

        internal static readonly __OptionValidationGeneratedAttributes.__SourceGen__RangeAttribute A12 = new __OptionValidationGeneratedAttributes.__SourceGen__RangeAttribute(
            (int)1,
            (int)1024);

        internal static readonly global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.RequiredGuidAttribute A13 = new global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.Actions.RequiredGuidAttribute();

        internal static readonly __OptionValidationGeneratedAttributes.__SourceGen__RangeAttribute A14 = new __OptionValidationGeneratedAttributes.__SourceGen__RangeAttribute(
            (int)1,
            (int)2147483647);

        internal static readonly __OptionValidationGeneratedAttributes.__SourceGen__RangeAttribute A15 = new __OptionValidationGeneratedAttributes.__SourceGen__RangeAttribute(
            typeof(global::System.TimeSpan),
            "00:00:01",
            "365.00:00:00");

        internal static readonly global::System.ComponentModel.DataAnnotations.RequiredAttribute A16 = new global::System.ComponentModel.DataAnnotations.RequiredAttribute()
        {
            ErrorMessageResourceName = "ErrorMessage_NoDefaultRequestCount",
            ErrorMessageResourceType = typeof(global::Microsoft.Diagnostics.Monitoring.WebApi.OptionsDisplayStrings)
        };

        internal static readonly __OptionValidationGeneratedAttributes.__SourceGen__RangeAttribute A17 = new __OptionValidationGeneratedAttributes.__SourceGen__RangeAttribute(
            typeof(global::System.TimeSpan),
            "00:00:00",
            "01:00:00");

        internal static readonly global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.RegularExpressionsAttribute A18 = new global::Microsoft.Diagnostics.Tools.Monitor.CollectionRules.Options.RegularExpressionsAttribute(
            "[1-5][0-9]{2}(-[1-5][0-9]{2})?")
        {
            ErrorMessageResourceName = "ErrorMessage_StatusCodesRegularExpressionDoesNotMatch",
            ErrorMessageResourceType = typeof(global::Microsoft.Diagnostics.Monitoring.WebApi.OptionsDisplayStrings)
        };

        internal static readonly global::System.ComponentModel.DataAnnotations.RequiredAttribute A19 = new global::System.ComponentModel.DataAnnotations.RequiredAttribute()
        {
            ErrorMessageResourceName = "ErrorMessage_NoDefaultResponseCount",
            ErrorMessageResourceType = typeof(global::Microsoft.Diagnostics.Monitoring.WebApi.OptionsDisplayStrings)
        };

        internal static readonly __OptionValidationGeneratedAttributes.__SourceGen__RangeAttribute A20 = new __OptionValidationGeneratedAttributes.__SourceGen__RangeAttribute(
            (double)0,
            (double)100);

        internal static readonly __OptionValidationGeneratedAttributes.__SourceGen__RangeAttribute A21 = new __OptionValidationGeneratedAttributes.__SourceGen__RangeAttribute(
            (double)0,
            (double)1.7976931348623157E+308);
    }
}
namespace __OptionValidationStaticInstances
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
    file static class __Validators
    {
    }
}
namespace __OptionValidationGeneratedAttributes
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
    [global::System.AttributeUsage(global::System.AttributeTargets.Property | global::System.AttributeTargets.Field | global::System.AttributeTargets.Parameter, AllowMultiple = false)]
    file class __SourceGen__MinLengthAttribute : global::System.ComponentModel.DataAnnotations.ValidationAttribute
    {
        private static string DefaultErrorMessageString => "The field {0} must be a string or array type with a minimum length of '{1}'.";

        public __SourceGen__MinLengthAttribute(int length) : base(() => DefaultErrorMessageString) { Length = length; }
        public int Length { get; }
        public override bool IsValid(object? value)
        {
            if (Length < -1)
            {
                throw new global::System.InvalidOperationException("MinLengthAttribute must have a Length value that is zero or greater.");
            }
            if (value == null)
            {
                return true;
            }

            int length;
            if (value is string stringValue)
            {
                length = stringValue.Length;
            }
            else if (value is System.Collections.ICollection collectionValue)
            {
                length = collectionValue.Count;
            }
            else
            {
                throw new global::System.InvalidCastException($"The field of type {value.GetType()} must be a string, array, or ICollection type.");
            }

            return length >= Length;
        }
        public override string FormatErrorMessage(string name) => string.Format(global::System.Globalization.CultureInfo.CurrentCulture, ErrorMessageString, name, Length);
    }
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Extensions.Options.SourceGeneration", "10.0.12.25812")]
    [global::System.AttributeUsage(global::System.AttributeTargets.Property | global::System.AttributeTargets.Field | global::System.AttributeTargets.Parameter, AllowMultiple = false)]
    file class __SourceGen__RangeAttribute : global::System.ComponentModel.DataAnnotations.ValidationAttribute
    {
        public __SourceGen__RangeAttribute(int minimum, int maximum) : base()
        {
            Minimum = minimum;
            Maximum = maximum;
            OperandType = typeof(int);
        }
        public __SourceGen__RangeAttribute(double minimum, double maximum) : base()
        {
            Minimum = minimum;
            Maximum = maximum;
            OperandType = typeof(double);
        }
        public __SourceGen__RangeAttribute(global::System.Type type, string minimum, string maximum) : base()
        {
            OperandType = type;
            _needToConvertMinMax = true;
            Minimum = minimum;
            Maximum = maximum;
        }
        public object Minimum { get; private set; }
        public object Maximum { get; private set; }
        public bool MinimumIsExclusive { get; set; }
        public bool MaximumIsExclusive { get; set; }
        public global::System.Type OperandType { get; }
        public bool ParseLimitsInInvariantCulture { get; set; }
        public bool ConvertValueInInvariantCulture { get; set; }
        public override string FormatErrorMessage(string name) =>
                string.Format(global::System.Globalization.CultureInfo.CurrentCulture, GetValidationErrorMessage(), name, Minimum, Maximum);
        private readonly bool _needToConvertMinMax;
        private volatile bool _initialized;
        private readonly object _lock = new();
        private const string MinMaxError = "The minimum and maximum values must be set to valid values.";

        public override bool IsValid(object? value)
        {
            if (!_initialized)
            {
                lock (_lock)
                {
                    if (!_initialized)
                    {
                        if (Minimum is null || Maximum is null)
                        {
                            throw new global::System.InvalidOperationException(MinMaxError);
                        }
                        if (_needToConvertMinMax)
                        {
                            System.Globalization.CultureInfo culture = ParseLimitsInInvariantCulture ? global::System.Globalization.CultureInfo.InvariantCulture : global::System.Globalization.CultureInfo.CurrentCulture;
                            if (OperandType == typeof(global::System.TimeSpan))
                            {
                                if (!global::System.TimeSpan.TryParse((string)Minimum, culture, out global::System.TimeSpan timeSpanMinimum) ||
                                    !global::System.TimeSpan.TryParse((string)Maximum, culture, out global::System.TimeSpan timeSpanMaximum))
                                {
                                    throw new global::System.InvalidOperationException(MinMaxError);
                                }
                                Minimum = timeSpanMinimum;
                                Maximum = timeSpanMaximum;
                            }
                            else
                            {
                                Minimum = ConvertValue(Minimum, culture) ?? throw new global::System.InvalidOperationException(MinMaxError);
                                Maximum = ConvertValue(Maximum, culture) ?? throw new global::System.InvalidOperationException(MinMaxError);
                            }
                        }
                        int cmp = ((global::System.IComparable)Minimum).CompareTo((global::System.IComparable)Maximum);
                        if (cmp > 0)
                        {
                            throw new global::System.InvalidOperationException("The maximum value '{Maximum}' must be greater than or equal to the minimum value '{Minimum}'.");
                        }
                        else if (cmp == 0 && (MinimumIsExclusive || MaximumIsExclusive))
                        {
                            throw new global::System.InvalidOperationException("Cannot use exclusive bounds when the maximum value is equal to the minimum value.");
                        }
                        _initialized = true;
                    }
                }
            }

            if (value is null or string { Length: 0 })
            {
                return true;
            }

            System.Globalization.CultureInfo formatProvider = ConvertValueInInvariantCulture ? global::System.Globalization.CultureInfo.InvariantCulture : global::System.Globalization.CultureInfo.CurrentCulture;
            object? convertedValue;

            if (OperandType == typeof(global::System.TimeSpan))
            {
                if (value is global::System.TimeSpan)
                {
                    convertedValue = value;
                }
                else if (value is string)
                {
                    if (!global::System.TimeSpan.TryParse((string)value, formatProvider, out global::System.TimeSpan timeSpanValue))
                    {
                        return false;
                    }
                    convertedValue = timeSpanValue;
                }
                else
                {
                    throw new global::System.InvalidOperationException($"A value type {value.GetType()} that is not a TimeSpan or a string has been given. This might indicate a problem with the source generator.");
                }
            }
            else
            {
                try
                {
                    convertedValue = ConvertValue(value, formatProvider);
                }
                catch (global::System.Exception e) when (e is global::System.FormatException or global::System.InvalidCastException or global::System.NotSupportedException)
                {
                    return false;
                }
            }

            var min = (global::System.IComparable)Minimum;
            var max = (global::System.IComparable)Maximum;

            return
                (MinimumIsExclusive ? min.CompareTo(convertedValue) < 0 : min.CompareTo(convertedValue) <= 0) &&
                (MaximumIsExclusive ? max.CompareTo(convertedValue) > 0 : max.CompareTo(convertedValue) >= 0);
        }
        private string GetValidationErrorMessage()
        {
            return (MinimumIsExclusive, MaximumIsExclusive) switch
            {
                (false, false) => "The field {0} must be between {1} and {2}.",
                (true, false) => "The field {0} must be between {1} exclusive and {2}.",
                (false, true) => "The field {0} must be between {1} and {2} exclusive.",
                (true, true) => "The field {0} must be between {1} exclusive and {2} exclusive.",
            };
        }
        private object? ConvertValue(object? value, System.Globalization.CultureInfo formatProvider)
        {
            if (value is string stringValue)
            {
                value = global::System.Convert.ChangeType(stringValue, OperandType, formatProvider);
            }
            else
            {
                value = global::System.Convert.ChangeType(value, OperandType, formatProvider);
            }
            return value;
        }
    }
}
