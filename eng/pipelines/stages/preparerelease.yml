parameters:
- name: updateDockerCondition
  type: string
  default: false
- name: is1ESPipeline
  type: boolean
  default: true

stages:
- stage: StageBuildAssetsStage
  displayName: Stage Build Assets
  dependsOn:
  - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), or(startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/internal/release/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/test/release/'))) }}:
    - publish_using_darc
  jobs:
  - job: StageBuildAssetsJob
    displayName: Stage Build Assets
    variables:
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), or(startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/internal/release/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/test/release/'))) }}:
      - group: DotNet-Diagnostics-Storage
      - group: DotNet-DotNetStage-Storage
      - group: Release-Pipeline
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET 8'
      inputs:
        packageType: runtime
        version: 8.x
        installationPath: '$(Build.Repository.LocalPath)\.dotnet'

    - script: mkdir $(System.ArtifactsDirectory)\StagingToolLogs
      displayName: Create Staging Tool Logs Directory

    - script: '$(Build.SourcesDirectory)\dotnet.cmd build $(Build.Repository.LocalPath)\eng\release\DiagnosticsReleaseTool\DiagnosticsReleaseTool.csproj -c Release /bl'
      workingDirectory: '$(System.ArtifactsDirectory)\StagingToolLogs'
      displayName: 'Build Staging Tool'

    # Run tool for release and test release branches
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), or(startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/internal/release/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/test/release/'))) }}:
      - template: /eng/common/templates-official/post-build/setup-maestro-vars.yml@self

      - task: AzureCLI@2
        displayName: Get Build Version
        inputs:
          azureSubscription: "Darc: Maestro Production"
          scriptType: ps
          scriptPath: $(Build.SourcesDirectory)/eng/release/Scripts/GetBuildVersion.ps1
          arguments: >-
            -BarId $(BARBuildId)
            -TaskVariableName 'BuildVersion'

      # Populate dotnetbuilds-internal-container-read-token
      - template: /eng/common/templates-official/steps/get-delegation-sas.yml
        parameters:
          federatedServiceConnection: 'dotnetbuilds-internal-read'
          outputVariableName: 'dotnetbuilds-internal-checksums-container-read-token'
          expiryInHours: 1
          base64Encode: false
          storageAccount: dotnetbuilds
          container: internal-checksums
          permissions: rl

      # Populate dotnetbuilds-internal-container-read-token
      - template: /eng/common/templates-official/steps/get-delegation-sas.yml
        parameters:
          federatedServiceConnection: 'dotnetbuilds-internal-read'
          outputVariableName: 'dotnetbuilds-internal-container-read-token'
          expiryInHours: 1
          base64Encode: false
          storageAccount: dotnetbuilds
          container: internal
          permissions: rl

      - task: AzureCLI@2
        displayName: 'Download Build Assets'
        inputs:
          azureSubscription: 'Darc: Maestro Production'
          scriptType: ps
          scriptPath: '$(Build.Repository.LocalPath)/eng/release/Scripts/AcquireBuild.ps1'
          arguments: >-
            -BarBuildId "$(BARBuildId)"
            -AzdoToken "$(dn-bot-all-drop-rw-code-rw-release-all)"
            -DownloadTargetPath "$(System.ArtifactsDirectory)\BuildAssets"
            -SasSuffixes "$(dotnetbuilds-internal-checksums-container-read-token),$(dotnetbuilds-internal-container-read-token)"
            -ReleaseVersion "$(Build.BuildNumber)"
          workingDirectory: '$(Build.Repository.LocalPath)'
        continueOnError: true

      - task: AzureCLI@2
        displayName: 'Manifest Generation and Asset Publishing'
        inputs:
          workingDirectory: '$(System.ArtifactsDirectory)\StagingToolLogs'
          azureSubscription: 'dotnetstage-dotnet-monitor-rw'
          scriptType: pscore
          scriptLocation: inlineScript
          addSpnToEnvironment: true
          inlineScript: >-
            $(Build.SourcesDirectory)\dotnet.cmd run
            --project $(Build.Repository.LocalPath)\eng\release\DiagnosticsReleaseTool\DiagnosticsReleaseTool.csproj
            -c Release
            --
            prepare-release
            --input-drop-path "$(System.ArtifactsDirectory)\BuildAssets"
            --tool-manifest "$(Build.Repository.LocalPath)\eng\release\tool-list.json"
            --staging-directory "$(System.ArtifactsDirectory)\AssetsLayout"
            --release-name "$(Build.BuildNumber)"
            --build-version "$(BuildVersion)"
            --account-name "$(dotnet-diagnostics-storage-accountname)"
            --container-name $(dotnet-monitor-container-name)
            --client-id "$env:servicePrincipalId"
            -v True

      - template: /eng/pipelines/steps/publish-pipeline-artifact.yml@self
        parameters:
          displayName: 'Upload Assets Layout'
          targetPath: '$(System.ArtifactsDirectory)\AssetsLayout'
          artifact: 'StagingToolAssetsLayout'
          is1ESPipeline: ${{ parameters.is1ESPipeline }}

      # Only tag build from real release branches
      - ${{ if not(startsWith(variables['Build.SourceBranch'], 'refs/heads/test/release/')) }}:
        - task: Powershell@2
          displayName: 'Tag Build with MonitorRelease'
          inputs:
            targetType: inline
            script: Write-Host "##vso[build.addbuildtag]MonitorRelease"

      - template: /eng/pipelines/steps/publish-pipeline-artifact.yml@self
        parameters:
          displayName: 'Upload Staging Tool Logs'
          targetPath: '$(System.ArtifactsDirectory)\StagingToolLogs'
          artifact: 'StagingToolLogs'
          is1ESPipeline: ${{ parameters.is1ESPipeline }}

    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - task: Powershell@2
        displayName: 'Tag Build with update-docker'
        condition: ${{ parameters.updateDockerCondition }}
        inputs:
          targetType: inline
          script: Write-Host "##vso[build.addbuildtag]update-docker"
