trigger: none
pr: none

parameters:
- name: IsTestRun
  type: boolean
  default: true
- name: IsDryRun
  type: boolean
  default: true

variables:
- template: /eng/common/templates-official/variables/pool-providers.yml@self
- name: _TeamName
  value: DotNetCore
  readonly: true
- group: Release-Pipeline
- name: IsDryRun
  value: ${{ parameters.IsDryRun }}
  readonly: true
- name: IsTestRun
  value: ${{ parameters.IsTestRun }}
  readonly: true

resources:
  pipelines:
  - pipeline: Build
    source: dotnet-dotnet-monitor

extends:
  template: /eng/pipelines/templates/pipeline-template.yml@self
  parameters:
    sdl:
      sbom:
        enabled: false
    stages:
    - stage: Validation

      jobs:
      - job: Validate

        variables:
        # Allow for differentiation of runs of this pipeline
        # when running it with the same build repeatedly.
        - name: RunRevision
          value: $[counter(format('{0}|{1}|{2}', variables['resources.pipeline.Build.runID'], variables['IsDryRun'], variables['IsTestRun']), 1)]
          readonly: true

        workspace:
          clean: all

        steps:
        - download: none

        - task: PowerShell@2
          displayName: Get BAR ID
          inputs:
            filePath: $(Build.SourcesDirectory)/eng/release/Scripts/GetBarId.ps1
            arguments: >-
              -BuildId $(resources.pipeline.Build.runID)
              -TaskVariableName 'BarId'
          env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)

        - task: PowerShell@2
          displayName: Get Release Version
          inputs:
            filePath: $(Build.SourcesDirectory)/eng/release/Scripts/GetReleaseVersion.ps1
            arguments: >-
              -BarId $(BarId)
              -MaestroToken $(MaestroAccessToken)
              -TaskVariableName 'ReleaseVersion'

        - task: PowerShell@2
          displayName: Get Build Version
          inputs:
            filePath: $(Build.SourcesDirectory)/eng/release/Scripts/GetBuildVersion.ps1
            arguments: >-
              -BarId $(BarId)
              -MaestroToken $(MaestroAccessToken)
              -TaskVariableName 'BuildVersion'

        - powershell: |
            $buildName = "${env:ReleaseVersion} [${env:BuildVersion}]"
            if ($env:IsDryRun -eq 'true') {
              $buildName += "[Dry]"
            }
            if ($env:IsTestRun -eq 'true') {
              $buildName += "[Test]"
            }
            $buildName += "[Run ${env:RunRevision}]"
            Write-Host "##vso[build.updatebuildnumber]$buildName"
          displayName: Set Name

    - stage: Publish
      dependsOn:
      - Validation

      jobs:
      - deployment: PublishToStorageAccounts
        displayName: Publish to Storage Accounts

        ${{ if eq(parameters.IsTestRun, 'true') }}:
          environment: Diagnostics-Monitor-Storage-Test
        ${{ else }}:
          environment: Diagnostics-Monitor-Storage-DotNetCli

        variables:
        - ${{ if eq(parameters.IsTestRun, 'true') }}:
          - name: DestinationAccountName
            value: monitortestcli
          - name: ChecksumsAccountName
            value: monitortestchecksums
        - ${{ else }}:
          - name: DestinationAccountName
            value: dotnetcli
          - name: ChecksumsAccountName
            value: dotnetclichecksums

        workspace:
          clean: all

        strategy:
          runOnce:
            deploy:
              steps:
              - checkout: self
              - download: none

              - task: PowerShell@2
                displayName: Install AzCopy
                inputs:
                  filePath: $(Build.SourcesDirectory)/eng/release/Scripts/InstallAzCopy.ps1
                  arguments: >-
                    -ToolsDirectory $(Agent.ToolsDirectory)
                    -TaskVariableName 'AzCopyPath'

              - task: PowerShell@2
                displayName: Get BAR ID
                inputs:
                  filePath: $(Build.SourcesDirectory)/eng/release/Scripts/GetBarId.ps1
                  arguments: >-
                    -BuildId $(resources.pipeline.Build.runID)
                    -TaskVariableName 'BarId'
                env:
                  SYSTEM_ACCESSTOKEN: $(System.AccessToken)

              - task: PowerShell@2
                displayName: Get Release Version
                inputs:
                  filePath: $(Build.SourcesDirectory)/eng/release/Scripts/GetReleaseVersion.ps1
                  arguments: >-
                    -BarId $(BarId)
                    -MaestroToken $(MaestroAccessToken)
                    -TaskVariableName 'ReleaseVersion'

              - task: PowerShell@2
                displayName: Get Build Version
                inputs:
                  filePath: $(Build.SourcesDirectory)/eng/release/Scripts/GetBuildVersion.ps1
                  arguments: >-
                    -BarId $(BarId)
                    -MaestroToken $(MaestroAccessToken)
                    -TaskVariableName 'BuildVersion'

              - powershell: Install-PackageProvider -Name NuGet -Force -Scope CurrentUser
                displayName: Install NuGet PowerShell Package Provider

              - powershell: Install-Module Az.Storage -Force -Scope CurrentUser -AllowClobber -Verbose -RequiredVersion 5.10.1
                displayName: Install Az.Storage Module 5.10.1

              - task: AzureCLI@2
                displayName: Publish Assets
                inputs:
                  # It seems that azureSubscription can't use runtime expressions, so we need to use a compile time expression
                  # to set it.
                  ${{ if eq(parameters.IsTestRun, 'true') }}:
                    azureSubscription: dotnet-monitor-test-publish
                  ${{ else }}:
                    azureSubscription: dotnet-monitor-cli-storage-accounts-publish
                  # Save the service principal details to the environment so that azcopy can use them
                  addSpnToEnvironment: true
                  scriptType: ps
                  scriptLocation: scriptPath
                  scriptPath: $(Build.SourcesDirectory)/eng/release/Scripts/PublishToBlobAccounts.ps1
                  arguments: >-
                    -AzCopyPath $(AzCopyPath)
                    -BuildVersion $(BuildVersion)
                    -ReleaseVersion $(ReleaseVersion)
                    -DestinationAccountName $(DestinationAccountName)
                    -ChecksumsAccountName $(ChecksumsAccountName)
                    -WhatIf:${{ format('${0}', parameters.IsDryRun) }}

              - task: 1ES.PublishBuildArtifacts@1
                displayName: Publish Logs
                inputs:
                  PathtoPublish: '$(USERPROFILE)\.azcopy'
                  PublishLocation: Container
                  ArtifactName: AzCopyLogs
                continueOnError: true
                condition: succeededOrFailed()
