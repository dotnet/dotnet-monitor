trigger: none
pr: none

parameters:
- name: IsTestRun
  type: boolean
  default: true
- name: IsDryRun
  type: boolean
  default: true

variables:
- template: /eng/common/templates-official/variables/pool-providers.yml@self
- name: _TeamName
  value: DotNetCore
  readonly: true
- group: Release-Pipeline
- name: IsDryRun
  value: ${{ parameters.IsDryRun }}
  readonly: true
- name: IsTestRun
  value: ${{ parameters.IsTestRun }}
  readonly: true

resources:
  pipelines:
  - pipeline: Build
    source: dotnet-dotnet-monitor

extends:
  template: /eng/pipelines/templates/pipeline-template.yml@self
  parameters:
    sdl:
      sbom:
        enabled: false
    stages:
    - stage: Validation

      jobs:
      - job: Validate

        variables:
        # Allow for differentiation of runs of this pipeline
        # when running it with the same build repeatedly.
        - name: RunRevision
          value: $[counter(format('{0}|{1}|{2}', variables['resources.pipeline.Build.runID'], variables['IsDryRun'], variables['IsTestRun']), 1)]
          readonly: true

        workspace:
          clean: all

        steps:
        - download: none

        - task: PowerShell@2
          displayName: Get BAR ID
          inputs:
            targetType: 'inline'
            script: |
              $ErrorActionPreference = 'Stop'
              Set-StrictMode -Version 2.0
              
              $BuildId = "$(resources.pipeline.Build.runID)"
              $TaskVariableName = 'BarId'
              
              if ([String]::IsNullOrEmpty($env:System_AccessToken)) {
                  Write-Error 'System access token missing, this script needs access.'
              }
              
              $tagsUri = "${env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI}${env:SYSTEM_TEAMPROJECT}/_apis/build/builds/$BuildId/tags?api-version=6.0"
              $buildData = Invoke-RestMethod `
                  -Uri $tagsUri `
                  -Method 'GET' `
                  -Headers @{ 'accept' = 'application/json'; 'Authorization' = "Bearer ${env:System_AccessToken}" }
              
              Write-Verbose 'BuildData:'
              $buildDataJson = $buildData | ConvertTo-Json
              Write-Verbose $buildDataJson
              
              $barId = -1;
              $buildData.Value | Foreach-Object {
                  if ($_.StartsWith('BAR ID - ')) {
                      if ($barId -ne -1) {
                          Write-Error 'Multiple BAR IDs found in tags.'
                      }
                      $barId = $_.SubString(9)
                  }
              }
              
              if ($barId -eq -1) {
                  Write-Error 'Failed to get BAR ID from tags.'
              }
              
              Write-Verbose "BAR ID: $barId"
              
              Write-Host "##vso[task.setvariable variable=$TaskVariableName]$barId"
              Write-Output $barId
          env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)

        - task: AzureCLI@2
          displayName: Get Release Version
          inputs:
            azureSubscription: "Darc: Maestro Production"
            scriptType: ps
            scriptLocation: inlineScript
            inlineScript: |
              $ErrorActionPreference = 'Stop'
              Set-StrictMode -Version 2.0
              
              $BarId = "$(BarId)"
              $MaestroApiEndPoint = 'https://maestro.dot.net'
              $TaskVariableName = 'ReleaseVersion'
              
              # Get build data from Maestro API
              $buildUri = "$MaestroApiEndPoint/api/builds/$BarId"
              $buildData = Invoke-RestMethod -Uri $buildUri -Method 'GET' -Headers @{ 'accept' = 'application/json' }
              
              [array]$matchingData = $buildData.assets | Where-Object { $_.name -match '^dotnet-monitor$' }
              
              if (!$matchingData -or $matchingData.Length -ne 1) {
                  Write-Error 'Unable to obtain release version'
              }
              
              $version = $matchingData[0].version
              
              Write-Verbose "Release Version: $version"
              
              Write-Host "##vso[task.setvariable variable=$TaskVariableName]$version"
              Write-Output $version

        - task: AzureCLI@2
          displayName: Get Build Version
          inputs:
            azureSubscription: "Darc: Maestro Production"
            scriptType: ps
            scriptLocation: inlineScript
            inlineScript: |
              $ErrorActionPreference = 'Stop'
              Set-StrictMode -Version 2.0
              
              $BarId = "$(BarId)"
              $MaestroApiEndPoint = 'https://maestro.dot.net'
              $TaskVariableName = 'BuildVersion'
              
              # Get build data from Maestro API
              $buildUri = "$MaestroApiEndPoint/api/builds/$BarId"
              $buildData = Invoke-RestMethod -Uri $buildUri -Method 'GET' -Headers @{ 'accept' = 'application/json' }
              
              [array]$matchingData = $buildData.assets | Where-Object { $_.name -match 'MergedManifest.xml$' -and $_.nonShipping }
              
              if (!$matchingData -or $matchingData.Length -ne 1) {
                  Write-Error 'Unable to obtain build version.'
              }
              
              $version = $matchingData[0].version
              
              Write-Verbose "Build Version: $version"
              
              Write-Host "##vso[task.setvariable variable=$TaskVariableName]$version"
              Write-Output $version

        - powershell: |
            $buildName = "${env:ReleaseVersion} [${env:BuildVersion}]"
            if ($env:IsDryRun -eq 'true') {
              $buildName += "[Dry]"
            }
            if ($env:IsTestRun -eq 'true') {
              $buildName += "[Test]"
            }
            $buildName += "[Run ${env:RunRevision}]"
            Write-Host "##vso[build.updatebuildnumber]$buildName"
          displayName: Set Name

    - stage: Publish
      dependsOn:
      - Validation

      jobs:
      - deployment: PublishToStorageAccounts
        templateContext:
          type: releaseJob
          isProduction: true
        displayName: Publish to Storage Accounts

        ${{ if eq(parameters.IsTestRun, 'true') }}:
          environment: Diagnostics-Monitor-Storage-Test
        ${{ else }}:
          environment: Diagnostics-Monitor-Storage-DotNetCli

        variables:
        - ${{ if eq(parameters.IsTestRun, 'true') }}:
          - name: DestinationAccountName
            value: monitortestcli
          - name: ChecksumsAccountName
            value: monitortestchecksums
        - ${{ else }}:
          - name: DestinationAccountName
            value: dotnetcli
          - name: ChecksumsAccountName
            value: dotnetcli

        workspace:
          clean: all

        strategy:
          runOnce:
            deploy:
              steps:
              - checkout: self
              - download: none

              - task: PowerShell@2
                displayName: Install AzCopy
                inputs:
                  targetType: 'inline'
                  script: |
                    $ErrorActionPreference = 'Stop'
                    Set-StrictMode -Version 2.0
                    
                    $ToolsDirectory = "$(Agent.ToolsDirectory)"
                    $TaskVariableName = 'AzCopyPath'
                    
                    $url = 'https://aka.ms/downloadazcopy-v10-windows'
                    $basePath = Join-Path $ToolsDirectory 'azcopy'
                    
                    $zipPath = Join-Path $basePath 'azcopy.zip'
                    $toolDirPath = Join-Path $basePath 'azcopy'
                    $azCopyPath = Join-Path $toolDirPath 'azcopy.exe'
                    
                    if (Test-Path $azCopyPath) {
                        Write-Verbose 'Already installed'
                    } else {
                        if (!(Test-Path $basePath)) {
                            New-Item -ItemType 'Directory' -Path $basePath | Out-Null
                        }
                    
                        Write-Verbose 'Fetching...'
                        Invoke-WebRequest -Uri $url -OutFile $zipPath
                    
                        Write-Verbose 'Unzipping...'
                        Expand-Archive -LiteralPath $zipPath -Force -DestinationPath $basePath
                    
                        # There should only be one directory that is named like 'azcopy_windows_amd64_<version>'
                        Write-Verbose 'Renaming...'
                        $unpackDirName = Get-ChildItem -Path $basePath -Directory -Name
                        $unpackDirPath = Join-Path $basePath $unpackDirName
                        Rename-Item -Path $unpackDirPath -NewName 'azcopy'
                    
                        # Delete zip
                        Remove-Item -Path $zipPath
                    
                        Write-Verbose 'Finished'
                    }
                    
                    Write-Host "##vso[task.setvariable variable=$TaskVariableName]$azCopyPath"
                    Write-Output $azCopyPath

              - task: PowerShell@2
                displayName: Get BAR ID
                inputs:
                  targetType: 'inline'
                  script: |
                    $ErrorActionPreference = 'Stop'
                    Set-StrictMode -Version 2.0
                    
                    $BuildId = "$(resources.pipeline.Build.runID)"
                    $TaskVariableName = 'BarId'
                    
                    if ([String]::IsNullOrEmpty($env:System_AccessToken)) {
                        Write-Error 'System access token missing, this script needs access.'
                    }
                    
                    $tagsUri = "${env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI}${env:SYSTEM_TEAMPROJECT}/_apis/build/builds/$BuildId/tags?api-version=6.0"
                    $buildData = Invoke-RestMethod `
                        -Uri $tagsUri `
                        -Method 'GET' `
                        -Headers @{ 'accept' = 'application/json'; 'Authorization' = "Bearer ${env:System_AccessToken}" }
                    
                    Write-Verbose 'BuildData:'
                    $buildDataJson = $buildData | ConvertTo-Json
                    Write-Verbose $buildDataJson
                    
                    $barId = -1;
                    $buildData.Value | Foreach-Object {
                        if ($_.StartsWith('BAR ID - ')) {
                            if ($barId -ne -1) {
                                Write-Error 'Multiple BAR IDs found in tags.'
                            }
                            $barId = $_.SubString(9)
                        }
                    }
                    
                    if ($barId -eq -1) {
                        Write-Error 'Failed to get BAR ID from tags.'
                    }
                    
                    Write-Verbose "BAR ID: $barId"
                    
                    Write-Host "##vso[task.setvariable variable=$TaskVariableName]$barId"
                    Write-Output $barId
                env:
                  SYSTEM_ACCESSTOKEN: $(System.AccessToken)

              - task: AzureCLI@2
                displayName: Get Release Version
                inputs:
                  azureSubscription: "Darc: Maestro Production"
                  scriptType: ps
                  scriptLocation: inlineScript
                  inlineScript: |
                    $ErrorActionPreference = 'Stop'
                    Set-StrictMode -Version 2.0
                    
                    $BarId = "$(BarId)"
                    $MaestroApiEndPoint = 'https://maestro.dot.net'
                    $TaskVariableName = 'ReleaseVersion'
                    
                    # Get build data from Maestro API
                    $buildUri = "$MaestroApiEndPoint/api/builds/$BarId"
                    $buildData = Invoke-RestMethod -Uri $buildUri -Method 'GET' -Headers @{ 'accept' = 'application/json' }
                    
                    [array]$matchingData = $buildData.assets | Where-Object { $_.name -match '^dotnet-monitor$' }
                    
                    if (!$matchingData -or $matchingData.Length -ne 1) {
                        Write-Error 'Unable to obtain release version'
                    }
                    
                    $version = $matchingData[0].version
                    
                    Write-Verbose "Release Version: $version"
                    
                    Write-Host "##vso[task.setvariable variable=$TaskVariableName]$version"
                    Write-Output $version

              - task: AzureCLI@2
                displayName: Get Build Version
                inputs:
                  azureSubscription: "Darc: Maestro Production"
                  scriptType: ps
                  scriptLocation: inlineScript
                  inlineScript: |
                    $ErrorActionPreference = 'Stop'
                    Set-StrictMode -Version 2.0
                    
                    $BarId = "$(BarId)"
                    $MaestroApiEndPoint = 'https://maestro.dot.net'
                    $TaskVariableName = 'BuildVersion'
                    
                    # Get build data from Maestro API
                    $buildUri = "$MaestroApiEndPoint/api/builds/$BarId"
                    $buildData = Invoke-RestMethod -Uri $buildUri -Method 'GET' -Headers @{ 'accept' = 'application/json' }
                    
                    [array]$matchingData = $buildData.assets | Where-Object { $_.name -match 'MergedManifest.xml$' -and $_.nonShipping }
                    
                    if (!$matchingData -or $matchingData.Length -ne 1) {
                        Write-Error 'Unable to obtain build version.'
                    }
                    
                    $version = $matchingData[0].version
                    
                    Write-Verbose "Build Version: $version"
                    
                    Write-Host "##vso[task.setvariable variable=$TaskVariableName]$version"
                    Write-Output $version

              - powershell: Install-PackageProvider -Name NuGet -Force -Scope CurrentUser
                displayName: Install NuGet PowerShell Package Provider

              - powershell: Install-Module Az.Storage -Force -Scope CurrentUser -AllowClobber -Verbose -RequiredVersion 5.10.1
                displayName: Install Az.Storage Module 5.10.1

              - template: /eng/common/templates/steps/get-delegation-sas.yml
                parameters:
                  federatedServiceConnection: 'DotNetRelease-PME'
                  outputVariableName: 'DotNetCliDelegationSasTokenBase64'
                  base64Encode: true
                  storageAccount: 'dotnetcli'
                  container: 'dotnet'
                  permissions: 'racwl'

              - task: AzureCLI@2
                displayName: Publish Assets
                inputs:
                  # It seems that azureSubscription can't use runtime expressions, so we need to use a compile time expression
                  # to set it.
                  ${{ if eq(parameters.IsTestRun, 'true') }}:
                    azureSubscription: dotnet-monitor-test-publish
                  ${{ else }}:
                    azureSubscription: dotnet-monitor-cli-storage-accounts-publish
                  # Save the service principal details to the environment so that azcopy can use them
                  addSpnToEnvironment: true
                  scriptType: ps
                  scriptLocation: scriptPath
                  scriptPath: $(Build.SourcesDirectory)/eng/release/Scripts/PublishToBlobAccounts.ps1
                  arguments: >-
                    -AzCopyPath $(AzCopyPath)
                    -BuildVersion $(BuildVersion)
                    -ReleaseVersion $(ReleaseVersion)
                    -DestinationAccountName $(DestinationAccountName)
                    -DestinationSasTokenBase64 $Env:DestinationSasTokenBase64
                    -ChecksumsAccountName $(ChecksumsAccountName)
                    -WhatIf:${{ format('${0}', parameters.IsDryRun) }}
                env:
                  DestinationSasTokenBase64: $(DotNetCliDelegationSasTokenBase64)

              - task: 1ES.PublishBuildArtifacts@1
                displayName: Publish Logs
                inputs:
                  PathtoPublish: '$(USERPROFILE)\.azcopy'
                  PublishLocation: Container
                  ArtifactName: AzCopyLogs
                continueOnError: true
                condition: succeededOrFailed()
