trigger: none

pr:
  autoCancel: true
  branches:
    include:
    - main
    - release/*
    - internal/release/*
    - feature/*
  paths:
    exclude:
    - .devcontainer
    - .github
    - .vscode
    - .gitignore
    - cspell.json
    - eng/actions
    - '**.md'

parameters:
- name: testGroup
  displayName: 'Test Group'
  type: string
  default: Default
  values:
  - Default
  - All
  - None
  - CI
  - PR
- name: updateDocker
  displayName: 'Update dotnet-docker? (Only for release branches)'
  type: boolean
  default: false

variables:
- name: _TeamName
  value: DotNetCore
- name: _TPNFile
  value: THIRD-PARTY-NOTICES.TXT

- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
  # DotNet-Diagnostics-SDL-Params provides Tsa* variables for SDL checks.
  - group: DotNet-Diagnostics-SDL-Params

extends:
  template: /eng/pipelines/templates/pipeline-template.yml@self
  parameters:
    featureFlags:
      autoBaseline: true
    sdl:
      sbom:
        enabled: false
    stages:
    - stage: Build
      displayName: Build and Test
      jobs:
      - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
        # Generate a TPN for only the dotnet-monitor project
        - template: /eng/pipelines/jobs/tpn.yml@self

      # Build and test binaries
      - template: /eng/pipelines/jobs/platform-matrix.yml@self
        parameters:
          jobTemplate: /eng/pipelines/jobs/build-test.yml@self
          includeArm64: ${{ ne(variables['System.TeamProject'], 'public') }}
          includeDebug: true
          jobParameters:
            publishArtifacts: ${{ and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}
            testGroup: ${{ parameters.testGroup }}

    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - stage: Archive
        displayName: Archive
        dependsOn:
        - Build
        jobs:
        # Sign binaries before archiving
        - template: /eng/pipelines/jobs/sign-binaries.yml@self

        # Build RID (runtime identifier) archives
        - template: /eng/pipelines/jobs/platform-matrix.yml@self
          parameters:
            jobTemplate: /eng/pipelines/jobs/build-archive.yml@self
            includeArm64: ${{ ne(variables['System.TeamProject'], 'public') }}
# This stage creates NuGet packages and generates the BAR manifests
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - stage: PackSignPublish
        displayName: Pack, Sign, and Generate Manifests
        dependsOn:
        - Archive
        jobs:
        # Pack, sign, and publish manifest
        - template: /eng/pipelines/jobs/pack-sign-publish.yml@self

        # Register with BAR
        - template: /eng/common/templates-official/job/publish-build-assets.yml@self
          parameters:
            configuration: Release
            # Arcade 6.0 publish-build-assets.yml always sets the pool parameter, which
            # always overriding the pool set on the stage. Set it explicitly to match the stage.
            pool:
              name: NetCore1ESPool-Svc-Internal
              image: windows.vs2022preview.amd64
              os: windows
            dependsOn:
            - Pack_Sign
            publishUsingPipelines: true
      # These are the stages that perform validation of several SDL requirements and publish the bits required to the designated feed.
      - template: /eng/common/templates-official/post-build/post-build.yml@self
        parameters:
          # This is to enable SDL runs part of Post-Build Validation Stage.
          # as well as NuGet, SourceLink, and signing validation.
          # The variables get imported from group dotnet-diagnostics-sdl-params
          validateDependsOn:
          - PackSignPublish
          publishingInfraVersion: 3
          enableSourceLinkValidation: ${{ and(not(startsWith(variables['Build.SourceBranch'], 'refs/heads/internal/release/')), not(startsWith(variables['Build.SourceBranch'], 'refs/heads/test/release/'))) }}
          enableSigningValidation: true
          enableSymbolValidation: false
          enableNugetValidation: true
          publishInstallersAndChecksums: true
          SDLValidationParameters:
            enable: true
            continueOnError: true
            publishGdn: true
            params: >-
              -SourceToolsList @("policheck","credscan")
              -TsaInstanceURL $(_TsaInstanceURL)
              -TsaProjectName $(_TsaProjectName)
              -TsaNotificationEmail $(_TsaNotificationEmail)
              -TsaCodebaseAdmin $(_TsaCodebaseAdmin)
              -TsaBugAreaPath $(_TsaBugAreaPath)
              -TsaIterationPath $(_TsaIterationPath)
              -TsaRepositoryName "dotnet-monitor"
              -TsaCodebaseName "dotnet-monitor"
              -TsaPublish $True
              -PoliCheckAdditionalRunConfigParams @("UserExclusionPath < $(Build.SourcesDirectory)/eng/PoliCheckExclusions.xml")
            artifactNames:
            - 'PackageArtifacts'
    # This sets up the bits to do a Release.
    - template: /eng/pipelines/stages/preparerelease.yml@self
      parameters:
        ${{ if eq(parameters.updateDocker, 'true') }}:
          updateDockerCondition: true
        ${{ else }}:
          # If scheduled build from main and nightly update from main enabled
          updateDockerCondition: and(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.Reason'], 'Schedule'), eq(variables['NightlyUpdateDockerFromMain'], 'true'))
