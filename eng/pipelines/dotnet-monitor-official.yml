trigger: none

pr:
  autoCancel: true
  branches:
    include:
    - main
    - release/*
    - internal/release/*
    - feature/*
  paths:
    exclude:
    - .devcontainer
    - .github
    - .vscode
    - .gitignore
    - cspell.json
    - eng/actions
    - samples
    - '**.md'

schedules:
# Schedule before docker update pipeline
- cron: "0 3 * * Mon-Fri"
  displayName: M-F Scheduled Build
  branches:
    include:
    - main

parameters:
- name: testGroup
  displayName: 'Test Group'
  type: string
  default: Default
  values:
  - Default
  - All
  - None
  - CI
  - PR
- name: updateDocker
  displayName: 'Update dotnet-docker? (Only for release branches)'
  type: boolean
  default: false
- name: useHelix
  displayName: Use Helix Testing
  type: boolean
  default: true

variables:
- template: /eng/common/templates-official/variables/pool-providers.yml@self
- name: _TeamName
  value: DotNetCore
- name: _TPNFile
  value: THIRD-PARTY-NOTICES.TXT

extends:
  template: /eng/pipelines/templates/pipeline-template.yml@self
  parameters:
    featureFlags:
      autoBaseline: true
    sdl:
      binskim:
        enabled: true
      policheck:
        enabled: true
        exclusionsFile: $(Build.SourcesDirectory)/eng/PoliCheckExclusions.xml
      sbom:
        enabled: false
      tsa:
        enabled: true
    stages:
    - stage: Build
      displayName: Build and Test
      jobs:
      - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
        # Generate a TPN for only the dotnet-monitor project
        - template: /eng/pipelines/jobs/tpn.yml@self

      # Build and (optionally) test binaries
      - template: /eng/pipelines/jobs/platform-matrix.yml@self
        parameters:
          jobTemplate: /eng/pipelines/jobs/build-binaries.yml@self
          includeArm64: ${{ or(ne(variables['System.TeamProject'], 'public'), eq(parameters.useHelix, 'true')) }}
          includeDebug: true
          jobParameters:
            publishBinaries: true
            publishArtifacts: ${{ and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}

      - ${{ if ne(parameters.testGroup, 'None') }}:
        - template: /eng/pipelines/jobs/platform-matrix.yml@self
          parameters:
            jobTemplate: /eng/pipelines/jobs/test-binaries.yml@self
            includeArm64: ${{ parameters.useHelix }}
            jobParameters:
              testGroup: ${{ parameters.testGroup }}
              useHelix: ${{ parameters.useHelix }}

    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - stage: Archive
        displayName: Archive
        dependsOn:
        - Build
        jobs:
        # Sign binaries before archiving
        - template: /eng/pipelines/jobs/sign-binaries.yml@self

        # Build RID (runtime identifier) archives
        - template: /eng/pipelines/jobs/platform-matrix.yml@self
          parameters:
            jobTemplate: /eng/pipelines/jobs/build-archive.yml@self
            includeArm64: true
# This stage creates NuGet packages and generates the BAR manifests
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - stage: PackSignPublish
        displayName: Pack, Sign, and Generate Manifests
        dependsOn:
        - Archive
        jobs:
        # Pack, sign, and publish manifest
        - template: /eng/pipelines/jobs/pack-sign-publish.yml@self

        # Register with BAR
        - template: /eng/common/templates-official/job/publish-build-assets.yml@self
          parameters:
            configuration: Release
            dependsOn:
            - Pack_Sign
            publishUsingPipelines: true
      # These are the stages that perform validation of several SDL requirements and publish the bits required to the designated feed.
      - template: /eng/common/templates-official/post-build/post-build.yml@self
        parameters:
          # This is to enable SDL runs part of Post-Build Validation Stage.
          # as well as NuGet, SourceLink, and signing validation.
          # The variables get imported from group dotnet-diagnostics-sdl-params
          validateDependsOn:
          - PackSignPublish
          publishingInfraVersion: 3
          enableSourceLinkValidation: ${{ and(not(startsWith(variables['Build.SourceBranch'], 'refs/heads/internal/release/')), not(startsWith(variables['Build.SourceBranch'], 'refs/heads/test/release/'))) }}
          enableSigningValidation: true
          enableSymbolValidation: false
          enableNugetValidation: true
          publishInstallersAndChecksums: true
    # This sets up the bits to do a Release.
    - template: /eng/pipelines/stages/preparerelease.yml@self
      parameters:
        ${{ if eq(parameters.updateDocker, 'true') }}:
          updateDockerCondition: true
        ${{ else }}:
          # Scheduled builds of branches that match the variable AutoUpdateDockerBranches will update the dotnet-docker repository.
          # For example, "refs/heads/main;refs/heads/feature/9.x" means scheduled builds of the main and feature/9.x branches trigger the update.
          updateDockerCondition: and(contains(variables['AutoUpdateDockerBranches'], variables['Build.SourceBranch']), eq(variables['Build.Reason'], 'Schedule'))
