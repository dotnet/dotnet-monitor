name: $(Date:yyyyMMdd).$(Rev:r)
trigger: none
pr: none

parameters:
- name: DraftRelease
  type: boolean
  default: true

variables:
- template: /eng/common/templates-official/variables/pool-providers.yml@self
- name: _TeamName
  value: DotNetCore
- name: BAR_ID
  value: ''
- name: DRP_DownloadPath
  value: $(System.ArtifactsDirectory)\DarcDrop\$(DRP_ReleaseId)
- name: DRP_DraftRelease
  value: ${{ parameters.DraftRelease }}
- name: DRP_GithubOrg
  value: dotnet
- name: DRP_GithubRepo
  value: dotnet-monitor
- name: DRP_MonitorRelease
  value: $(Pipeline.Workspace)\dotnet-monitor_build\StagingToolAssetsLayout
- name: DRP_NugetFeed
  value: https://api.nuget.org/v3/index.json
- name: DRP_OutputManifestPath
  value: $(DRP_MonitorRelease)\publishManifest.json
- name: DRP_PublishSharePath
  value: $(DRP_BaseShare)\dotnet-monitor-$(DRP_ReleaseId)
- name: DRP_ReleaseId
  value: $(Build.BuildNumber)
- name: DRP_ReleaseNotes
  value: $(DRP_RepoRoot)\documentation\releaseNotes\releaseNotes.$(ShortReleaseVersion).md
- name: DRP_RepoRoot
  value: $(Build.SourcesDirectory)
- name: DRP_Verbose
  value: false
- name: Monitor_PublishedPackageCount
  value: 1

resources:
  pipelines:
  - pipeline: dotnet-monitor_build
    source: 'dotnet\dotnet-monitor\dotnet-dotnet-monitor'

extends:
  template: /eng/pipelines/templates/pipeline-template.yml@self
  parameters:
    sdl:
      sbom:
        enabled: false
    stages:
    - stage: Validation
      displayName: Pre-Release Verification
      variables:
      - group: Release-Pipeline
      jobs:
      - job: VerificationJob
        displayName: Release Verification
        condition: succeeded()
        timeoutInMinutes: 0
        steps:
        - checkout: self
        - download: dotnet-monitor_build
          artifact: StagingToolAssetsLayout
        - task: PowerShell@2
          displayName: Get BAR ID
          inputs:
            filePath: $(DRP_RepoRoot)\eng\release\Scripts\GetBarId.ps1
            arguments: -BuildId "$(resources.pipeline.dotnet-monitor_build.runID)" -TaskVariableName 'BarId'
          env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        - task: AzureCLI@2
          displayName: Get Release Version
          inputs:
            connectedServiceNameARM: 'Darc: Maestro Production'
            scriptType: ps
            scriptPath: $(DRP_RepoRoot)\eng\release\Scripts\GetReleaseVersion.ps1
            scriptArguments: -BarId "$(BarId)" -TaskVariableName 'ReleaseVersion' -IncludeV
        - task: PowerShell@2
          displayName: Get Short Release Version
          inputs:
            targetType: inline
            script: |
              if (-Not ('$(ReleaseVersion)' -match '^v(?<major>\d+)\.(?<minor>\d+)\.(?<patch>\d+)(-(?<versionLabel>[a-zA-Z]+)\.(?<iteration>\d+))?'))
              {
                  Write-Error "Unable to parse release version"
                  exit 1
              }
              if ($Matches.versionLabel)
              {
                  $shortVersion="$($Matches.major).$($Matches.minor).$($Matches.patch)-$($Matches.versionLabel).$($Matches.iteration)"
              }
              else
              {
                  $shortVersion="$($Matches.major).$($Matches.minor).$($Matches.patch)"
              }
              Write-Host "##vso[task.setvariable variable=ShortReleaseVersion]v$shortVersion"
        - task: PowerShell@2
          displayName: Set Release Name
          inputs:
            targetType: inline
            script: |
              # Write your PowerShell commands here.
              $newReleaseName = "${env:ReleaseVersion}-${env:BUILD_BUILDNUMBER}"
              if ("$(DRP_DraftRelease)" -eq "true") {
                  $newReleaseName += "[Draft]"
              }
              Write-Host "Setting release name to: $newReleaseName"
              Write-Host "##vso[build.updatebuildnumber]$newReleaseName"
        - task: PowerShell@2
          displayName: Check for Nuget Assets
          inputs:
            targetType: inline
            script: |-
              $nugetPath = "${env:DRP_MONITORRELEASE}\NugetAssets"
              Write-Host "Looking for nuget packages under $nugetPath"
              if (-not (Test-Path -path $nugetPath)) {
                  Write-Host "##vso[task.logissue type=error]Can't find file at $nugetPath"
                  exit 1
              }
              else {
                  $pkgs = Get-ChildItem -Path "$nugetPath" -Filter "*.nupkg" -Recurse
                  $measurePkgs = $pkgs | Measure-Object
                  if (${env:Monitor_PublishedPackageCount} -ne $measurePkgs.Count) {
                      Write-Host "##vso[task.logissue type=error]Expected ${env:Monitor_PublishedPackageCount} .nupkg files, found $($measurePkgs.Count) packages."
                  }
                  else {
                      Write-Host "Found $($measurePkgs.Count) packages, as expected."
                  }
              }
        - task: PowerShell@2
          displayName: Check for Release Notes
          inputs:
            targetType: inline
            script: |-
              $notesPath = $env:DRP_ReleaseNotes
              Write-Host "Looking for release notes at $notesPath"
              if (-not (Test-Path -path $notesPath)) {
                  Write-Host "##vso[task.logissue type=error]Can't find file at $notesPath"
                  exit 1
              }
              else {
                  $notesContent = Get-Content -Path $notesPath
                  Write-Host "Contents of $notesPath :"
                  Write-Host "$notesContent"
              }
      - job: PostDeploymentApprovalJob
        displayName: Post-Deployment Approval
        dependsOn: VerificationJob
        condition: succeeded()
        timeoutInMinutes: 0
        pool: server
        steps:
        - task: ManualValidation@1
          inputs:
            notifyUsers: |-
              [TEAM FOUNDATION]\.NET Monitor Working Group
            approvers: |-
              [TEAM FOUNDATION]\.NET Monitor Working Group
    - stage: Nuget
      displayName: Push To NuGet Feed
      dependsOn: Validation
      variables:
      - group: '.NET Core Nuget API Keys'
      jobs:
      - job: Job_1
        displayName: Push To NuGet
        condition: succeeded()
        timeoutInMinutes: 0
        steps:
        - checkout: self
        - download: dotnet-monitor_build
          artifact: StagingToolAssetsLayout
        - task: NuGetAuthenticate@0
          condition: and(succeeded(), ${{ eq(parameters.DraftRelease, false) }})
          displayName: Authenticate to AzDO Feeds
        - task: PowerShell@2
          displayName: Push To NuGet
          condition: and(succeeded(), ${{ eq(parameters.DraftRelease, false) }})
          inputs:
            filePath: $(DRP_RepoRoot)\eng\release\Scripts\PublishToNuget.ps1
            arguments: -ManifestPath $(DRP_OutputManifestPath) -StagingPath $(DRP_MonitorRelease) -FeedEndpoint $(DRP_NugetFeed) -FeedPat $(DotNetNugetApiKey-A4)
            failOnStderr: true
    - stage: Release
      displayName: Create GitHub Release
      dependsOn: Nuget
      condition: succeeded()
      variables:
      - group: Release-Pipeline
      jobs:
      - job: Job_1
        displayName: Create GitHub Release
        condition: succeeded()
        timeoutInMinutes: 0
        steps:
        - checkout: self
        - download: dotnet-monitor_build
          artifact: StagingToolAssetsLayout
        - task: PowerShell@2
          displayName: Get BAR ID
          inputs:
            filePath: $(DRP_RepoRoot)\eng\release\Scripts\GetBarId.ps1
            arguments: -BuildId "$(resources.pipeline.dotnet-monitor_build.runID)" -TaskVariableName 'BarId'
          env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        - task: AzureCLI@2
          displayName: Get Release Version
          inputs:
            connectedServiceNameARM: 'Darc: Maestro Production'
            scriptType: ps
            scriptPath: $(DRP_RepoRoot)\eng\release\Scripts\GetReleaseVersion.ps1
            scriptArguments: -BarId "$(BarId)" -TaskVariableName 'ReleaseVersion' -IncludeV
        - task: PowerShell@2
          displayName: Get Short Release Version
          inputs:
            targetType: inline
            script: |-
              if (-Not ('$(ReleaseVersion)' -match '^v(?<major>\d+)\.(?<minor>\d+)\.(?<patch>\d+)(-(?<versionLabel>[a-zA-Z]+)\.(?<iteration>\d+))?'))
              {
                  Write-Error "Unable to parse release version"
                  exit 1
              }
              if ($Matches.versionLabel)
              {
                  $shortVersion="$($Matches.major).$($Matches.minor).$($Matches.patch)-$($Matches.versionLabel).$($Matches.iteration)"
              }
              else
              {
                  $shortVersion="$($Matches.major).$($Matches.minor).$($Matches.patch)"
              }
              Write-Host "##vso[task.setvariable variable=ShortReleaseVersion]v$shortVersion"
        - task: PowerShell@2
          displayName: Generate Release
          inputs:
            filePath: $(DRP_RepoRoot)\eng\release\Scripts\GenerateGithubRelease.ps1
            arguments: -ManifestPath $(DRP_OutputManifestPath) -ReleaseNotes $(DRP_ReleaseNotes) -GhRepository $(DRP_GithubRepo) -GhOrganization $(DRP_GithubOrg) -TagName $(ReleaseVersion) -DraftRelease $$(DRP_DraftRelease)
            workingDirectory: $(DRP_RepoRoot)
          env:
            GITHUB_TOKEN: $(BotAccount-dotnet-bot-repo-PAT)


