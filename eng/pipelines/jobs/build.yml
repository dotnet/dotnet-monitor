# Builds dotnet-monitor for a specific platform and configuration

parameters:
  # Job prefix (required)
  prefix: ''
  # Operating system group (Windows, Linux, MacOS, etc)
  osGroup: Windows
  # Build configuration (Debug, Release)
  configuration: Release
  # Build architecture (arm64, x64, x86, etc)
  architecture: x64
  # Enables cross build from host target libraries and architectures
  enableCrossBuild: true
  # Docker container in which job steps shall be run (leave empty to choose default build container).
  # This should be empty unless exclusively testing on a specific container image.
  container: ''
  # Additional job variables
  variables: []
  # Additional steps to execute before build
  preBuildSteps: []
  # Additional steps to execute after build
  postBuildSteps: []
  # Job timeout
  timeoutInMinutes: 180
  # Job dependencies
  dependsOn: ''
  # Disable Component Governance injection and analysis
  disableComponentGovernance: ''
  # Disable SBOM generation
  disableSbom: false
  buildArgs: ''
  buildEnv: {}

jobs:
- template: /eng/common/templates/job/job.yml
  parameters:
    name: ${{ parameters.prefix }}_${{ parameters.configuration }}_${{ parameters.osGroup }}_${{ parameters.architecture }}
    displayName: ${{ format('{0} {1} {2} {3}', parameters.prefix, parameters.osGroup, parameters.architecture, parameters.configuration) }}
    timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
    enableTelemetry: true
    disableComponentGovernance: ${{ parameters.disableComponentGovernance }}
    ${{ if eq(parameters.disableSbom, 'true') }}:
      enableSbom: false
    helixRepo: dotnet/dotnet-monitor
    artifacts:
      publish:
        logs:
          name: Logs_$(JobName)

    pool:
      # Public Linux Build Pool
      ${{ if in(parameters.osGroup, 'Linux', 'Linux_Musl') }}:
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          name: $(DncEngPublicBuildPool)
          demands: ImageOverride -equals Build.Ubuntu.1804.Amd64.Open

        # Official Build Linux Pool
        ${{ if ne(variables['System.TeamProject'], 'public') }}:
          name: $(DncEngInternalBuildPool)
          demands: ImageOverride -equals Build.Ubuntu.1804.Amd64

      # Build OSX Pool
      ${{ if in(parameters.osGroup, 'MacOS') }}:
        vmImage: macos-11

      # Public Windows Build Pool
      ${{ if eq(parameters.osGroup, 'Windows') }}:
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          name: $(DncEngPublicBuildPool)
          demands: ImageOverride -equals windows.vs2022.amd64.open

        ${{ if ne(variables['System.TeamProject'], 'public') }}:
          name: $(DncEngInternalBuildPool)
          demands: ImageOverride -equals windows.vs2022.amd64

    ${{ if ne(parameters.container, '') }}:
      container: ${{ parameters.container }}
    ${{ else }}:
      # Fallback to default Linux x64 build container that optionally support cross building
      ${{ if eq(parameters.osGroup, 'Linux') }}:
        ${{ if eq(parameters.architecture, 'arm64') }}:
          container: mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-cross-arm64
        ${{ else }}:
          container: mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-cross-amd64
      ${{ if eq(parameters.osGroup, 'Linux_Musl') }}:
        ${{ if eq(parameters.architecture, 'arm64') }}:
          container: mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-cross-arm64-alpine
        ${{ else }}:
          container: mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-cross-amd64-alpine

    ${{ if ne(parameters.dependsOn, '') }}:
      dependsOn: ${{ parameters.dependsOn }}

    workspace:
      clean: all

    variables:
    - JobName: ${{ parameters.prefix }}_${{ parameters.configuration }}_${{ parameters.osGroup }}_${{ parameters.architecture }}
    - _BuildConfig: ${{ parameters.configuration }}
    - _CrossBuildArgs: ''
    - _InternalInstallArgs: ''
    - _InternalBuildArgs: ''
    - ${{ each variable in parameters.variables }}:
      - ${{ variable }}
    
    # Cross build for all Linux builds and arm64 non-Windows builds
    - ${{ if and(eq(parameters.enableCrossBuild, 'true'), or(in(parameters.osGroup, 'Linux', 'Linux_Musl'), and(eq(parameters.architecture, 'arm64'), ne(parameters.osGroup, 'Windows')))) }}:
      - _CrossBuildArgs: '-cross'

    - ${{ if eq(variables['System.TeamProject'], 'internal') }}:
      - group: DotNetBuilds storage account read tokens
      - _InternalInstallArgs: >-
          -RuntimeSourceFeed https://dotnetbuilds.blob.core.windows.net/internal
          -RuntimeSourceFeedKey $(dotnetbuilds-internal-container-read-token-base64)

    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - _InternalBuildArgs: >-
          /p:TeamName=$(_TeamName)
          /p:OfficialBuildId=$(BUILD.BUILDNUMBER)

    # Only enable publishing in non-public, non PR scenarios.
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - _HelixSource: official/dotnet/dotnet-monitor/$(Build.SourceBranch)
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
      - _HelixSource: pr-internal/dotnet/dotnet-monitor/$(Build.SourceBranch)
    - ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
      - _HelixSource: pr/dotnet/dotnet-monitor/$(Build.SourceBranch)

    - ${{ if eq(parameters.osGroup, 'Windows') }}:
      - scriptExt: '.cmd'
    - ${{ if ne(parameters.osGroup, 'Windows') }}:
      - scriptExt: '.sh'

    steps:
    - ${{ if ne(variables['System.TeamProject'], 'public') }}:
      - template: /eng/pipelines/steps/setup-nuget-sources.yml
        parameters:
          osGroup: ${{ parameters.osGroup }}

    - ${{ each step in parameters.preBuildSteps }}:
      - ${{ step }}

    - script: >-
        $(Build.SourcesDirectory)/eng/cibuild$(scriptExt)
        -configuration ${{ parameters.configuration }}
        -architecture ${{ parameters.architecture }}
        ${{ parameters.buildArgs }}
        $(_CrossBuildArgs)
        $(_InternalInstallArgs)
        $(_InternalBuildArgs)
      displayName: Build
      env:
        ${{ insert }}: ${{ parameters.buildEnv }}
        # Set ROOTFS_DIR for Linux cross builds
        ${{ if and(eq(parameters.enableCrossBuild, 'true'), in(parameters.osGroup, 'Linux', 'Linux_Musl')) }}:
          ROOTFS_DIR: '/crossrootfs/${{ parameters.architecture }}'

    - ${{ each step in parameters.postBuildSteps }}:
      - ${{ step }}
