<Project>
  <PropertyGroup>
    <!-- Since Arcade SDK's AfterSigning.proj file does not import the Arcade SDK, this
         setting is necessary because we are manually importing the Arcade SDK targets
         below in order to get the GenerateChecksums target. -->
    <_SuppressSdkImports>false</_SuppressSdkImports>
    <PublishingVersion>3</PublishingVersion>
  </PropertyGroup>

  <PropertyGroup>
    <PublishDependsOnTargets>$(PublishDependsOnTargets);CollectPackageArtifactFiles;CollectBundleArtifactFiles</PublishDependsOnTargets>
  </PropertyGroup>

  <Target Name="CalculateBuildVersion">
    <PropertyGroup>
      <!--
        This computes the original version without considering the effect of DotNetFinalVersionKind.
        This can be used to uniquely identify a version of a specific build even if the build produces
        stable package versions.
        -->
      <_BuildVersion>$(_OriginalVersionPrefix)-$(_PreReleaseLabel)$(_BuildNumberLabels)</_BuildVersion>
    </PropertyGroup>
  </Target>

  <ItemGroup>
    <PackageFile Include="$(ArtifactsShippingPackagesDir)**/*.tar.gz" IsShipping="true" />
    <PackageFile Include="$(ArtifactsShippingPackagesDir)**/*.zip" IsShipping="true" />
    <PackageFile Include="$(ArtifactsNonShippingPackagesDir)**/*.tar.gz" IsShipping="false" />
    <PackageFile Include="$(ArtifactsNonShippingPackagesDir)**/*.zip" IsShipping="false" />
  </ItemGroup>

  <ItemGroup>
    <BundleFile Include="$(ArtifactsNonShippingBundlesDir)*" IsShipping="false" />
  </ItemGroup>

  <Target Name="GenerateChecksumsForPackages">
    <ItemGroup>
      <!-- Generate checksums for non-symbols packages -->
      <GenerateChecksumItems Include="@(PackageFile)" Condition="!$([System.String]::Copy(%(Filename)).Contains('symbols'))">
        <DestinationPath>%(FullPath).sha512</DestinationPath>
      </GenerateChecksumItems>
    </ItemGroup>

    <GenerateChecksums Items="@(GenerateChecksumItems)" />

    <!-- Gather all checksum values of each shipping asset. -->
    <ItemGroup>
      <ShippingChecksums Include="@(GenerateChecksumItems)" Condition="'%(IsShipping)' == 'true'">
        <ChecksumValue>$([System.IO.File]::ReadAllText('%(DestinationPath)').ToLowerInvariant())</ChecksumValue>
      </ShippingChecksums>
    </ItemGroup>

    <!-- Write checksums of each shipping asset into a single file. -->
    <WriteLinesToFile File="$(ArtifactsShippingPackagesDir)$(Version)-sha.txt"
                      Lines="@(ShippingChecksums->'%(ChecksumValue) %(Filename)%(Extension)')"/>
  </Target>

  <!-- Run the CollectPackageArtifactFiles target on each PackageFile by target batching on a non-existing file.
       This allows using the ReadLinesFromFile task to read the blob group file, which was written with WriteLinesToFile,
       thus avoiding erroneously reading in the newline at the end of the blob group file. -->
  <Target Name="CollectPackageArtifactFiles"
          DependsOnTargets="CalculateBuildVersion;GenerateChecksumsForPackages"
          Inputs="@(PackageFile)"
          Outputs="%(PackageFile.Identity).notexist">

    <!-- Package artifact file paths -->
    <PropertyGroup>
      <_ChecksumFilePath>%(PackageFile.FullPath).sha512</_ChecksumFilePath>
    </PropertyGroup>

    <!-- Calculate manifest artifact data for each file type. -->
    <ItemGroup>
      <_CommonArtifactData Include="NonShipping=true" Condition="'%(PackageFile.IsShipping)' != 'true'" />
    </ItemGroup>

    <!-- Capture items that need to be published under the build version container. -->
    <ItemGroup>
      <_VersionContainerBlobItem Include="$(_ChecksumFilePath)" Condition="Exists('$(_ChecksumFilePath)')">
        <ManifestArtifactData Condition="'@(_CommonArtifactData)' != ''">@(_CommonArtifactData)</ManifestArtifactData>
      </_VersionContainerBlobItem>
      <_VersionContainerBlobItem Include="%(PackageFile.FullPath)" Condition="Exists('%(PackageFile.FullPath)')" >
        <ManifestArtifactData Condition="'@(_CommonArtifactData)' != ''">@(_CommonArtifactData)</ManifestArtifactData>
      </_VersionContainerBlobItem>
    </ItemGroup>

    <!-- Add artifact items to be pushed to blob feed -->
    <ItemGroup>
      <ItemsToPushToBlobFeed Include="@(_VersionContainerBlobItem)" Condition="'$(_BuildVersion)' != ''">
        <!-- Place blobs into versioned container so that stable package versions do not collide. -->
        <RelativeBlobPath>diagnostics/monitor/$(_BuildVersion)/%(_VersionContainerBlobItem.Filename)%(_VersionContainerBlobItem.Extension)</RelativeBlobPath>
        <PublishFlatContainer>true</PublishFlatContainer>
      </ItemsToPushToBlobFeed>
    </ItemGroup>
  </Target>

  <Target Name="CollectBundleArtifactFiles"
          DependsOnTargets="CalculateBuildVersion">
    <ItemGroup>
      <ItemsToPushToBlobFeed Include="@(BundleFile)"
                             RemoveMetadata="IsShipping"
                             Condition="'$(_BuildVersion)' != ''">
        <!-- Place blobs into versioned container so that stable versions (or lack of version) do not collide. -->
        <RelativeBlobPath>diagnostics/monitor/$(_BuildVersion)/%(BundleFile.Filename)%(BundleFile.Extension)</RelativeBlobPath>
        <ManifestArtifactData Condition="'%(BundleFile.IsShipping)' != 'true'">NonShipping=true</ManifestArtifactData>
        <PublishFlatContainer>true</PublishFlatContainer>
      </ItemsToPushToBlobFeed>
    </ItemGroup>
  </Target>

  <Import Project="Sdk.targets" Sdk="Microsoft.DotNet.Arcade.Sdk" />
</Project>
