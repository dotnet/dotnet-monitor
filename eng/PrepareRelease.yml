stages:
- stage: PrepareReleaseStage
  displayName: Release Preparation
  dependsOn:
  - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')) }}:
    - publish_using_darc
  jobs:
  - job: PrepareReleaseJob
    displayName: Prepare release with Darc
    pool: 
      vmImage: windows-latest
    variables:
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')) }}:
      - group: DotNet-Diagnostics-Storage
      - group: DotNet-DotNetStage-Storage
      - group: Release-Pipeline
      - name: BARBuildId
        value: $[ stageDependencies.publish_using_darc.setupMaestroVars.outputs['setReleaseVars.BARBuildId'] ]
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core runtime 3.1.x'
      inputs:
        packageType: runtime
        version: 3.1.x
        installationPath: '$(Build.Repository.LocalPath)\.dotnet'
    - ${{ if not(and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))) }}:
      - script: '$(Build.SourcesDirectory)\dotnet.cmd build $(Build.Repository.LocalPath)\eng\release\DiagnosticsReleaseTool\DiagnosticsReleaseTool.csproj -c Release /bl'
        workingDirectory: '$(System.ArtifactsDirectory)\'
        displayName: 'Build Manifest generation and asset publishing tool'
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(System.ArtifactsDirectory)\'
          publishLocation: 'pipeline'
          artifact: 'DiagnosticsReleaseToolBin'
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')) }}:
      - task: PowerShell@2
        displayName: 'DARC Gather build'
        inputs:
          targetType: filePath
          filePath: '$(Build.Repository.LocalPath)/eng/release/Scripts/AcquireBuild.ps1'
          arguments: >-
            -BarBuildId "$(BARBuildId)" 
            -AzdoToken "$(dn-bot-dotnet-all-scopes)" 
            -MaestroToken "$(MaestroAccessToken)" 
            -GitHubToken "$(BotAccount-dotnet-bot-repo-PAT)" 
            -DownloadTargetPath "$(System.ArtifactsDirectory)\ReleaseTarget" 
            -SasSuffixes "$(dotnetclichecksumsmsrc-dotnet-read-list-sas-token),$(dotnetclimsrc-read-sas-token)" 
            -ReleaseVersion "$(Build.BuildNumber)"
          workingDirectory: '$(Build.Repository.LocalPath)'
      - script: >-
          dotnet.cmd run --project $(Build.Repository.LocalPath)\eng\release\DiagnosticsReleaseTool\DiagnosticsReleaseTool.csproj -c Release
          --
          prepare-release 
          --input-drop-path "$(System.ArtifactsDirectory)\ReleaseTarget" 
          --tool-manifest "$(Build.Repository.LocalPath)\eng\release\tool-list.json" 
          --staging-directory "$(System.ArtifactsDirectory)\ReleaseStaging" 
          --release-name "$(Build.BuildNumber)" 
          --account-name "$(dotnet-diagnostics-storage-accountname)" 
          --account-key "$(dotnetstage-storage-key)" 
          --sas-valid-days "$(dotnet-diagnostics-storage-retentiondays)" 
          -v True
        workingDirectory: '$(Build.Repository.LocalPath)\'
        displayName: 'Manifest generation and asset publishing'
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(System.ArtifactsDirectory)\ReleaseStaging'
          publishLocation: 'pipeline'
          artifact: 'MonitorRelease'
      - task: tagBuildOrRelease@0      
        displayName: 'Tag Build with Monitor Release'
        inputs:
          type: 'Build'
          tags: 'MonitorRelease'
