parameters:
  # Job name
  name: ''
  displayName: ''
  osGroup: Windows
  configuration: Release
  architecture: x64
  # Additional variables
  variables: {}
  # Optional: Job timeout
  timeoutInMinutes: 180
  # Depends on 
  dependsOn: ''
  # Sub path under 'artifacts' folder from which files are published to artifacts location
  publishArtifactsSubPath: ''
  # Sub path under artifacts location to which artifact files are publish
  publishArtifactsTargetSubPath: ''
  # Allow disabling test runs
  runTests: true
  # TFMs for which test results are uploaded
  testResultTfms:
  - key: netcoreapp3.1
    value: Core 3.1
  - key: net5.0
    value: .NET 5
  - key: net6.0
    value: .NET 6

jobs:
- template: /eng/common/templates/job/job.yml
  parameters:
    name: ${{ parameters.name }}
    displayName: ${{ coalesce(parameters.displayName, parameters.name) }}
    timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
    enableMicrobuild: true
    enableTelemetry: true
    disableComponentGovernance: ${{ eq(parameters.osGroup, 'Linux_Musl') }}
    helixRepo: dotnet/dotnet-monitor
    artifacts:
      publish:
        logs:
          name: Logs_${{ parameters.osGroup }}_${{ parameters.architecture }}_${{ parameters.configuration }}

    pool:
      # Public Linux Build Pool
      ${{ if in(parameters.osGroup, 'Linux', 'Linux_Musl') }}:
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          name: NetCore1ESPool-Public
          demands: ImageOverride -equals Build.Ubuntu.1804.Amd64.Open

        # Official Build Linux Pool
        ${{ if ne(variables['System.TeamProject'], 'public') }}:
          name: NetCore1ESPool-Internal
          demands: ImageOverride -equals Build.Ubuntu.1804.Amd64

      # Build OSX Pool
      ${{ if in(parameters.osGroup, 'MacOS') }}:
        vmImage: macOS-10.15

      # Public Windows Build Pool
      ${{ if eq(parameters.osGroup, 'Windows') }}:
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          name: NetCore1ESPool-Public
          demands: ImageOverride -equals Build.Windows.10.Amd64.VS2019.Open

        ${{ if ne(variables['System.TeamProject'], 'public') }}:
          name: NetCore1ESPool-Internal
          demands: ImageOverride -equals Build.Windows.10.Amd64.VS2019

    ${{ if eq(parameters.osGroup, 'Linux') }}:
      container: mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7-20210714125435-9b5bbc2

    # CMake + Clang is broken on Alpine 3.14 prereqs image
    ${{ if eq(parameters.osGroup, 'Linux_Musl') }}:
      container: mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.13-WithNode-20210910135845-c401c85

    ${{ if ne(parameters.dependsOn, '') }}:
      dependsOn: ${{ parameters.dependsOn }}

    workspace:
      clean: all

    variables:
    - ${{ insert }}: ${{ parameters.variables }}
    - _BuildConfig: ${{ parameters.configuration }}
    - _HelixType: build/product
    - _HelixBuildConfig: ${{ parameters.configuration }}
    - _TestArgs: ''
    - _InternalInstallArgs: ''
    - _InternalBuildArgs: ''

    # Component Governance does not work on Musl
    - ${{ if eq(parameters.osGroup, 'Linux_Musl') }}:
      - skipComponentGovernanceDetection: true
    
    - ${{ if eq(parameters.runTests, true) }}:
      - _TestArgs: '-test'

    - ${{ if eq(variables['System.TeamProject'], 'internal') }}:
      - group: DotNet-MSRC-Storage
      - _InternalInstallArgs: >-
          -RuntimeSourceFeed https://dotnetclimsrc.blob.core.windows.net/dotnet
          -RuntimeSourceFeedKey $(dotnetclimsrc-read-sas-token-base64)

    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - _InternalBuildArgs: >-
          /p:TeamName=$(_TeamName)
          /p:OfficialBuildId=$(BUILD.BUILDNUMBER)

    # Only enable publishing in non-public, non PR scenarios.
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - _HelixSource: official/dotnet/dotnet-monitor/$(Build.SourceBranch)
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
      - _HelixSource: pr-internal/dotnet/dotnet-monitor/$(Build.SourceBranch)
    - ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
      - _HelixSource: pr/dotnet/dotnet-monitor/$(Build.SourceBranch)

    - ${{ if eq(parameters.osGroup, 'Windows') }}:
      - scriptExt: '.cmd'
    - ${{ if ne(parameters.osGroup, 'Windows') }}:
      - scriptExt: '.sh'

    steps:
    - ${{ if ne(variables['System.TeamProject'], 'public') }}:
      - ${{ if eq(parameters.osGroup, 'Windows') }}:
        - task: PowerShell@2
          displayName: Setup Private Feeds Credentials
          inputs:
            filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.ps1
            arguments: -ConfigFile $(Build.SourcesDirectory)/NuGet.config -Password $Env:Token
          env:
            Token: $(dn-bot-dnceng-artifact-feeds-rw)
      - ${{ if ne(parameters.osGroup, 'Windows') }}:
        - task: Bash@3
          displayName: Setup Private Feeds Credentials
          inputs:
            filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.sh
            arguments: $(Build.SourcesDirectory)/NuGet.config $Token
          env:
            Token: $(dn-bot-dnceng-artifact-feeds-rw)

    - script: >-
        $(Build.SourcesDirectory)/eng/cibuild$(scriptExt)
        -configuration ${{ parameters.configuration }}
        -architecture ${{ parameters.architecture }}
        $(_TestArgs)
        $(_InternalInstallArgs)
        $(_InternalBuildArgs)
      displayName: Build and Test

    - ${{ if and(ne(variables['System.TeamProject'], 'public'), ne(parameters.publishArtifactsSubPath, '')) }}:
      - task: CopyFiles@2
        displayName: Gather Artifacts
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)/artifacts/${{ parameters.publishArtifactsSubPath }}'
          Contents: '**'
          TargetFolder: '$(Build.ArtifactStagingDirectory)/artifacts/${{ coalesce(parameters.publishArtifactsTargetSubPath, parameters.publishArtifactsSubPath) }}'

      - task: PublishBuildArtifacts@1
        displayName: Publish Artifacts
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)/artifacts'
          artifactName: Build_${{ parameters.configuration }}

    # Publish test results to Azure Pipelines
    - ${{ if eq(parameters.runTests, true) }}:
      - ${{ each testResultTfm in parameters.testResultTfms }}:
        - task: PublishTestResults@2
          displayName: Publish Test Results (${{ testResultTfm.value }})
          inputs:
            testResultsFormat: VSTest
            testResultsFiles: '**/*Tests*${{ testResultTfm.key }}*.trx'
            searchFolder: '$(Build.SourcesDirectory)/artifacts/TestResults'
            failTaskOnFailedTests: true
            testRunTitle: '${{ coalesce(parameters.displayName, parameters.name) }} ${{ testResultTfm.value }}'
            publishRunAttachments: true
            mergeTestResults: true
            buildConfiguration: ${{ parameters.name }}
          continueOnError: true
          condition: succeededOrFailed()

      - ${{ if ne(variables['System.TeamProject'], 'public') }}:
        - task: PublishBuildArtifacts@1
          displayName: Publish Test Result Files
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
            PublishLocation: Container
            ArtifactName: TestResults_${{ parameters.osGroup }}_${{ parameters.architecture }}_${{ parameters.configuration }}
          continueOnError: true
          condition: succeededOrFailed()
