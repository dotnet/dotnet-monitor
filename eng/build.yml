parameters:
  # Job name
  name: ''
  displayName: ''
  osGroup: Windows
  configuration: Release
  platform: x64
  # Additional variables
  variables: {}
  # Optional: Job timeout
  timeoutInMinutes: 180
  # Depends on 
  dependsOn: ''

jobs:
- template: /eng/common/templates/job/job.yml
  parameters:
    name: ${{ parameters.name }}
    displayName: ${{ coalesce(parameters.displayName, parameters.name) }}
    timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
    enableMicrobuild: true
    enableTelemetry: true
    helixRepo: dotnet/dotnet-monitor
    artifacts:
      publish:
        logs: true
        ${{ if ne(variables['System.TeamProject'], 'public') }}:
          artifacts: true
          manifests: true

    pool:
      # Public Linux Build Pool
      ${{ if in(parameters.osGroup, 'Linux', 'Linux-musl') }}:
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          vmImage: ubuntu-16.04

        # Official Build Linux Pool
        ${{ if ne(variables['System.TeamProject'], 'public') }}:
          name: NetCoreInternal-Pool
          queue: BuildPool.Ubuntu.1604.Amd64

      # Build OSX Pool
      ${{ if in(parameters.osGroup, 'MacOS') }}:
        vmImage: macOS-10.15

      # Public Windows Build Pool
      ${{ if eq(parameters.osGroup, 'Windows') }}:
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          vmImage: windows-2019

        ${{ if ne(variables['System.TeamProject'], 'public') }}:
          name: NetCoreInternal-Pool
          queue: BuildPool.Windows.10.Amd64.VS2019

    ${{ if eq(parameters.osGroup, 'Linux') }}:
      container: mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7-359e48e-20200313130914

    ${{ if eq(parameters.osGroup, 'Linux-musl') }}:
      container: mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.9-WithNode-20200602002639-0fc54a3

    ${{ if ne(parameters.dependsOn, '') }}:
      dependsOn: ${{ parameters.dependsOn }}

    workspace:
      clean: all

    variables: 
    - ${{ insert }}: ${{ parameters.variables }}
    - _BuildConfig: ${{ parameters.configuration }}
    - _HelixType: build/product
    - _HelixBuildConfig: ${{ parameters.configuration }}
    - _SignType: test
    - _InternalBuildArgs: ''
    - _InternalPublishArgs: ''
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - _SignType: real
      - _InternalBuildArgs: >-
          -pack -sign
          /p:DotNetSignType=$(_SignType)
          /p:TeamName=$(_TeamName)
          /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
      - _InternalPublishArgs: -publish /p:DotNetPublishUsingPipelines=true

    # Only enable publishing in non-public, non PR scenarios.
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - _HelixSource: official/dotnet/dotnet-monitor/$(Build.SourceBranch)
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
      - _HelixSource: pr-internal/dotnet/dotnet-monitor/$(Build.SourceBranch)
    - ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
      - _HelixSource: pr/dotnet/dotnet-monitor/$(Build.SourceBranch)

    - ${{ if eq(parameters.osGroup, 'Windows') }}:
      - scriptExt: '.cmd'
    - ${{ if ne(parameters.osGroup, 'Windows') }}:
      - scriptExt: '.sh'

    steps:
    - script: >-
        $(Build.SourcesDirectory)/build$(scriptExt)
        -ci
        -c ${{ parameters.configuration }}
        -platform ${{ parameters.platform }}
        -prepareMachine
        $(_InternalBuildArgs)
        $(_InternalPublishArgs)
      displayName: Build
      condition: succeeded()

    # TODO: When there's actual tests to run, add a -test to the parameter above.
    #       a better idea might be to run these in helix.
    # # Publish test results to Azure Pipelines
    # - task: PublishTestResults@2
    #   inputs:
    #     testResultsFormat: xUnit
    #     testResultsFiles: '**/*UnitTests*.xml' 
    #     searchFolder: '$(Build.SourcesDirectory)/artifacts/TestResults'
    #     failTaskOnFailedTests: true
    #     testRunTitle: 'Tests ${{ parameters.name }}'
    #     publishRunAttachments: true
    #     mergeTestResults: true
    #     buildConfiguration: ${{ parameters.name }}
    #   continueOnError: true
