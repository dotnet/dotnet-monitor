parameters:
  # Job name
  name: ''
  displayName: ''
  osGroup: Windows
  configuration: Release
  architecture: x64
  # Additional variables
  variables: {}
  # Optional: Job timeout
  timeoutInMinutes: 180
  # Depends on 
  dependsOn: ''
  # Sub paths under 'artifacts' folder from which files are published to artifacts location
  publishArtifactsSubPaths: []
  # Group of tests to be run
  testGroup: Default
  # TFMs for which test results are uploaded
  testResultTfms:
  - key: netcoreapp3.1
    value: Core 3.1
  - key: net6.0
    value: .NET 6
  - key: net7.0
    value: .NET 7

jobs:
- template: /eng/common/templates/job/job.yml
  parameters:
    name: ${{ parameters.name }}
    displayName: ${{ coalesce(parameters.displayName, parameters.name) }}
    timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
    enableMicrobuild: true
    enableTelemetry: true
    disableComponentGovernance: ${{ eq(parameters.osGroup, 'Linux_Musl') }}
    helixRepo: dotnet/dotnet-monitor
    artifacts:
      publish:
        logs:
          name: Logs_${{ parameters.osGroup }}_${{ parameters.architecture }}_${{ parameters.configuration }}

    pool:
      # Public Linux Build Pool
      ${{ if in(parameters.osGroup, 'Linux', 'Linux_Musl') }}:
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          name: NetCore-Public
          demands: ImageOverride -equals Build.Ubuntu.1804.Amd64.Open

        # Official Build Linux Pool
        ${{ if ne(variables['System.TeamProject'], 'public') }}:
          name: NetCore1ESPool-Internal
          demands: ImageOverride -equals Build.Ubuntu.1804.Amd64

      # Build OSX Pool
      ${{ if in(parameters.osGroup, 'MacOS') }}:
        vmImage: macos-11

      # Public Windows Build Pool
      ${{ if eq(parameters.osGroup, 'Windows') }}:
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          name: NetCore-Public
          demands: ImageOverride -equals windows.vs2019.amd64.open

        ${{ if ne(variables['System.TeamProject'], 'public') }}:
          name: NetCore1ESPool-Internal
          demands: ImageOverride -equals windows.vs2019.amd64

    ${{ if eq(parameters.osGroup, 'Linux') }}:
      ${{ if eq(parameters.architecture, 'arm64') }}:
        container: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-cross-arm64-20220312201346-b2c2436
      ${{ else }}:
        container: mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7-20220107135107-9b5bbc2

    ${{ if eq(parameters.osGroup, 'Linux_Musl') }}:
      ${{ if eq(parameters.architecture, 'arm64') }}:
        container: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-cross-arm64-alpine-20220312201346-538077f
      ${{ else }}:
        # CMake + Clang is broken on Alpine 3.14 prereqs image
        container: mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.13-WithNode-20211214164113-c401c85

    ${{ if ne(parameters.dependsOn, '') }}:
      dependsOn: ${{ parameters.dependsOn }}

    workspace:
      clean: all

    variables:
    - ${{ insert }}: ${{ parameters.variables }}
    - _BuildConfig: ${{ parameters.configuration }}
    - _HelixType: build/product
    - _HelixBuildConfig: ${{ parameters.configuration }}
    - _CrossBuildArgs: ''
    - _TestArgs: ''
    - _InternalInstallArgs: ''
    - _InternalBuildArgs: ''

    # Component Governance does not work on Musl
    - ${{ if eq(parameters.osGroup, 'Linux_Musl') }}:
      - skipComponentGovernanceDetection: true
    
    # Cross build for arm64 non-Windows builds
    - ${{ if and(eq(parameters.architecture, 'arm64'), ne(parameters.osGroup, 'Windows')) }}:
      - _CrossBuildArgs: '-cross'

    - ${{ if ne(parameters.testGroup, 'None') }}:
      # If TestGroup == 'Default', choose the test group based on the type of pipeline run
      - ${{ if eq(parameters.testGroup, 'Default') }}:
        - ${{ if in(variables['Build.Reason'], 'BatchedCI', 'IndividualCI') }}:
          - _TestArgs: '-test -testgroup CI'
        - ${{ elseif eq(variables['Build.Reason'], 'PullRequest') }}:
          - _TestArgs: '-test -testgroup PR'
        - ${{ else }}:
          - _TestArgs: '-test -testgroup All'
      - ${{ else }}:
          - _TestArgs: '-test -testgroup ${{ parameters.testGroup }}'

    - ${{ if eq(variables['System.TeamProject'], 'internal') }}:
      - group: DotNet-MSRC-Storage
      - _InternalInstallArgs: >-
          -RuntimeSourceFeed https://dotnetclimsrc.blob.core.windows.net/dotnet
          -RuntimeSourceFeedKey $(dotnetclimsrc-read-sas-token-base64)

    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - _InternalBuildArgs: >-
          /p:TeamName=$(_TeamName)
          /p:OfficialBuildId=$(BUILD.BUILDNUMBER)

    # Only enable publishing in non-public, non PR scenarios.
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - _HelixSource: official/dotnet/dotnet-monitor/$(Build.SourceBranch)
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
      - _HelixSource: pr-internal/dotnet/dotnet-monitor/$(Build.SourceBranch)
    - ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
      - _HelixSource: pr/dotnet/dotnet-monitor/$(Build.SourceBranch)

    - ${{ if eq(parameters.osGroup, 'Windows') }}:
      - scriptExt: '.cmd'
    - ${{ if ne(parameters.osGroup, 'Windows') }}:
      - scriptExt: '.sh'

    steps:
    - ${{ if ne(variables['System.TeamProject'], 'public') }}:
      - ${{ if eq(parameters.osGroup, 'Windows') }}:
        - task: PowerShell@2
          displayName: Setup Private Feeds Credentials
          inputs:
            filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.ps1
            arguments: -ConfigFile $(Build.SourcesDirectory)/NuGet.config -Password $Env:Token
          env:
            Token: $(dn-bot-dnceng-artifact-feeds-rw)
      - ${{ if ne(parameters.osGroup, 'Windows') }}:
        - task: Bash@3
          displayName: Setup Private Feeds Credentials
          inputs:
            filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.sh
            arguments: $(Build.SourcesDirectory)/NuGet.config $Token
          env:
            Token: $(dn-bot-dnceng-artifact-feeds-rw)

    - ${{ if ne(parameters.osGroup, 'Windows') }}:
      - task: NodeTool@0
        displayName: Install Node.js
        inputs:
          # Version requirements:
          # - Azurite requires 8.x or higher.
          # - The alpine containers have their own build of Node.js of 10.x but without supplemental tooling like npm.
          # Since the alpine containers already have a Node.js build, match it's major version for a compatible version
          # of npm across all build environments.
          versionSpec: '10.x'
      - task: Npm@1
        displayName: Install Azurite
        inputs:
          command: custom
          customCommand: install -g azurite
    # When using the Alpine build containers, the above npm install will install to the system's
    # node directory instead of the agent's copy.
    # The container doesn't have the node bin directory included in PATH by default, so global npm tool installations
    # are not discoverable by the test infrastructure.
    #
    # Add the azurite installation location to PATH to workaround this.
    - ${{ if eq(parameters.osGroup, 'Linux_Musl') }}:
      - script: echo "##vso[task.prependpath]/usr/share/node/bin"
        displayName: Add Azurite to PATH

    - script: >-
        $(Build.SourcesDirectory)/eng/cibuild$(scriptExt)
        -configuration ${{ parameters.configuration }}
        -architecture ${{ parameters.architecture }}
        $(_CrossBuildArgs)
        $(_TestArgs)
        $(_InternalInstallArgs)
        $(_InternalBuildArgs)
      displayName: Build and Test
      ${{ if and(eq(parameters.architecture, 'arm64'), in(parameters.osGroup, 'Linux', 'Linux_Musl')) }}:
        env:
          ROOTFS_DIR: '/crossrootfs/arm64'

    - ${{ if and(ne(variables['System.TeamProject'], 'public'), gt(length(parameters.publishArtifactsSubPaths), 0)) }}:
      - ${{ each subPath in parameters.publishArtifactsSubPaths }}:
        - task: CopyFiles@2
          displayName: Gather Artifacts (${{ subPath.source }})
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/artifacts/${{ subPath.source }}'
            Contents: '**'
            TargetFolder: '$(Build.ArtifactStagingDirectory)/artifacts/${{ coalesce(subPath.target, subPath.source) }}'

      - task: PublishBuildArtifacts@1
        displayName: Publish Artifacts
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)/artifacts'
          artifactName: Build_${{ parameters.configuration }}

    # Publish test results to Azure Pipelines
    - ${{ if ne(parameters.testGroup, 'None') }}:
      - ${{ each testResultTfm in parameters.testResultTfms }}:
        - task: PublishTestResults@2
          displayName: Publish Test Results (${{ testResultTfm.value }})
          inputs:
            testResultsFormat: VSTest
            testResultsFiles: '**/*Tests*${{ testResultTfm.key }}*.trx'
            searchFolder: '$(Build.SourcesDirectory)/artifacts/TestResults'
            failTaskOnFailedTests: true
            testRunTitle: '${{ coalesce(parameters.displayName, parameters.name) }} ${{ testResultTfm.value }}'
            publishRunAttachments: true
            mergeTestResults: true
            buildConfiguration: ${{ parameters.name }}
          continueOnError: true
          condition: succeededOrFailed()

      - ${{ if ne(variables['System.TeamProject'], 'public') }}:
        - task: PublishBuildArtifacts@1
          displayName: Publish Test Result Files
          inputs:
            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/TestResults/$(_BuildConfig)'
            PublishLocation: Container
            ArtifactName: TestResults_${{ parameters.osGroup }}_${{ parameters.architecture }}_${{ parameters.configuration }}
          continueOnError: true
          condition: succeededOrFailed()
