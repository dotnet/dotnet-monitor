name: 'Generate release notes'

on:
  workflow_dispatch:
    inputs:
      include_main_prs:
        description: 'Include PRs that were merged into main?'
        required: true
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  generate-release-notes:
    name: 'Generate release notes'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout release branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch the entire repo for the below git commit graph operations

      - name: Calculate release information
        run: |
          git fetch --tags

          # Grab the latest tag from the current branch. If it doesn't exist, grab the latest tag across all branches.
          last_release_tag=$(git describe --tags --abbrev=0 || git describe --tags $(git rev-list --tags --max-count=1))
          echo "Using tag: $last_release_tag"
          echo "last_release_date=$(git log -1 --format=%aI ${last_release_tag})" >> $GITHUB_ENV

          versionFile="./eng/Versions.props"
          release_version=$(perl -ne '/<VersionPrefix>([^<]*)/ && print $1' $versionFile)
          release_version_label=$(perl -ne '/<PreReleaseVersionLabel>([^<]*)/ && print $1' $versionFile)
          major_minor_version=${release_version%.*}

          version_url="https://aka.ms/dotnet/diagnostics/monitor${major_minor_version}/release/dotnet-monitor.nupkg.version"
          qualified_release_version=$(curl -sL $version_url)
          # Check if the aka.ms url existed
          if [[ "$qualified_release_version" =~ "<html" || -z "$qualified_release_version" ]]; then
            echo "Could not determine qualified release version, $version_url did not contain the expected information"
            exit 1
          fi

          # trim the return carriage
          qualified_release_version=$(echo $qualified_release_version | tr -d '\r')

          friendly_release_name=""

          if [ "$release_version_label" == "rtm" ] || [ "$release_version_label" == "servicing" ]; then
            friendly_release_name="$release_version build"
          elif [ "$release_version_label" == "rc" ]; then
            friendly_release_name="official $release_version Release Candidate"
          else
            friendly_release_name="next official preview version"
          fi

          echo "release_note_path=$(echo ./documentation/releaseNotes/releaseNotes.v${qualified_release_version}.md)" >> $GITHUB_ENV
          echo "friendly_release_name=$(echo ${friendly_release_name})" >> $GITHUB_ENV
          echo "qualified_release_version=$(echo ${qualified_release_version})" >> $GITHUB_ENV

      - name: Checkout main
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Generate release notes
        if: ${{ inputs.include_main_prs != true }}
        uses: ./.github/actions/generate-release-notes
        with:
          output: ${{ env.release_note_path }}
          last_release_date:  ${{ env.last_release_date }}
          build_description: ${{ env.friendly_release_name }}
          auth_token: ${{ secrets.GITHUB_TOKEN }}
          branch_name: ${{ github.ref_name }}

      - name: Generate release notes (main merged)
        if: ${{ inputs.include_main_prs }}
        uses: ./.github/actions/generate-release-notes
        with:
          output: ${{ env.release_note_path }}
          last_release_date:  ${{ env.last_release_date }}
          build_description: ${{ env.friendly_release_name }}
          auth_token: ${{ secrets.GITHUB_TOKEN }}
          branch_name: ${{ github.ref_name }}
          additional_branch: 'main'

      - name: Open PR
        uses: ./.github/actions/open-pr
        with:
          files_to_commit: ${{ env.release_note_path }}
          title: Add ${{ env.qualified_release_version }} release notes
          commit_message: generate release notes
          body: Add ${{ env.qualified_release_version }} release notes. This PR was auto generated and will not be automatically merged in.
          branch_name: releaseNotes/${{ env.qualified_release_version }}
          fail_if_files_unchanged: true
          auth_token: ${{ secrets.GITHUB_TOKEN }}
